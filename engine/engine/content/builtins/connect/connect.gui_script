-- Copyright 2020-2025 The Defold Foundation
-- Copyright 2014-2020 King
-- Copyright 2009-2014 Ragnar Svensson, Christian Murray
-- Licensed under the Defold License version 1.0 (the "License"); you may not use
-- this file except in compliance with the License.
--
-- You may obtain a copy of the License, together with FAQs at
-- https://www.defold.com/license
--
-- Unless required by applicable law or agreed to in writing, software distributed
-- under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
-- CONDITIONS OF ANY KIND, either express or implied. See the License for the
-- specific language governing permissions and limitations under the License.

local function update_interface_list(self)
    local node_text = "Listening on interfaces:\n"
    local ifaddrs = sys.get_ifaddrs()
    for _,interface in ipairs(ifaddrs) do
        local ip = interface.address
        if ip and interface.up and interface.running then
            node_text = node_text .. ip .. "\n"
        end
    end

    gui.set_text(self.node_interfaces, node_text)
end

local function update_version(self)
    gui.set_text(self.node_version, "Defold Version " .. self.ev.version .. "\n(SHA1: " .. self.ev.version_sha1 .. ")")
end

function init(self)
    msg.post(".", "acquire_input_focus")
    self.ev = sys.get_engine_info()

    -- nodes
    self.node_info         = gui.get_node("info")
    self.node_info_btn_hit = gui.get_node("info_btn_hit")
    self.node_info_btn     = gui.get_node("info_btn")
    self.node_version      = gui.get_node("version")
    self.node_interfaces   = gui.get_node("interface_list")
    self.node_loading      = {gui.get_node("loading_1"), gui.get_node("loading_2"), gui.get_node("loading_3")}

    -- start loading animation
    for k,v in ipairs(self.node_loading) do
        gui.animate(v, "color.w", 1, gui.EASING_INCUBIC, 1, k/4, nil, gui.PLAYBACK_LOOP_PINGPONG)
    end

    update_version(self)

    -- hide info box
    self.show_info = false
    gui.set_enabled(self.node_info, false)
end

function update(self, dt)
    update_interface_list(self)
end

function on_message(self, message_id, message, sender)
    if message_id == hash("layout_changed") then
        update_version(self)
    end
end

local function toggle_info(self)
    self.show_info = not self.show_info
    gui.set_enabled(self.node_info, self.show_info)
end

local function action_test(self, action_id, action)
    if action_id == hash("touch") or action_id == hash("ok") then
        return true 
    end

    if action.gamepad ~= nil and action.released then
        return true
    end

    return false
end

function on_input(self, action_id, action)
    if action_test(self, action_id, action) then
        if self.show_info then
            if action.released then
                toggle_info(self)
            end
        else
            local hit = action_id == hash("touch") and gui.pick_node(self.node_info_btn_hit, action.x, action.y) or true

            -- visual feedback on button pressed
            if hit then
                gui.cancel_animation(self.node_info_btn, "color.w")
                gui.set_color(self.node_info_btn, vmath.vector4(1,1,1,0))

                if action.released then
                    toggle_info(self)
                end
            end
            if action.released or not hit then
                gui.animate(self.node_info_btn, "color.w", 1, gui.EASING_OUTCUBIC, 1)
            end
        end
    end
end

