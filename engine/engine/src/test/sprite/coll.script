-- Copyright 2020-2025 The Defold Foundation
-- Copyright 2014-2020 King
-- Copyright 2009-2014 Ragnar Svensson, Christian Murray
-- Licensed under the Defold License version 1.0 (the "License"); you may not use
-- this file except in compliance with the License.
--
-- You may obtain a copy of the License, together with FAQs at
-- https://www.defold.com/license
--
-- Unless required by applicable law or agreed to in writing, software distributed
-- under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
-- CONDITIONS OF ANY KIND, either express or implied. See the License for the
-- specific language governing permissions and limitations under the License.


local function compare_fp(lhs, rhs)
    local epsilon = 1e-10
    local diff = math.abs(lhs - rhs)
    return epsilon > diff
end

function init(self)
    self.sprite = msg.url("#sprite")
    msg.post(self.sprite, "play_animation", {id = hash("anim")})

    -- properties
    go.set("#sprite", "scale", vmath.vector3(1, 2, 3))
    local scale = go.get("#sprite", "scale")
    assert(scale.x == 1)
    assert(scale.y == 2)
    assert(scale.z == 3)
    go.set("#sprite", "scale.x", 4)
    assert(go.get("#sprite", "scale.x") == 4)
    go.set("#sprite", "scale.y", 5)
    assert(go.get("#sprite", "scale.y") == 5)
    go.set("#sprite", "scale.z", 6)
    assert(go.get("#sprite", "scale.z") == 6)

    go.set("#sprite", "scale.xy", 7)
    assert(go.get("#sprite", "scale.x") == 7)
    assert(go.get("#sprite", "scale.y") == 7)
    assert(go.get("#sprite", "scale.z") == 6)

    go.set("#sprite", "scale.xy", vmath.vector3(8, 9, 10))
    assert(go.get("#sprite", "scale.x") == 8)
    assert(go.get("#sprite", "scale.y") == 9)
    assert(go.get("#sprite", "scale.z") == 6)

    local size = go.get("#sprite", "size")
    local sx = go.get("#sprite", "size.x")
    local sy = go.get("#sprite", "size.y")
    local sz = go.get("#sprite", "size.z")
    assert(size.x == sx)
    assert(size.y == sy)
    assert(size.z == sz)
    assert(compare_fp(sx, 1))
    assert(compare_fp(sy, 1))
    assert(compare_fp(sz, 1))

    msg.post(".", "try_set_size")
    msg.post(".", "try_animate_size")

    go.animate("#sprite", "scale.xy", go.PLAYBACK_ONCE_FORWARD, 20, go.EASING_LINEAR, 1/120)
end

local function fail_set_size(self)
    print "EXPECTED ERROR: Attempting improper set operation"
    go.set("#sprite", "size.x", 1)
    go.set("#sprite", "size", vmath.vector3(8,8,8))
end

local function fail_animate_size(self)
    print "EXPECTED ERROR: Attempting improper animation operation"
    go.animate("#sprite", "size.x", go.PLAYBACK_ONCE_FORWARD, 20, go.EASING_LINEAR, 1)
end

local function check_scale_xy_animate_result()
    local scale_x = go.get("#sprite", "scale.x")
    local scale_y = go.get("#sprite", "scale.y")
    local scale_z = go.get("#sprite", "scale.z")
    assert(scale_x == 20)
    assert(scale_y == 20)
    assert(scale_z == 6)
end

function on_message(self, message_id, message, sender)
    if message_id == hash("animation_done") and sender == self.sprite then
        local anim_id = go.get("#sprite", "animation")
        assert(anim_id == hash("anim"))
        timer.delay(0.1, false, function() msg.post("#", "delay_done") end)
    elseif message_id == hash("try_set_size") then
        fail_set_size(self)
    elseif message_id == hash("try_animate_size") then
        fail_animate_size(self)
    elseif message_id == hash("delay_done") then
        check_scale_xy_animate_result()
        msg.post("main:/main#script", "done")
    end
end
