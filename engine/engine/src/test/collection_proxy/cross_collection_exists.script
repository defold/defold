-- Copyright 2020-2025 The Defold Foundation
-- Copyright 2014-2020 King
-- Copyright 2009-2014 Ragnar Svensson, Christian Murray
-- Licensed under the Defold License version 1.0 (the "License"); you may not use
-- this file except in compliance with the License.
--
-- You may obtain a copy of the License, together with FAQs at
-- https://www.defold.com/license
--
-- Unless required by applicable law or agreed to in writing, software distributed
-- under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
-- CONDITIONS OF ANY KIND, either express or implied. See the License for the
-- specific language governing permissions and limitations under the License.

function init(self)
    self.test_phase = "loading"
    msg.post("#target_proxy", "load")
end

function on_message(self, message_id, message, sender)
    if message_id == hash("proxy_loaded") then
        if self.test_phase == "loading" then
            self.test_phase = "testing"
            msg.post("#target_proxy", "enable")
            
            -- Test cross-collection go.exists() functionality
            print("Testing cross-collection go.exists() functionality...")
            
            -- Test 1: Positive case - object exists in loaded collection
            local exists_result = go.exists("cross_collection_target:/target_object")
            assert(exists_result == true, "Expected go.exists('cross_collection_target:/target_object') to return true")
            
            -- Test 2: Negative case - object does not exist in loaded collection
            local not_exists_result = go.exists("cross_collection_target:/nonexistent_object")
            assert(not_exists_result == false, "Expected go.exists('cross_collection_target:/nonexistent_object') to return false")
            
            -- Test 3: Non-existent collection should return false (not error)
            local invalid_collection_result = go.exists("invalid_collection:/any_object")
            assert(invalid_collection_result == false, "Expected go.exists('invalid_collection:/any_object') to return false")
            
            print("All cross-collection go.exists() tests passed!")
            
            -- Now test unload scenario
            msg.post("#target_proxy", "unload")
            self.test_phase = "unloading"
        end
    elseif message_id == hash("proxy_unloaded") then
        if self.test_phase == "unloading" then
            -- Test 4: After unload, cross-collection queries should return false
            local unloaded_result = go.exists("cross_collection_target:/target_object")
            assert(unloaded_result == false, "Expected go.exists('cross_collection_target:/target_object') to return false after unload")
            msg.post("main:/main#script", "done")
        end
    elseif message_id == hash("init") then
        -- Called by main test orchestrator, start the test
        msg.post("#target_proxy", "load")
    end
end