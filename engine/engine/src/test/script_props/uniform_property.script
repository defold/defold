-- Copyright 2020-2025 The Defold Foundation
-- Copyright 2014-2020 King
-- Copyright 2009-2014 Ragnar Svensson, Christian Murray
-- Licensed under the Defold License version 1.0 (the "License"); you may not use
-- this file except in compliance with the License.
--
-- You may obtain a copy of the License, together with FAQs at
-- https://www.defold.com/license
--
-- Unless required by applicable law or agreed to in writing, software distributed
-- under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
-- CONDITIONS OF ANY KIND, either express or implied. See the License for the
-- specific language governing permissions and limitations under the License.

local test_counter = require("script_props.test_counter")

go.property("testvalue", vmath.vector4(4, 5, 6, 7))

local function assert_exit(assert_that, error_string)
    if not assert_that then
        if error_string then
            print(error_string)
        end
        msg.post("@system:", "exit", { code = 1 })
        assert(assert_that)
    end
end

local function assert_vec4(v_test,v_correct)
    local v = v_test.x == v_correct.x and
        v_test.y == v_correct.y and
        v_test.z == v_correct.z and
        v_test.w == v_correct.w
    local e = v and nil or tostring(v_test) .. " and " .. tostring(v_correct) .. " are not the same!"
    assert_exit(v, e)
end

local function assert_number(v_test,v_correct)
    local v = v_test == v_correct
    local e = v and nil or tostring(v_test) .. " and " .. tostring(v_correct) .. " are not the same!"
    assert_exit(v, e)
end

local function assert_error(func)
    local r, err = pcall(func)
    assert_exit(not r, err)
end

local function assert_not_error(func)
    local r, err = pcall(func)
    assert_exit(r, err)
end

function init(self, config)
    test_counter.start()
    -- Test that it works with an empty table
    assert_vec4(go.get("#", "testvalue", {}), vmath.vector4(4,5,6,7))

    -- Get First Array value, specified in the material
    assert_vec4(go.get("#sprite", "uniform_array", { index = 1 }), vmath.vector4(1,0,0,1))

    -- Get second array value, specified in the material
    assert_vec4(go.get("#sprite", "uniform_array", { index = 2 }), vmath.vector4(0,1,0,1))

    -- Test index out of bounds
    assert_error(function() go.get("#sprite", "uniform_array", { index = 0 }) end)
    assert_error(function() go.get("#sprite", "uniform_array", { index = 17 }) end)
    assert_error(function() go.get("#sprite", "uniform_array", { index = -1 }) end)
    assert_error(function() go.get("#sprite", "uniform_array.y", { index = 17 }) end)

    -- Test setting a value and then getting it
    local v_to_set = vmath.vector4(10, 5, 3, 1)
    assert_not_error(function() go.set("#sprite", "uniform_array", v_to_set, { index = 16 }) end)

    local v_from_prop = go.get("#sprite", "uniform_array", { index = 16 })
    assert_vec4(v_from_prop, v_to_set)

    -- Test getting a single element from a constant
    assert_number(go.get("#sprite", "uniform_array.x", { index = 16 }), 10)
    assert_number(go.get("#sprite", "uniform_array.y", { index = 16 }), 5)
    assert_number(go.get("#sprite", "uniform_array.z", { index = 16 }), 3)
    assert_number(go.get("#sprite", "uniform_array.w", { index = 16 }), 1)

    -- Test setting a single element to a constant
    assert_not_error(function() go.set("#sprite", "uniform_array.y", 7, { index = 15}) end)
    assert_number(go.get("#sprite", "uniform_array.y", { index = 15 }), 7)

    -- Test getting all values of the array
    local vals = go.get("#sprite", "uniform_array")
    assert_number(#vals, 16)
    assert_vec4(vals[1],  vmath.vector4(1,0,0,1))
    assert_vec4(vals[2],  vmath.vector4(0,1,0,1))
    assert_vec4(vals[15], vmath.vector4(0,7,0,0))
    assert_vec4(vals[16], vmath.vector4(10, 5, 3, 1))

    -- Test setting array from a table
    go.set("#sprite", "uniform_array", {
        vmath.vector4(1337,0,0,0),
        vmath.vector4(0,99,0,0),
        vmath.vector4(0,0,666,0),
    })

    vals = go.get("#sprite", "uniform_array")
    assert_number(#vals, 16)
    assert_vec4(vals[1],  vmath.vector4(1337,0,0,0))
    assert_vec4(vals[2],  vmath.vector4(0,99,0,0))
    assert_vec4(vals[3],  vmath.vector4(0,0,666,0))
    assert_vec4(vals[15], vmath.vector4(0,7,0,0))
    assert_vec4(vals[16], vmath.vector4(10, 5, 3, 1))

    -- Test setting an array by elements
    go.set("#sprite", "uniform_array.x", { 99, 98, 97 })
    vals = go.get("#sprite", "uniform_array.x")
    assert_number(#vals, 16)
    assert_number(vals[1], 99)
    assert_number(vals[2], 98)
    assert_number(vals[3], 97)

    test_counter.done()
end

