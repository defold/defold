-- Copyright 2020-2024 The Defold Foundation
-- Copyright 2014-2020 King
-- Copyright 2009-2014 Ragnar Svensson, Christian Murray
-- Licensed under the Defold License version 1.0 (the "License"); you may not use
-- this file except in compliance with the License.
-- 
-- You may obtain a copy of the License, together with FAQs at
-- https://www.defold.com/license
-- 
-- Unless required by applicable law or agreed to in writing, software distributed
-- under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
-- CONDITIONS OF ANY KIND, either express or implied. See the License for the
-- specific language governing permissions and limitations under the License.

function init(self)
    local label_str = ""

    for i = 32, 127 do
        label_str = label_str .. string.char(i)
    end

    label.set_text("#label_bitmap", label_str)
    label.set_text("#label_distance_field", label_str)
end

function update(self, dt)
    -- Values are taken from the output from resource.get_text_metrics from defold version 1.2.138
    -- The base settings used are:
    --  font: "/builtins/fonts/vera_mo_bd.ttf" - monospaced
    --  size: 14
    --  antialias: 1
    --  alpha: 1.0
    --  outline_alpha: 1.0
    --  outline_width: 4.0
    --  shadow_alpha: 1.0
    --  shadow_blur: 2

    local function test_label_metrics(label_name, test_metrics)
        -- Test that we are getting the expected value back from get_text_metrics
        local comp = "#" .. label_name
        local font = go.get(comp, "font")
        local metrics = resource.get_text_metrics(font, label.get_text(comp))

        local result = test_metrics.max_ascent  == metrics.max_ascent and
                       test_metrics.max_descent == metrics.max_descent and
                       test_metrics.width       == metrics.width and
                       test_metrics.height      == metrics.height

        if not result then
            pprint("Wanted:", test_metrics)
            pprint("Got:", metrics)
        end
        return result
    end

    local function test_label_bitmap()
        local metrics_valid = {
            max_ascent  = 13,
            width       = 774,
            height      = 17,
            max_descent = 4
        }

        return test_label_metrics("label_bitmap", metrics_valid)
    end

    local function test_label_df()
        local metrics_valid ={
              max_ascent = 13,
              width = 775,
              height = 17,
              max_descent = 4,
        }

        return test_label_metrics("label_distance_field", metrics_valid)
    end

    local success = test_label_bitmap() and test_label_df()

    if success then
        msg.post("@system:", "exit", { code = 0 })
    else
        msg.post("@system:", "exit", { code = 1 })
    end
end
