-- Copyright 2020-2025 The Defold Foundation
-- Copyright 2014-2020 King
-- Copyright 2009-2014 Ragnar Svensson, Christian Murray
-- Licensed under the Defold License version 1.0 (the "License"); you may not use
-- this file except in compliance with the License.
--
-- You may obtain a copy of the License, together with FAQs at
-- https://www.defold.com/license
--
-- Unless required by applicable law or agreed to in writing, software distributed
-- under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
-- CONDITIONS OF ANY KIND, either express or implied. See the License for the
-- specific language governing permissions and limitations under the License.

local HIT = hash("ray_cast_response")
local MISS = hash("ray_cast_missed")
local A = hash("groupa")
local B = hash("groupb")

local function check_messages(m)
	assert(m[1] and m[1].message_id == HIT and m[1].message.group == B and m[1].message.id == hash("/dynamic_b"))
	assert(m[2] and m[2].message_id == HIT and m[2].message.group == A and m[2].message.id == hash("/dynamic_a"))
	assert(m[3] and m[3].message_id == MISS)

	assert(m[4] and m[4].message_id == HIT and m[4].message.group == B and m[4].message.id == hash("/kinematic_b"))
	assert(m[5] and m[5].message_id == HIT and m[5].message.group == A and m[5].message.id == hash("/kinematic_a"))
	assert(m[6] and m[6].message_id == MISS)

	assert(m[7] and m[7].message_id == HIT and m[7].message.group == B and m[7].message.id == hash("/static_b"))
	assert(m[8] and m[8].message_id == HIT and m[8].message.group == A and m[8].message.id == hash("/static_a"))
	assert(m[9] and m[9].message_id == MISS)

	assert(m[10] and m[10].message_id == MISS)
	assert(m[11] and m[11].message_id == MISS)

	assert(not m[12])
	assert(not m[13])
end

function init(self)
	-- refer to ray_cast.collection for more details on the orientation and
	-- arrangement of the game objects
	-- The game objects are basically arranged along the cardinal directions
	-- two-and-two and the ray casts are made towards the one furthest away in
	-- each direction.
	-- The tests below verify that the correct response is received (hit/miss)
	-- and that the correct group is detected.
	-- The test also ensures that collision pbjects of type 'trigger' does not
	-- generate a ray cast response (they should result in a miss)
	local from = go.get_position()
	physics.raycast_async(from, go.get_position("dynamic_b"), { B }, 1)			-- B should be hit
	physics.raycast_async(from, go.get_position("dynamic_b"), { A, B }, 2)		-- A should be hit
	physics.raycast_async(from, go.get_position("dynamic_b"), {}, 3)			-- miss

	physics.raycast_async(from, go.get_position("kinematic_b"), { B }, 4)		-- B should be hit
	physics.raycast_async(from, go.get_position("kinematic_b"), { A, B }, 5)		-- A should be hit
	physics.raycast_async(from, go.get_position("kinematic_b"), {}, 6)			-- miss

	physics.raycast_async(from, go.get_position("static_b"), { B }, 7)			-- B should be hit
	physics.raycast_async(from, go.get_position("static_b"), { A, B }, 8)		-- A should be hit
	physics.raycast_async(from, go.get_position("static_b"), {}, 9)				-- miss

	physics.raycast_async(from, go.get_position("trigger_b"), { A, B }, 10)		-- miss
	physics.raycast_async(from, go.get_position("miss"), { A, B }, 11)			-- miss

	-- ray cast with zero length
	local from3d = go.get_position("dynamic_b")
	local to3d = go.get_position("dynamic_b")
	physics.raycast_async(from3d, to3d, { A, B }, 12)							-- zero length ray

	-- ray cast with zero length (ignoring z-value variation)
	local from2d = go.get_position("dynamic_b")
	local to2d = go.get_position("dynamic_b")
	from2d.z = -1
	to2d.z = 1
	physics.raycast_async(from2d, to2d, { A, B }, 13)							-- zero length ray

	self.frame_count = 0
	self.messages = {}
end

function update(self, dt)
	self.frame_count = self.frame_count + 1

	if self.frame_count == 2 then
		check_messages(self.messages)
		self.messages = {}

	elseif self.frame_count == 3 then
		local result = nil
		local from = go.get_position()
		result = physics.raycast(from, go.get_position("dynamic_b"), { B })			-- B should be hit
		self.messages[1] = { message_id = HIT, message = result }
		result = physics.raycast(from, go.get_position("dynamic_b"), { A, B })		-- A should be hit
		self.messages[2] = { message_id = HIT, message = result }
		result = physics.raycast(from, go.get_position("dynamic_b"), {})			-- miss
		self.messages[3] = { message_id = MISS, message = result }

		result = physics.raycast(from, go.get_position("kinematic_b"), { B })		-- B should be hit
		self.messages[4] = { message_id = HIT, message = result }
		result = physics.raycast(from, go.get_position("kinematic_b"), { A, B })	-- A should be hit
		self.messages[5] = { message_id = HIT, message = result }
		result = physics.raycast(from, go.get_position("kinematic_b"), {})			-- miss
		self.messages[6] = { message_id = MISS, message = result }

		result = physics.raycast(from, go.get_position("static_b"), { B })			-- B should be hit
		self.messages[7] = { message_id = HIT, message = result }
		result = physics.raycast(from, go.get_position("static_b"), { A, B })		-- A should be hit
		self.messages[8] = { message_id = HIT, message = result }
		result = physics.raycast(from, go.get_position("static_b"), {})				-- miss
		self.messages[9] = { message_id = MISS, message = result }

		result = physics.raycast(from, go.get_position("trigger_b"), { A, B })		-- miss
		self.messages[10] = { message_id = MISS, message = result }
		result = physics.raycast(from, go.get_position("miss"), { A, B })			-- miss
		self.messages[11] = { message_id = MISS, message = result }

		-- ray cast with zero length
		local from3d = go.get_position("dynamic_b")
		local to3d = go.get_position("dynamic_b")
		result = physics.raycast(from3d, to3d, { A, B })							-- zero length ray
		if result ~= nil then
			self.messages[12] = { message_id = "ray_cast_response", message = result }
		end

		-- ray cast with zero length
		local from2d = go.get_position("dynamic_b")
		local to2d = go.get_position("dynamic_b")
		from2d.z = -1
		to2d.z = 1
		result = physics.raycast(from2d, to2d, { A, B })							-- zero length ray
		if result ~= nil then
			self.messages[13] = { message_id = "ray_cast_response", message = result }
		end

		check_messages(self.messages)

		msg.post("main:/main#script", "done")
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("ray_cast_response") or message_id == hash("ray_cast_missed") then
		self.messages[message.request_id] = { message_id = message_id, message = message }
	end
end
