syntax = "proto2";
package dmGraphics;

import "ddf/ddf_extensions.proto";
import "ddf/ddf_math.proto";

option java_package = "com.dynamo.graphics.proto";
option java_outer_classname = "Graphics";

message Cubemap
{
    required string right       = 1 [(resource)=true];
    required string left        = 2 [(resource)=true];
    required string top         = 3 [(resource)=true];
    required string bottom      = 4 [(resource)=true];
    required string front       = 5 [(resource)=true];
    required string back        = 6 [(resource)=true];
}

enum CoordinateSpace
{
    COORDINATE_SPACE_WORLD = 1;
    COORDINATE_SPACE_LOCAL = 2;
}

message VertexAttribute
{
    enum DataType
    {
        TYPE_BYTE             = 1;
        TYPE_UNSIGNED_BYTE    = 2;
        TYPE_SHORT            = 3;
        TYPE_UNSIGNED_SHORT   = 4;
        TYPE_INT              = 5;
        TYPE_UNSIGNED_INT     = 6;
        TYPE_FLOAT            = 7;
    }

    enum SemanticType
    {
        SEMANTIC_TYPE_NONE       = 1;
        SEMANTIC_TYPE_POSITION   = 2;
        SEMANTIC_TYPE_TEXCOORD   = 3;
        SEMANTIC_TYPE_PAGE_INDEX = 4;
        SEMANTIC_TYPE_COLOR      = 5;
        SEMANTIC_TYPE_NORMAL     = 6;
        SEMANTIC_TYPE_TANGENT    = 7;
    }

    message LongValues
    {
        repeated int64 v = 1 [packed = true]; // We use int64 so we can represent the entire signed and unsigned int32 range as human-readable integers in the project files.
    }

    message DoubleValues
    {
        repeated double v = 1 [packed = true];
    }

    required string          name             = 1;
    optional uint64          name_hash        = 2 [(runtime_only) = true];
    optional SemanticType    semantic_type    = 3 [default = SEMANTIC_TYPE_NONE];
    optional int32           element_count    = 4 [default = 0];
    optional bool            normalize        = 5 [default = false];
    optional DataType        data_type        = 6 [default = TYPE_FLOAT];
    optional CoordinateSpace coordinate_space = 7 [default = COORDINATE_SPACE_LOCAL];

    // Note: Add a channel field here for identifying a semantic "channel", i.e a second UV set

    oneof values
    {
        LongValues   long_values   = 8;  // Saved integer values (project files only)
        DoubleValues double_values = 9;  // Saved floating point values (project files only)
        bytes        binary_values = 10 [(runtime_only) = true]; // Packed binary representation of the input values (engine only)
    }
}

enum DepthStencilFormat
{
    DEPTH_STENCIL_FORMAT_D32F     = 1;
    DEPTH_STENCIL_FORMAT_D32F_S8U = 2;
    DEPTH_STENCIL_FORMAT_D16U_S8U = 3;
    DEPTH_STENCIL_FORMAT_D24U_S8U = 4;
    DEPTH_STENCIL_FORMAT_S8U      = 5;
}

message TextureImage
{
    enum Type
    {
        // Corresponds to GL_TEXTURE_2D
        TYPE_2D       = 1;
        // Corresponds to GL_TEXTURE_CUBE_MAP
        TYPE_CUBEMAP  = 2;
        // Corresponds to GL_TEXTURE_2D_ARRAY
        TYPE_2D_ARRAY = 3;
    }

    enum CompressionType
    {
        // Not compressed
        COMPRESSION_TYPE_DEFAULT = 0;
        // WebP encoded (Deprecated, converts to Default)
        COMPRESSION_TYPE_WEBP = 1;
        // WebP lossy encoded (Deprecated, converts to UASTC)
        COMPRESSION_TYPE_WEBP_LOSSY = 2;
        // Basis UASTC
        COMPRESSION_TYPE_BASIS_UASTC = 3;
        // Basis ETC1S
        COMPRESSION_TYPE_BASIS_ETC1S = 4;
    }

    enum CompressionFlags
    {
        // RGB to be cleared when A is zero
        COMPRESSION_FLAG_ALPHA_CLEAN = 1;
    }

    enum TextureFormat
    {
        TEXTURE_FORMAT_LUMINANCE         = 0;
        TEXTURE_FORMAT_RGB               = 1;
        TEXTURE_FORMAT_RGBA              = 2;
        TEXTURE_FORMAT_RGB_PVRTC_2BPPV1  = 3;
        TEXTURE_FORMAT_RGB_PVRTC_4BPPV1  = 4;
        TEXTURE_FORMAT_RGBA_PVRTC_2BPPV1 = 5;
        TEXTURE_FORMAT_RGBA_PVRTC_4BPPV1 = 6;
        TEXTURE_FORMAT_RGB_ETC1          = 7;

        TEXTURE_FORMAT_RGB_16BPP         = 8; // 565
        TEXTURE_FORMAT_RGBA_16BPP        = 9; // 4444

        TEXTURE_FORMAT_LUMINANCE_ALPHA   = 10;

        TEXTURE_FORMAT_RGBA_ETC2         = 11;
        TEXTURE_FORMAT_RGBA_ASTC_4x4     = 12;

        TEXTURE_FORMAT_RGB_BC1           = 13;
        TEXTURE_FORMAT_RGBA_BC3          = 14;
        TEXTURE_FORMAT_R_BC4             = 15;
        TEXTURE_FORMAT_RG_BC5            = 16;
        TEXTURE_FORMAT_RGBA_BC7          = 17;

        TEXTURE_FORMAT_RGB16F            = 18;
        TEXTURE_FORMAT_RGB32F            = 19;
        TEXTURE_FORMAT_RGBA16F           = 20;
        TEXTURE_FORMAT_RGBA32F           = 21;
        TEXTURE_FORMAT_R16F              = 22;
        TEXTURE_FORMAT_RG16F             = 23;
        TEXTURE_FORMAT_R32F              = 24;
        TEXTURE_FORMAT_RG32F             = 25;
    }

    message Image
    {
        required uint32 width                     = 1;
        required uint32 height                    = 2;
        required uint32 original_width            = 3;
        required uint32 original_height           = 4;
        required TextureFormat format             = 5;
        repeated uint32 mip_map_offset            = 6;
        repeated uint32 mip_map_size              = 7;    // always uncompressed (native) size
        required bytes data                       = 8;
        optional CompressionType compression_type = 9 [default = COMPRESSION_TYPE_DEFAULT];
        optional uint64 compression_flags         = 10;
        repeated uint32 mip_map_size_compressed   = 11;
    }

    repeated Image alternatives = 1;
    required Type type          = 2;
    // When count > 1 count mipmaps are laid out contiguously in memory and
    // the mip_map_offset should reflect that, e.g. times 6 for cubemaps
    required uint32 count       = 3;
}

// We encapsulate the texture format in its own message due
// to we cant have repeated enums.
message TextureFormatAlternative
{
    enum CompressionLevel
    {
        FAST    = 0;
        NORMAL  = 1;
        HIGH    = 2;
        BEST    = 3;
    }

    required TextureImage.TextureFormat format  = 1;
    required CompressionLevel compression_level = 2;
    optional TextureImage.CompressionType compression_type = 3 [default = COMPRESSION_TYPE_DEFAULT];
}

message PathSettings
{
    required string path    = 1;
    required string profile = 2;
}

message PlatformProfile
{
    enum OS
    {
        OS_ID_GENERIC = 0;
        OS_ID_WINDOWS = 1;
        OS_ID_OSX     = 2;
        OS_ID_LINUX   = 3;
        OS_ID_IOS     = 4;
        OS_ID_ANDROID = 5;
        OS_ID_WEB     = 6;
        OS_ID_SWITCH  = 7;
        OS_ID_PS4     = 8;
        OS_ID_PS5     = 9;
    }

    required OS os                              = 1;
    repeated TextureFormatAlternative formats   = 2;
    required bool mipmaps                       = 3;
    optional uint32 max_texture_size            = 4;
    optional bool premultiply_alpha             = 5 [default = true];
}

message TextureProfile
{
    required string name = 1;
    repeated PlatformProfile platforms = 2;
}

message TextureProfiles
{

    repeated PathSettings path_settings         = 1;
    repeated TextureProfile profiles            = 2;
}


message ShaderDesc
{
    enum Language
    {
        LANGUAGE_GLSL_SM120 = 1; // OpenGLES 2 compatible
        LANGUAGE_GLSL_SM140 = 2; // OpenGLES 3 compatible
        LANGUAGE_GLES_SM100 = 3; // OpenGLES 2 / WebGL 1
        LANGUAGE_GLES_SM300 = 4; // OpenGLES 3 / WebGL 2
        LANGUAGE_SPIRV      = 5; // Vulkan / MoltenVK
        LANGUAGE_PSSL       = 6; // Playstation
        LANGUAGE_GLSL_SM430 = 7; // OpenGL 4.3+ compatible
    }

    enum ShaderClass
    {
        SHADER_CLASS_GRAPHICS = 0;
        SHADER_CLASS_COMPUTE  = 1;
    }

    enum ShaderDataType
    {
        SHADER_TYPE_UNKNOWN         = 0;
        SHADER_TYPE_INT             = 1;
        SHADER_TYPE_UINT            = 2;
        SHADER_TYPE_FLOAT           = 3;
        SHADER_TYPE_VEC2            = 4;
        SHADER_TYPE_VEC3            = 5;
        SHADER_TYPE_VEC4            = 6;
        SHADER_TYPE_MAT2            = 7;
        SHADER_TYPE_MAT3            = 8;
        SHADER_TYPE_MAT4            = 9;
        SHADER_TYPE_SAMPLER2D       = 10;
        SHADER_TYPE_SAMPLER3D       = 11;
        SHADER_TYPE_SAMPLER_CUBE    = 12;
        SHADER_TYPE_SAMPLER2D_ARRAY = 13;
        SHADER_TYPE_UNIFORM_BUFFER  = 14;

        // Extended types (not universally supported)
        SHADER_TYPE_UVEC2             = 15;
        SHADER_TYPE_UVEC3             = 16;
        SHADER_TYPE_UVEC4             = 17;
        SHADER_TYPE_TEXTURE2D         = 18;
        SHADER_TYPE_UTEXTURE2D        = 19;
        SHADER_TYPE_RENDER_PASS_INPUT = 20;
        SHADER_TYPE_UIMAGE2D          = 21;
        SHADER_TYPE_IMAGE2D           = 22;
        SHADER_TYPE_SAMPLER           = 23;

        SHADER_TYPE_STORAGE_BUFFER    = 24;
    }

    message ResourceType
    {
        oneof Type
        {
            ShaderDataType shader_type = 1;
            int32          type_index  = 2;
        }

        // The engine doesn't know which of the oneofs has been set
        // (we should at some point support that for oneofs)
        optional bool use_type_index = 3;
    }

    message ResourceMember
    {
        required string         name          = 1;
        required uint64         name_hash     = 2;
        required ResourceType   type          = 3;
        optional uint32         element_count = 4;
        optional uint32         offset        = 5;
    }

    message ResourceTypeInfo
    {
        required string         name          = 1;
        required uint64         name_hash     = 2;
        repeated ResourceMember members       = 3;
    }

    message ResourceBinding
    {
        required string         name          = 1;
        required uint64         name_hash     = 2;
        required ResourceType   type          = 3;
        optional uint32         set           = 4;
        optional uint32         binding       = 5;
        optional uint32         block_size    = 6;
    }

    message Shader
    {
        required Language           language              = 1;
        optional bytes              source                = 2;
        optional string             name                  = 3;
        repeated ResourceBinding    uniform_buffers       = 4;
        repeated ResourceBinding    storage_buffers       = 5;
        repeated ResourceBinding    textures              = 6;
        repeated ResourceBinding    inputs                = 7;
        repeated ResourceBinding    outputs               = 8;
        repeated ResourceTypeInfo   types                 = 9;
        optional bool               variant_texture_array = 10 [default = false];
    }

    repeated Shader shaders           = 1;
    optional ShaderClass shader_class = 2;
}
