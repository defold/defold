#! /usr/bin/env python
import os, sys, re
import waflib.Options

def configure(conf):
    pass

def build(bld):
    source      = 'sound_codec.cpp sound_decoder.cpp sound.cpp'.split()
    source_null = 'devices/device_null.cpp sound_null.cpp'.split()
    decoders    = 'decoders/decoder_wav.cpp decoders/decoder_stb_vorbis.cpp stb_vorbis/stb_vorbis.c'.split()

    if bld.env['PLATFORM'] not in ['arm64-nx64', 'x86_64-ps4', 'x86_64-ps5']:
        decoders += 'decoders/decoder_tremolo.cpp'.split()

    source += decoders

    defines = ''
    include = ''

    if 'android' in bld.env.PLATFORM:
        source += ['sound_android.cpp']
    elif bld.env.PLATFORM in ('arm64-ios', 'x86_64-ios'):
        source += ['sound_ios.mm']
    elif bld.env.PLATFORM in ('x86_64-ps4','x86_64-ps5',):
        source += ['sound_ps4.cpp']
    else:
        source += ['sound_generic.cpp']

    if 'android' in bld.env.PLATFORM:
        source += ['devices/device_opensl.cpp']
    elif 'web' in bld.env.PLATFORM:
        source += ['devices/device_js.cpp']
    elif 'nx64' in bld.env.PLATFORM:
        source += ['devices/device_nx64.cpp']
    elif bld.env.PLATFORM in ('x86_64-ps4','x86_64-ps5',):
        source += ['devices/device_ps4.cpp']
    elif bld.env.PLATFORM in ('x86_64-win32','win32',):
        source += ['devices/device_wasapi.cpp']
    else:
        source += ['devices/device_openal.cpp']

    if 'web' in bld.env['PLATFORM']:
        bld.install_files('${PREFIX}/lib/%s/js' % bld.env['PLATFORM'], 'js/library_sound.js', postpone = False)
    elif re.match('arm.*?android', bld.env['PLATFORM']):
        classpath = [bld.env.ANDROID_JAR]
        classpath = os.pathsep.join(classpath)
        bld.env['JAVACFLAGS'] = '-g -source 1.8 -target 1.8'.split()
        bld(features='javac seq',
            classpath=classpath,
            outdir='java',
            source_root='java')
        bld(features='jar seq',
            basedir='java',
            destfile='sound_android.jar')
        bld.install_files('${PREFIX}/share/java', 'sound_android.jar')

    sound = bld.stlib(features = 'c cxx ddf',
                      includes = '. %s' % include,
                      defines  = defines,
                      target   = 'sound',
                      source= source)

    sound_null = bld.stlib(features = 'c cxx ddf',
                           includes = '.',
                           defines  = defines,
                           target   = 'sound_null',
                           source   = source_null)

    bld.install_files('${PREFIX}/include/sound', 'sound.h')

    if sys.platform == 'win32':
        #NOTE: _XBOX to get static lib and avoid dllimport/dllexport stuff
        sound.defines = '_XBOX'
        sound_null.defines = '_XBOX'

    if not waflib.Options.options.skip_build_tests:
        bld.recurse('test')
