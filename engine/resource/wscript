#! /usr/bin/env python

VERSION='0.1'
APPNAME='resource'

srcdir = '.'
blddir = 'build'

PORT=6123

import os, sys, subprocess, socket
import http, urllib, time, atexit, urllib.error, urllib.request
from waflib import Logs
import waflib.Options
sys.path = ["src"] + sys.path # in order to import waf_resource
import waf_dynamo, waf_ddf, waf_resource
import TestContext

test_context = None

os.environ['PATH'] = os.path.abspath('src') + os.pathsep + os.environ['PATH']

def init(ctx):
    global test_context
    if 'build' in waflib.Options.commands:
        test_context = TestContext.create_test_context()

def options(opt):
    opt.load('waf_dynamo')

def configure(conf):
    conf.load('waf_dynamo')
    conf.load('waf_resource')
    conf.load('java')

    waf_ddf.configure(conf)

    conf.recurse('src')

    conf.env.append_value('INCLUDES', "src")
    conf.env['STLIB_DLIB'] = ['dlib', 'mbedtls', 'zip']
    conf.env['STLIB_DDF'] = 'ddf'

    conf.env.append_unique('DEFINES', 'DLIB_LOG_DOMAIN="RESOURCE"')

def build(bld):
    global test_context
    bld.recurse('src')
    TestContext.initialize_test_context(test_context, bld)

def kill_proc(proc):
    proc.kill()

def _get_local_ip(self):
    hostname = socket.gethostname()
    try:
        local_ip = socket.gethostbyname(hostname)
    except socket.gaierror as e:
        print(e)
        print(f"Hostname was '{hostname}', now trying empty ('') string now")
        local_ip = socket.gethostbyname("")
    return local_ip

def _start_server(self, local_ip, port, configname=None):
    Logs.info('Starting test server at http://%s:%d' % (local_ip, port))
    configfile = waf_dynamo.create_test_server_config(self, port=port, ip=local_ip, config_name=configname)

    proc = subprocess.Popen(["python", "-m", "http.server", str(port)],
                            shell = False,
                            cwd = "build/src/test")
    return proc, configfile

def _wait_for_server(self, local_ip, port):
    timeout = 8 # seconds
    start = time.time()
    while True:
        if time.time() - start > timeout:
            Logs.error('HTTP server failed to start within %d seconds' % timeout)
            sys.exit(1)
        try:
            urllib.request.urlopen('http://%s:%d' % (local_ip, port))
            break
        except urllib.error.URLError:
            print('Waiting for HTTP testserver to start...')
            sys.stdout.flush()
            time.sleep(0.5)
        except Exception as e:
            self.fatal('Failed to start test server at http://%s:%d: %s: %s, Is there another test server running?' % (local_ip, port, type(e), e))


def _remove_config_file(path):
    os.remove(path)

def server(self):
    local_ip = _get_local_ip(self)
    proc, configfile = _start_server(self, local_ip, PORT, "unittest.cfg")
    atexit.register(_remove_config_file, configfile)

    _wait_for_server(self, local_ip, PORT)

    timeout = 240 # seconds
    start = time.time()
    while True:
        if time.time() - start > timeout:
            print('Shutting down server after %d seconds' % timeout)
            return
        time.sleep(1.0)

def shutdown(self):
    if not TestContext.is_valid(test_context) or waflib.Options.options.skip_build_tests or waflib.Options.options.skip_tests:
        return

    local_ip = _get_local_ip(self)
    proc, configfile = _start_server(self, local_ip, PORT)
    atexit.register(kill_proc, proc)

    _wait_for_server(self, local_ip, PORT)

    try:
        waf_dynamo.run_tests(test_context, valgrind = True, configfile = configfile)
    finally:
        os.remove(configfile)
