syntax = "proto2";
package dmRigDDF;

import "ddf/ddf_extensions.proto";
import "ddf/ddf_math.proto";

option java_package = "com.dynamo.rig.proto";
option java_outer_classname = "Rig";

enum AlphaMode {
    OPAQUE  = 0;
    MASK    = 1;
    BLEND   = 2;
    MAX_ENUM= 3;
}

// We're not really using the Image concept at runtime
// message Image
// {
//     optional string name = 1;
//     optional string uri = 2;
//     optional string mimetype = 3;
//     optional uint32 target = 4;
//     optional uint32 index = 5;
//     repeated bytes  buffer = 6;
// }

message Sampler
{
    optional string name        = 1;
    optional uint32 index       = 2;                      // Index into the scene samplers list
    optional uint32 magFilter   = 3 [default = 9728]; // Required=No, No default, NEAREST=9728, LINEAR=9729
    optional uint32 minFilter   = 4 [default = 9728]; // Required=No, No default, NEAREST=9728, LINEAR=9729
    optional uint32 wrapS       = 5 [default = 10497];    // Required=No, Default=10497 (REPEAT)
    optional uint32 wrapT       = 6 [default = 10497];    // Required=No, Default=10497 (REPEAT)
}

message Texture
{
    optional string name    = 1;
    optional uint32 index   = 2; // Index into the scene textures
    optional string path    = 3; // Technically an Image struct
    optional Sampler sampler = 4;
}

// KHR_texture_transform: https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_texture_transform/README.md
message TextureTransform
{
    optional float offset_x = 1 [default = 0];
    optional float offset_y = 2 [default = 0];
    optional float scale_x  = 3 [default = 1];
    optional float scale_y  = 4 [default = 1];
    optional float rotation = 5 [default = 0];
    optional int32 texcoord = 6 [default = -1]; // -1 if not set
}

message TextureView
{
    optional Texture texture    = 1;
    optional int32 texcoord     = 2 [default = -1]; // It should be set
    optional float scale        = 3 [default = 1];
    optional TextureTransform transform = 4;
}

// https://registry.khronos.org/glTF/specs/2.0/glTF-2.0.html#reference-material-pbrmetallicroughness
message PbrMetallicRoughness
{
    optional TextureView        baseColorTexture        = 1;
    optional TextureView        metallicRoughnessTexture= 2;
    optional dmMath.Vector4One  baseColorFactor         = 3;
    optional float              metallicFactor          = 4 [default = 1];
    optional float              roughnessFactor         = 5 [default = 1];
}

// https://kcoley.github.io/glTF/extensions/2.0/Khronos/KHR_materials_pbrSpecularGlossiness/
message PbrSpecularGlossiness
{
    optional TextureView diffuseTexture             = 1;
    optional TextureView specularGlossinessTexture  = 2;
    optional dmMath.Vector4One diffuseFactor        = 3;
    optional dmMath.Vector3One specularFactor       = 4;
    optional float glossinessFactor                 = 5 [default = 1];
}

// https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_clearcoat/README.md
message Clearcoat
{
    optional TextureView clearcoatTexture           = 1;
    optional TextureView clearcoatRoughnessTexture  = 2;
    optional TextureView clearcoatNormalTexture     = 3;
    optional float clearcoatFactor                  = 4 [default = 0];
    optional float clearcoatRoughnessFactor         = 5 [default = 0];
}

// https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_transmission/README.md
message Transmission
{
    optional TextureView transmissionTexture    = 1;
    optional float transmissionFactor           = 2 [default = 0];
}

// https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_ior/README.md
message Ior
{
    optional float ior = 1 [default = 0];
}

// https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_specular/README.md#extending-materials
message Specular
{
    optional TextureView specularTexture            = 1;
    optional TextureView specularColorTexture       = 2;
    optional dmMath.Vector3One specularColorFactor  = 3;
    optional float specularFactor                   = 4 [default = 1];
}

// https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_volume/README.md#properties
message Volume
{
    optional TextureView thicknessTexture       = 1;
    optional float thicknessFactor              = 2 [default = 0];
    optional dmMath.Vector3One attenuationColor = 3;
    optional float attenuationDistance          = 4 [default = -1.0]; // +Infinity as default
};

// https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_sheen/README.md#sheen
message Sheen
{
    optional TextureView sheenColorTexture      = 1;
    optional TextureView sheenRoughnessTexture  = 2;
    optional dmMath.Vector3 sheenColorFactor    = 3;
    optional float sheenRoughnessFactor         = 4 [default = 0];
};

// https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_emissive_strength/README.md#parameters
message EmissiveStrength
{
    optional float emissiveStrength = 1 [default = 1];
}

// https://github.com/KhronosGroup/glTF/blob/main/extensions/2.0/Khronos/KHR_materials_iridescence/README.md#properties
message Iridescence
{
    optional float iridescenceFactor                 = 1 [default = 0];
    optional TextureView iridescenceTexture          = 2;
    optional float iridescenceIor                    = 3 [default = 1.3];
    optional float iridescenceThicknessMin           = 4 [default = 100.0];
    optional float iridescenceThicknessMax           = 5 [default = 400.0];
    optional TextureView iridescenceThicknessTexture = 6;
};

message Material
{
    optional string name                       = 1;
//     public int index = 0;
//     public byte isSkinned = 0;
//     public PbrMetallicRoughness pbrMetallicRoughness;
//     public PbrSpecularGlossiness pbrSpecularGlossiness;
//     public Clearcoat clearcoat;
//     public Ior ior;
//     public Specular specular;
//     public Sheen sheen;
//     public Transmission transmission;
//     public Volume volume;
//     public EmissiveStrength emissiveStrength;
//     public Iridescence iridescence;
//     public TextureView normalTexture;
//     public TextureView occlusionTexture;
//     public TextureView emissiveTexture;
//     public float[] emissiveFactor;
//     public float alphaCutoff = 0.0f;
//     public AlphaMode alphaMode = AlphaMode.ALPHA_MODE_OPAQUE;
//     public boolean doubleSided = false;
//     public boolean unlit = false;
};
