#! /usr/bin/env python

VERSION='0.1'
APPNAME='tools'

srcdir = '.'
blddir = 'build'

import sys, re
import waf_dynamo, waf_ddf
from BuildUtility import create_build_utility
import waflib.Options
import TestContext

test_context = None

def init(ctx):
    global test_context
    if 'build' in waflib.Options.commands:
        test_context = TestContext.create_test_context()

def options(opt):
    opt.load('waf_dynamo')

def configure(conf):
    conf.load('waf_dynamo')

    try:
        build_util = create_build_utility(conf.env)
    except BuildUtilityException as ex:
        conf.fatal(ex.msg)

    waf_ddf.configure(conf)

    conf.recurse('src')

    platform = conf.env['PLATFORM']

    glfw_library = 'dmglfw'

    if platform in ('x86_64-macos','arm64-macos'):
        glfw_library = 'glfw3'
        conf.env.append_value('LINKFLAGS', ['-framework', 'Cocoa', '-framework', 'OpenGL', '-framework', 'AGL', '-framework', 'IOKit', '-framework', 'Carbon', '-framework', 'CoreVideo', '-framework', 'QuartzCore'])
    elif platform == 'x86_64-ios':
        pass
    elif platform == "linux" or platform == "x86_64-linux":
        conf.env['LIB_X'] = ['Xext', 'X11', 'Xi', 'GL', 'GLU']
    elif "win32" in platform:
        conf.env.append_value('LINKFLAGS', ['opengl32.lib', 'user32.lib', 'shell32.lib', 'xinput9_1_0.lib', 'dinput8.lib', 'dxguid.lib'])
    elif re.match('arm.*?android', platform):
        conf.env.append_value('LINKFLAGS', ['-lEGL', '-lGLESv1_CM', '-lGLESv2', '-landroid'])

    conf.env.append_value('INCLUDES', "default/src")
    conf.env['STLIB_DLIB'] = ['dlib', 'mbedtls', 'zip']
    conf.env['STLIB_DDF'] = 'ddf'
    conf.env['STLIB_HID'] = 'hid'
    conf.env['STLIB_TEXC'] = ['texc', 'basis_encoder']
    conf.env['STLIB_INPUT'] = 'input'
    conf.env['STLIB_DMGLFW'] = glfw_library
    conf.env['STLIB_GRAPHICS'] = 'graphics'
    conf.env['STLIB_GRAPHICS_VULKAN'] = ['graphics_vulkan']
    conf.env['STLIB_GRAPHICS_PS4'] = ['graphics_ps4']
    conf.env['STLIB_PLATFORM_NULL'] = ['platform_null']
    if platform in ("x86_64-macos",):
        conf.env['STLIB_GRAPHICS_VULKAN'] += ['MoltenVK']

    conf.env.append_unique('DEFINES', 'DLIB_LOG_DOMAIN="TOOLS"')
    conf.env.append_unique('DEFINES', 'DEFOLD_SHA1="%s"' % build_util.git_sha1())

def build(bld):
    global test_context
    bld.recurse('scripts')
    bld.recurse('src')
    TestContext.initialize_test_context(test_context, bld)

def shutdown(self):
    waf_dynamo.run_tests(test_context, valgrind = True)
