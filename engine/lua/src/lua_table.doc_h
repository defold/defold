/*# Lua table standard library
 *
 * Documentation for the Lua table standard library.
 *
 * From [Lua 5.1 Reference Manual](https://www.lua.org/manual/5.1/)
 * by Roberto Ierusalimschy, Luiz Henrique de Figueiredo, Waldemar Celes.
 *
 * Copyright &copy; 2006-2012 Lua.org, PUC-Rio.
 *
 * Freely available under the terms of the [Lua license](https://www.lua.org/license.html).
 *
 * @document
 * @name Table
 * @namespace table
 * @language Lua
 */

/*# concatenates table items together into a string
 * Given an array where all elements are strings or numbers,
 * returns `table[i]..sep..table[i+1] ... sep..table[j]`.
 * The default value for sep is the empty string,
 * the default for i is 1,
 * and the default for j is the length of the table.
 * If i is greater than j, returns the empty string.
 * 
 * 
 * @name table.concat
 * @param table [type:table]
 * @param [sep] [type:string]
 * @param [i] [type:number]
 * @param [j] [type:number]
 */

/*# inserts a new item into a numerically-keyed table
 * 
 * Inserts element value at position pos in table,
 * shifting up other elements to open space, if necessary.
 * The default value for pos is `n+1`,
 * where n is the length of the table ,
 * so that a call `table.insert(t,x)` inserts x at the end
 * of table t.
 * 
 * 
 * @name table.insert
 * @param table [type:table]
 * @param [pos] [type:number]
 * @param value [type:any]
 */

/*# returns the highest numeric key in the table
 * 
 * Returns the largest positive numerical index of the given table,
 * or zero if the table has no positive numerical indices.
 * (To do its job this function does a linear traversal of
 * the whole table.) 
 * 
 * 
 * @name table.maxn
 * @param table [type:table]
 */

/*# removes an item from a numerically-keyed table
 * 
 * Removes from table the element at position pos,
 * shifting down other elements to close the space, if necessary.
 * Returns the value of the removed element.
 * The default value for pos is n,
 * where n is the length of the table,
 * so that a call `table.remove(t)` removes the last element
 * of table t.
 * 
 * 
 * @name table.remove
 * @param table [type:table]
 * @param [pos] [type:number]
 */

/*# Sorts a table
 * Sorts table elements in a given order, <em>in-place</em>,
 * from `table[1]` to `table[n]`,
 * where n is the length of the table.
 * If comp is given,
 * then it must be a function that receives two table elements,
 * and returns true
 * when the first is less than the second
 * (so that `not comp(a[i+1],a[i])` will be true after the sort).
 * If comp is not given,
 * then the standard Lua operator `<` is used instead.
 * 
 * The sort algorithm is not stable;
 * that is, elements considered equal by the given order
 * may have their relative positions changed by the sort.
 * 
 * 
 * @name table.sort
 * @param table [type:table]
 * @param [comp] [type:function]
 */

