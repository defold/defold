/*# Lua string standard library
 *
 * Documentation for the Lua string standard library.
 *
 * From [Lua 5.1 Reference Manual](https://www.lua.org/manual/5.1/)
 * by Roberto Ierusalimschy, Luiz Henrique de Figueiredo, Waldemar Celes.
 *
 * Copyright &copy; 2006-2012 Lua.org, PUC-Rio.
 *
 * Freely available under the terms of the [Lua license](https://www.lua.org/license.html).
 *
 *
 * ### Patterns
 * 
 * _Character Class:_
 *
 * A character class is used to represent a set of characters.
 * The following combinations are allowed in describing a character class:
 * 
 * x
 * : (where x is not one of the <em>magic characters</em> `^$()%.[]*+-?`)
 *   represents the character <em>x</em> itself.
 * 
 * `.`
 * : (a dot) represents all characters.
 * 
 * `%a`
 * : represents all letters.
 * 
 * `%c`
 * : represents all control characters.
 * 
 * `%d`
 * : represents all digits.
 * 
 * `%l`
 * : represents all lowercase letters.
 * 
 * `%p`
 * : represents all punctuation characters.
 * 
 * `%s`
 * : represents all space characters.
 * 
 * `%u`
 * : represents all uppercase letters.
 * 
 * `%w`
 * : represents all alphanumeric characters.
 * 
 * `%x`
 * : represents all hexadecimal digits.
 * 
 * `%z`
 * : represents the character with representation 0.
 * 
 * `%x`
 * : (where x is any non-alphanumeric character) represents the character x.
 *   This is the standard way to escape the magic characters.
 *   Any punctuation character (even the non magic) can be preceded by a '%'
 *   when used to represent itself in a pattern.
 * 
 * `[set]`
 * : represents the class which is the union of all characters in set.
 *   A range of characters can be specified by separating the end characters 
 *   of the range with a '-'.
 *   All classes `%`<em>x</em> described above can also be used as components in set.
 *   All other characters in set represent themselves.
 *   For example, `[%w_]` (or `[_%w]`) represents all alphanumeric characters 
 *   plus the underscore, `[0-7]` represents the octal digits,
 *   and `[0-7%l%-]` represents the octal digits plus the lowercase letters
 *   plus the '-' character.
 * 
 *   The interaction between ranges and classes is not defined.
 *   Therefore, patterns like `[%a-z]` or `[a-%%]` have no meaning.
 * 
 * `[^set]`
 * : represents the complement of set,
 *   where set is interpreted as above.
 * 
 * For all classes represented by single letters (`%a`, `%c`, etc.),
 * the corresponding uppercase letter represents the complement of the class.
 * For instance, `%S` represents all non-space characters.
 * 
 * The definitions of letter, space, and other character groups
 * depend on the current locale. In particular, the class `[a-z]` may not be 
 * equivalent to `%l`.
 * 
 * _Pattern Item:_
 *
 * A pattern item can be
 * 
 * - a single character class, which matches any single character in the class;
 *
 * - a single character class followed by '*',
 *   which matches 0 or more repetitions of characters in the class.
 *   These repetition items will always match the longest possible sequence;
 * 
 * - a single character class followed by '+',
 *   which matches 1 or more repetitions of characters in the class.
 *   These repetition items will always match the longest possible sequence;
 * 
 * - a single character class followed by '-',
 *   which also matches 0 or more repetitions of characters in the class.
 *   Unlike '*', these repetition items will always match the <em>shortest</em>
 *   possible sequence;
 * 
 * - a single character class followed by '?',
 *   which matches 0 or 1 occurrence of a character in the class;
 * 
 * - `%n`, for n between 1 and 9; such item matches a substring equal to the 
 *   n-th captured string (see below);
 * 
 * - `%bxy`, where x and y are two distinct characters;
 *   such item matches strings that start with x, end with y,
 *   and where the x and y are <em>balanced</em>.
 *   This means that, if one reads the string from left to right,
 *   counting +1 for an x and -1 for a y,
 *   the ending y is the first y where the count reaches 0.
 *   For instance, the item `%b()` matches expressions with balanced parentheses.
 * 
 * _Pattern:_
 *
 * A pattern is a sequence of pattern items.
 * A '^' at the beginning of a pattern anchors the match at the
 * beginning of the subject string.
 * A '$' at the end of a pattern anchors the match at the
 * end of the subject string.
 * At other positions, '^' and '$' have no special meaning and represent themselves.
 * 
 * _Captures:_
 *
 * A pattern can contain sub-patterns enclosed in parentheses;
 * they describe captures.
 * When a match succeeds, the substrings of the subject string
 * that match captures are stored (<em>captured</em>) for future use.
 * Captures are numbered according to their left parentheses.
 * For instance, in the pattern `"(a*(.)%w(%s*))"`,
 * the part of the string matching `"a*(.)%w(%s*)"` is
 * stored as the first capture (and therefore has number 1);
 * the character matching "." is captured with number 2,
 * and the part matching "%s*" has number 3.
 * 
 * As a special case, the empty capture `()` captures
 * the current string position (a number).
 * For instance, if we apply the pattern `"()aa()"` on the
 * string `"flaaap"`, there will be two captures: 3 and 5.
 * 
 * A pattern cannot contain embedded zeros.  Use `%z` instead.
 * 
 * 
 * @document
 * @name String
 * @namespace string
 * @language Lua
 */

/*# converts a character into its ASCII (decimal) equivalent
 * Returns the internal numerical codes of the characters `s[i]`,
 * `s[i+1]`, ..., `s[j]`.
 * The default value for i is 1;
 * the default value for j is i.
 * 
 * Note that numerical codes are not necessarily portable across platforms.
 * 
 * 
 * @name string.byte
 * @param s [type:string]
 * @param [i] [type:number]
 * @param [j] [type:number]
 */

/*# converts ASCII codes into their equivalent characters
 * Receives zero or more integers.
 * Returns a string with length equal to the number of arguments,
 * in which each character has the internal numerical code equal
 * to its corresponding argument.
 * 
 * Note that numerical codes are not necessarily portable across platforms.
 * 
 * 
 * @name string.char
 * @param ...
 */

/*# converts a function into binary
 * 
 * Returns a string containing a binary representation of the given function,
 * so that a later loadstring on this string returns
 * a copy of the function.
 * function must be a Lua function without upvalues.
 * 
 * 
 * @name string.dump
 * @param function [type:function]
 */

/*# searches a string for a pattern
 * Looks for the first match of
 * pattern in the string s.
 * If it finds a match, then find returns the indices of `s`
 * where this occurrence starts and ends;
 * otherwise, it returns [type: nil].
 * A third, optional numerical argument init specifies
 * where to start the search;
 * its default value is 1 and can be negative.
 * A value of [type: true] as a fourth, optional argument plain
 * turns off the pattern matching facilities,
 * so the function does a plain "find substring" operation,
 * with no characters in pattern being considered "magic".
 * Note that if plain is given, then init must be given as well.
 * 
 * If the pattern has captures,
 * then in a successful match
 * the captured values are also returned,
 * after the two indices.
 * 
 * 
 * @name string.find
 * @param s [type:string]
 * @param pattern [type:string]
 * @param [init] [type:number]
 * @param [plain] [type:boolean]
 */

/*# formats a string
 * Returns a formatted version of its variable number of arguments
 * following the description given in its first argument (which must be a string).
 * The format string follows the same rules as the printf family of
 * standard C functions.
 * The only differences are that the options/modifiers
 * `*`, l, L, n, p,
 * and h are not supported
 * and that there is an extra option, q.
 * The q option formats a string in a form suitable to be safely read
 * back by the Lua interpreter:
 * the string is written between double quotes,
 * and all double quotes, newlines, embedded zeros,
 * and backslashes in the string
 * are correctly escaped when written.
 * For instance, the call
 * 
 * 
 * ```lua
 * string.format('%q', 'a string with "quotes" and \n new line')
 * ```
 * 
 * will produce the string:
 * 
 * 
 * ```lua
 * "a string with \"quotes\" and \
 *  new line"
 * ```
 * 
 * 
 * The options c, d, E, e, f,
 * g, G, i, o, u, X, and x all
 * expect a number as argument,
 * whereas q and s expect a string.
 * 
 * This function does not accept string values
 * containing embedded zeros,
 * except as arguments to the q option.
 * 
 * 
 * @name string.format
 * @param formatstring [type:string]
 * @param ...
 */

/*# iterate over a string
 * Returns an iterator function that,
 * each time it is called,
 * returns the next captures from pattern over string s.
 * If pattern specifies no captures,
 * then the whole match is produced in each call.
 * 
 * As an example, the following loop
 * 
 * 
 * ```lua
 * s = "hello world from Lua"
 * for w in string.gmatch(s, "%a+") do
 *   print(w)
 * end
 * ```
 * 
 * will iterate over all the words from string s,
 * printing one per line.
 * The next example collects all pairs `key=value` from the
 * given string into a table:
 * 
 * 
 * ```lua
 * t = {}
 * s = "from=world, to=Lua"
 * for k, v in string.gmatch(s, "(%w+)=(%w+)") do
 *   t[k] = v
 * end
 * ```
 * 
 * 
 * For this function, a '^' at the start of a pattern does not
 * work as an anchor, as this would prevent the iteration.
 * 
 * 
 * @name string.gmatch
 * @param s [type:string]
 * @param pattern [type:string]
 */

/*# substitute strings inside another string
 * Returns a copy of s
 * in which all (or the first n, if given)
 * occurrences of the pattern have been
 * replaced by a replacement string specified by repl,
 * which can be a string, a table, or a function.
 * gsub also returns, as its second value,
 * the total number of matches that occurred.
 * 
 * If repl is a string, then its value is used for replacement.
 * The character `%` works as an escape character:
 * any sequence in repl of the form `%n`,
 * with n between 1 and 9,
 * stands for the value of the n-th captured substring (see below).
 * The sequence `%0` stands for the whole match.
 * The sequence `%%` stands for a single `%`.
 * 
 * If repl is a table, then the table is queried for every match,
 * using the first capture as the key;
 * if the pattern specifies no captures,
 * then the whole match is used as the key.
 * 
 * If repl is a function, then this function is called every time a
 * match occurs, with all captured substrings passed as arguments,
 * in order;
 * if the pattern specifies no captures,
 * then the whole match is passed as a sole argument.
 * 
 * If the value returned by the table query or by the function call
 * is a string or a number,
 * then it is used as the replacement string;
 * otherwise, if it is false or [type: nil],
 * then there is no replacement
 * (that is, the original match is kept in the string).
 * 
 * Here are some examples:
 * 
 * 
 * ```lua
 * x = string.gsub("hello world", "(%w+)", "%1 %1")
 * --> x="hello hello world world"
 * 
 * x = string.gsub("hello world", "%w+", "%0 %0", 1)
 * --> x="hello hello world"
 * 
 * x = string.gsub("hello world from Lua", "(%w+)%s*(%w+)", "%2 %1")
 * --> x="world hello Lua from"
 * 
 * x = string.gsub("home = $HOME, user = $USER", "%$(%w+)", os.getenv)
 * --> x="home = /home/roberto, user = roberto"
 * 
 * x = string.gsub("4+5 = $return 4+5$", "%$(.-)%$", function (s)
 *       return loadstring(s)()
 *     end)
 * --> x="4+5 = 9"
 * 
 * local t = {name="lua", version="5.1"}
 * x = string.gsub("$name-$version.tar.gz", "%$(%w+)", t)
 * --> x="lua-5.1.tar.gz"
 * ```
 * 
 * 
 * 
 * @name string.gsub
 * @param s [type:string]
 * @param pattern [type:string]
 * @param repl [type:string]
 * @param [n] [type:number]
 */

/*# return the length of a string
 * Receives a string and returns its length.
 * The empty string `""` has length 0.
 * Embedded zeros are counted,
 * so `"a\000bc\000"` has length 5.
 * 
 * 
 * @name string.len
 * @param s [type:string]
 */

/*# converts a string to lower-case
 * Receives a string and returns a copy of this string with all
 * uppercase letters changed to lowercase.
 * All other characters are left unchanged.
 * The definition of what an uppercase letter is depends on the current locale.
 * 
 * 
 * @name string.lower
 * @param s [type:string]
 */

/*# searches a string for a pattern
 * Looks for the first <em>match</em> of
 * pattern in the string s.
 * If it finds one, then match returns
 * the captures from the pattern;
 * otherwise it returns [type: nil].
 * If pattern specifies no captures,
 * then the whole match is returned.
 * A third, optional numerical argument init specifies
 * where to start the search;
 * its default value is 1 and can be negative.
 * 
 * 
 * @name string.match
 * @param s [type:string]
 * @param pattern [type:string]
 * @param [init] [type:number]
 */

/*# returns repeated copies of a string
 * Returns a string that is the concatenation of n copies of
 * the string s.
 * 
 * 
 * @name string.rep
 * @param s [type:string]
 * @param n [type:number]
 */

/*# reverses the order of characters in a string
 * Returns a string that is the string s reversed.
 * 
 * 
 * @name string.reverse
 * @param s [type:string]
 */

/*# returns a substring of a string
 * Returns the substring of s that
 * starts at i  and continues until j;
 * i and j can be negative.
 * If j is absent, then it is assumed to be equal to -1
 * (which is the same as the string length).
 * In particular,
 * the call `string.sub(s,1,j)` returns a prefix of s
 * with length j,
 * and `string.sub(s, -i)` returns a suffix of s
 * with length i.
 * 
 * 
 * @name string.sub
 * @param s [type:string]
 * @param i [type:number]
 * @param [j] [type:number]
 */

/*# converts a string to upper-case
 * Receives a string and returns a copy of this string with all
 * lowercase letters changed to uppercase.
 * All other characters are left unchanged.
 * The definition of what a lowercase letter is depends on the current locale.
 * 
 * @name string.upper
 * @param s [type:string]
 */

