/*# Lua coroutine standard library
 *
 * Documentation for the Lua coroutine standard library.
 *
 * From [Lua 5.1 Reference Manual](https://www.lua.org/manual/5.1/)
 * by Roberto Ierusalimschy, Luiz Henrique de Figueiredo, Waldemar Celes.
 *
 * Copyright &copy; 2006-2012 Lua.org, PUC-Rio.
 *
 * Freely available under the terms of the [Lua license](https://www.lua.org/license.html).
 *
 * @document
 * @name Coroutine
 * @namespace coroutine
 * @language Lua
 */

/*# creates a new coroutine thread
 * 
 * Creates a new coroutine, with body f.
 * f must be a Lua function.
 * Returns this new coroutine,
 * an object with type `"thread"`.
 * 
 * 
 * @name coroutine.create
 * @param f [type:function]
 */

/*# start or resume a thread
 * 
 * Starts or continues the execution of coroutine co.
 * The first time you resume a coroutine,
 * it starts running its body.
 * The values val1, ... are passed
 * as the arguments to the body function.
 * If the coroutine has yielded,
 * resume restarts it;
 * the values val1, ... are passed
 * as the results from the yield.
 * 
 * If the coroutine runs without any errors,
 * resume returns [type: true] plus any values passed to yield
 * (if the coroutine yields) or any values returned by the body function
 * (if the coroutine terminates).
 * If there is any error,
 * resume returns [type: false] plus the error message.
 * 
 * 
 * @name coroutine.resume
 * @param co [type:thread]
 * @param [val1] [type:any]
 * @param [...]
 */

/*# returns the running coroutine
 * 
 * Returns the running coroutine,
 * or [type: nil] when called by the main thread.
 * 
 * 
 * @name coroutine.running
 */

/*# returns the status of a thread
 * 
 * Returns the status of coroutine co, as a string:
 * `"running"`,
 * if the coroutine is running (that is, it called status);
 * `"suspended"`, if the coroutine is suspended in a call to yield,
 * or if it has not started running yet;
 * `"normal"` if the coroutine is active but not running
 * (that is, it has resumed another coroutine);
 * and `"dead"` if the coroutine has finished its body function,
 * or if it has stopped with an error.
 * 
 * 
 * @name coroutine.status
 * @param co [type:thread]
 */

/*# creates a thread and returns a function to resume it
 * 
 * Creates a new coroutine, with body f.
 * f must be a Lua function.
 * Returns a function that resumes the coroutine each time it is called.
 * Any arguments passed to the function behave as the
 * extra arguments to resume.
 * Returns the same values returned by resume,
 * except the first boolean.
 * In case of error, propagates the error.
 * 
 * 
 * @name coroutine.wrap
 * @param f [type:function]
 */

/*# yields execution of thread back to the caller
 * 
 * Suspends the execution of the calling coroutine.
 * The coroutine cannot be running a C function,
 * a metamethod, or an iterator.
 * Any arguments to yield are passed as extra results to resume.
 * 
 * 
 * @name coroutine.yield
 * @param ...
 */

