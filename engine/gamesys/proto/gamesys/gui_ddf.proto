syntax = "proto2";
package dmGuiDDF;

import "ddf/ddf_extensions.proto";
import "ddf/ddf_math.proto";

option java_package = "com.dynamo.gamesys.proto";
option java_outer_classname = "Gui";

/*# GUI API documentation
 *
 * @document
 * @name GUI
 * @namespace gui
 */

message NodeDesc
{
    // NOTE: Enum values must correspond to the enum values in dmGui
    enum Type
    {
        TYPE_BOX        = 0 [(displayName) = "Box"];
        TYPE_TEXT       = 1 [(displayName) = "Text"];
        TYPE_PIE        = 2 [(displayName) = "Pie"];
        TYPE_TEMPLATE   = 3 [(displayName) = "Template"];
        TYPE_SPINE      = 4 [(displayName) = "Spine"]; // Deprecated
        TYPE_PARTICLEFX = 5 [(displayName) = "ParticleFX"];
        TYPE_CUSTOM     = 6 [(displayName) = "Custom"];
    }

    // NOTE: Enum values must correspond to the enum values in dmGui
    enum BlendMode
    {
        BLEND_MODE_ALPHA     = 0 [(displayName) = "Alpha"];
        BLEND_MODE_ADD       = 1 [(displayName) = "Add"];
        BLEND_MODE_ADD_ALPHA = 2 [(displayName) = "Add Alpha (Deprecated)"];
        BLEND_MODE_MULT      = 3 [(displayName) = "Multiply"];
        BLEND_MODE_SCREEN    = 4 [(displayName) = "Screen"];
    }

    // NOTE: Enum values must correspond to the enum values in dmGui
    enum ClippingMode
    {
        CLIPPING_MODE_NONE    = 0 [(displayName) = "None"];
        CLIPPING_MODE_STENCIL = 2 [(displayName) = "Stencil"];
    }

    // NOTE: Enum values must correspond to the enum values in dmGui
    enum XAnchor
    {
        XANCHOR_NONE  = 0 [(displayName) = "None"];
        XANCHOR_LEFT  = 1 [(displayName) = "Left"];
        XANCHOR_RIGHT = 2 [(displayName) = "Right"];
    };

    // NOTE: Enum values must correspond to the enum values in dmGui
    enum YAnchor
    {
        YANCHOR_NONE   = 0 [(displayName) = "None"];
        YANCHOR_TOP    = 1 [(displayName) = "Top"];
        YANCHOR_BOTTOM = 2 [(displayName) = "Bottom"];
    };

    enum Pivot
    {
        PIVOT_CENTER = 0 [(displayName) = "Center"];
        PIVOT_N      = 1 [(displayName) = "North"];
        PIVOT_NE     = 2 [(displayName) = "North East"];
        PIVOT_E      = 3 [(displayName) = "East"];
        PIVOT_SE     = 4 [(displayName) = "South East"];
        PIVOT_S      = 5 [(displayName) = "South"];
        PIVOT_SW     = 6 [(displayName) = "South West"];
        PIVOT_W      = 7 [(displayName) = "West"];
        PIVOT_NW     = 8 [(displayName) = "North West"];
    };

    enum AdjustMode
    {
        ADJUST_MODE_FIT     = 0 [(displayName) = "Fit"];
        ADJUST_MODE_ZOOM    = 1 [(displayName) = "Zoom"];
        ADJUST_MODE_STRETCH = 2 [(displayName) = "Stretch"];
    };

    // NOTE: Enum values must correspond to the enum values in dmGui
    enum SizeMode
    {
        SIZE_MODE_MANUAL    = 0 [(displayName) = "Manual"];
        SIZE_MODE_AUTO      = 1 [(displayName) = "Auto"];
    }

    enum PieBounds
    {
        PIEBOUNDS_RECTANGLE = 0 [(displayName) = "Rectangle"];
        PIEBOUNDS_ELLIPSE   = 1 [(displayName) = "Ellipse"];
    };

    optional dmMath.Vector4 position = 1;
    optional dmMath.Vector4 rotation = 2;
    optional dmMath.Vector4One scale = 3;
    optional dmMath.Vector4 size     = 4;
    optional dmMath.Vector4One color = 5;
    optional Type       type         = 6;
    optional BlendMode  blend_mode   = 7 [default = BLEND_MODE_ALPHA];
    optional string     text         = 8;
    optional string     texture      = 9;
    optional string     font         = 10;
    optional string     id           = 11;
    optional XAnchor    xanchor      = 12 [default = XANCHOR_NONE];
    optional YAnchor    yanchor      = 13 [default = YANCHOR_NONE];
    optional Pivot      pivot        = 14 [default = PIVOT_CENTER];
    optional dmMath.Vector4WOne outline = 15;
    optional dmMath.Vector4WOne shadow = 16;
    optional AdjustMode adjust_mode  = 17 [default = ADJUST_MODE_FIT];
    optional bool       line_break   = 18 [default = false];
    optional string     parent       = 19;
    optional string     layer        = 20;
    optional bool       inherit_alpha = 21 [default = false];
    optional dmMath.Vector4 slice9   = 22;

    // These are pie specific options
    optional PieBounds outerBounds   = 23 [default = PIEBOUNDS_ELLIPSE];
    optional float     innerRadius   = 24 [default = 0];
    optional int32     perimeterVertices = 25 [default = 32];
    optional float     pieFillAngle  = 26 [default = 360];

    optional ClippingMode clipping_mode  = 27 [default = CLIPPING_MODE_NONE];
    optional bool       clipping_visible = 28 [default = true];
    optional bool       clipping_inverted = 29 [default = false];

    optional float alpha              = 30 [default = 1.0];
    optional float outline_alpha      = 31 [default = 1.0];
    optional float shadow_alpha       = 32 [default = 1.0];

    repeated uint32 overridden_fields = 33;

    optional string     template              = 34 [(resource)=true];
    optional bool       template_node_child   = 35;

    optional float      text_leading   = 36 [default = 1.0];
    optional float      text_tracking  = 37 [default = 0.0];

    optional SizeMode size_mode  = 38 [default = SIZE_MODE_MANUAL];

    // Spine specific options (deprecated)
    optional string spine_scene             = 39;
    optional string spine_default_animation = 40;
    optional string spine_skin              = 41;
    optional bool   spine_node_child        = 42 [default = false];

    // ParticleFX specific options
    optional string particlefx              = 43;

    optional uint32 custom_type             = 44 [default = 0]; // for custom types

    optional bool enabled                   = 45 [default = true];
    optional bool visible                   = 46 [default = true];

    optional string material                = 47;

}

message SceneDesc
{
    enum AdjustReference
    {
        ADJUST_REFERENCE_LEGACY   = 0 [(displayName) = "Root (Deprecated)"];
        ADJUST_REFERENCE_PARENT   = 1 [(displayName) = "Per Node"];
        ADJUST_REFERENCE_DISABLED = 2 [(displayName) = "Disabled"];
    };

    message FontDesc
    {
        required string name    = 1;
        required string font    = 2 [(resource)=true];
    }

    message TextureDesc
    {
        required string name    = 1;
        required string texture = 2 [(resource)=true];
    }

    message LayerDesc
    {
        required string name    = 1;
    }

    message LayoutDesc
    {
        required string   name  = 1;
        repeated NodeDesc nodes = 2;
    }

    message MaterialDesc
    {
        required string name     = 1;
        required string material = 2 [(resource)=true];
    }

    message SpineSceneDesc
    {
        required string name         = 1;
        required string spine_scene  = 2 [(resource)=true];
    }

    message ResourceDesc
    {
        required string name    = 1;
        required string path    = 2 [(resource)=true];
    }

    message ParticleFXDesc
    {
        required string name        = 1;
        required string particlefx  = 2 [(resource)=true];
    }

    required string          script               = 1 [(resource)=true];
    repeated FontDesc        fonts                = 2;
    repeated TextureDesc     textures             = 3;
    optional dmMath.Vector4  background_color     = 4; // Deprecated
    repeated NodeDesc        nodes                = 6;
    repeated LayerDesc       layers               = 7;
    optional string          material             = 8 [(resource)=true, default="/builtins/materials/gui.material"];
    repeated LayoutDesc      layouts              = 9;
    optional AdjustReference adjust_reference     = 10 [default = ADJUST_REFERENCE_LEGACY];
    optional uint32          max_nodes            = 11 [default = 512];
    repeated SpineSceneDesc  spine_scenes         = 12;
    repeated ParticleFXDesc  particlefxs          = 13;
    repeated ResourceDesc    resources            = 14;
    repeated MaterialDesc    materials            = 15;
    optional uint32          max_dynamic_textures = 16 [default = 128];
}

/*# reports a layout change
 *
 * This message is broadcast to every GUI component when a layout change has been initiated
 * on device.
 *
 * @message
 * @name layout_changed
 * @param id [type:hash] the id of the layout the engine is changing to
 * @param previous_id [type:hash] the id of the layout the engine is changing from
 * @examples
 *
 * ```lua
 * function on_message(self, message_id, message, sender)
 *    if message_id == hash("layout_changed") and message.id == hash("Landscape") then
 *        -- switching layout to "Landscape"...
 *        ...
 *    end
 * end
 * ```
 */
message LayoutChanged
{
    required uint64 id = 1;
    required uint64 previous_id = 2;
}
