syntax = "proto2";
package dmGameSystemDDF;

import "ddf/ddf_extensions.proto";
import "ddf/ddf_math.proto";

option java_package = "com.dynamo.gamesys.proto";
option java_outer_classname = "GameSystem";

message FactoryDesc
{
    required string prototype = 1 [(resource)=true];
    optional bool load_dynamically = 2 [default=false];
    optional bool dynamic_prototype = 3 [default=false];
}

message CollectionFactoryDesc
{
    required string prototype = 1 [(resource)=true];
    optional bool load_dynamically = 2 [default=false];
    optional bool dynamic_prototype = 3 [default=false];
}

message Create
{
    required dmMath.Point3  position = 1 [(field_align)=true];
    required dmMath.Quat    rotation = 2 [(field_align)=true];
    optional uint64         id       = 3 [default=0];
    optional float          scale    = 4 [default=1];
    optional dmMath.Vector3 scale3   = 5 [(field_align)=true]; // if zero, 'scale' is used instead
    optional uint32         index    = 6 [default=0xffffffff]; // Must be same as dmGameObject::INVALID_INSTANCE_POOL_INDEX.
}

message CollectionProxyDesc
{
    required string collection = 1 [(resource)=true];
    optional bool exclude = 2 [default=false];
}

enum TimeStepMode
{
    TIME_STEP_MODE_CONTINUOUS   = 0;
    TIME_STEP_MODE_DISCRETE     = 1;
}

/* Documented in comp_collecion_proxy.cpp */
message SetTimeStep
{
    required float          factor  = 1;
    required TimeStepMode   mode    = 2;
}

enum LightType
{
    POINT   = 0;
    SPOT    = 1;
}

message LightDesc
{
    required string         id              = 1;
    required LightType      type            = 2;
    required float          intensity       = 3;
    required dmMath.Vector3 color           = 4;
    required float          range           = 5;
    required float          decay           = 6;
    // Only applicable for spot-lights
    optional float          cone_angle      = 7;
    optional float          penumbra_angle  = 8;
    optional float          drop_off        = 9;
}

message SetLight
{
    required dmMath.Point3  position    = 1;
    required dmMath.Quat    rotation    = 2;
    required LightDesc      light       = 3;
}

message SetViewProjection
{
    required uint64         id          = 1;
    required dmMath.Matrix4 view        = 2;
    required dmMath.Matrix4 projection  = 3;
}

/* Documented in comp_sound.cpp */
message PlaySound
{
    optional float delay    = 1 [default=0.0];
    optional float gain     = 2 [default=1.0];
    optional float pan      = 3 [default=0.0];
    optional float speed    = 4 [default=1.0];
    optional uint32 play_id = 5 [default=0xffffffff]; // Must be same as dmSound::INVALID_PLAY_ID
}

message StopSound
{
    optional uint32 play_id = 1 [default=0xffffffff]; // Must be same as dmSound::INVALID_PLAY_ID
}

message PauseSound
{
    optional bool pause     = 1 [default=true];
}

message SoundEvent
{
    optional int32 play_id = 1 [default = 0];
}

message SetGain
{
    optional float gain = 1 [default=1.0];
}

message SetPan
{
    optional float pan = 1 [default=0.0];
}

message SetSpeed
{
    optional float speed = 1 [default=1.0];
}

/* Documented in scripts/script_particlefx.cpp */
message PlayParticleFX {}
message StopParticleFX {
    optional bool clear_particles     = 1 [default=false];
}
message SetConstantParticleFX
{
    required uint64         emitter_id  = 1;
    required uint64         name_hash   = 2;
    required dmMath.Matrix4 value       = 3 [(field_align)=true];
    optional bool           is_matrix4  = 4;
}
message ResetConstantParticleFX
{
    required uint64         emitter_id  = 1;
    required uint64         name_hash   = 2;
}

/* Function wrapper documented in gamesys_script.cpp */
message SetConstant
{
    required uint64         name_hash   = 1;
    required dmMath.Vector4 value       = 2 [(field_align)=true];
    optional int32          index       = 3 [default=0];
}

/* Function wrapper documented in gamesys_script.cpp */
message ResetConstant
{
    required uint64         name_hash   = 1;
}

/* Function wrapper documented in gamesys_script.cpp */
message SetScale
{
    required dmMath.Vector3 scale  = 1 [(field_align)=true];
}
