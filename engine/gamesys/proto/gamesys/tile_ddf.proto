syntax = "proto2";
package dmGameSystemDDF;

import "ddf/ddf_extensions.proto";
import "ddf/ddf_math.proto";

option java_package = "com.dynamo.gamesys.proto";
option java_outer_classname = "Tile";

message ConvexHull
{
    // index into an array of points (x0, y0, x1, y1, ...)
    // in “points” unit, ie effectively divided by 2
    required uint32 index           = 1 [default = 0];
    required uint32 count           = 2 [default = 0];
    required string collision_group = 3 [default = "tile"];
}

message Cue
{
    required string id = 1;
    required uint32 frame = 2;
    optional float value = 3 [default = 0.0];
}

enum Playback
{
    PLAYBACK_NONE = 0 [(displayName) = "None"];
    PLAYBACK_ONCE_FORWARD = 1 [(displayName) = "Once Forward"];
    PLAYBACK_ONCE_BACKWARD = 2 [(displayName) = "Once Backward"];
    PLAYBACK_ONCE_PINGPONG = 6 [(displayName) = "Once Ping Pong"];
    PLAYBACK_LOOP_FORWARD = 3 [(displayName) = "Loop Forward"];
    PLAYBACK_LOOP_BACKWARD = 4 [(displayName) = "Loop Backward"];
    PLAYBACK_LOOP_PINGPONG = 5 [(displayName) = "Loop Ping Pong"];
}

enum SpriteTrimmingMode
{
    SPRITE_TRIM_MODE_OFF    = 0 [(displayName) = "Off"];
    SPRITE_TRIM_MODE_4      = 4 [(displayName) = "4 Vertices"];
    SPRITE_TRIM_MODE_5      = 5 [(displayName) = "5 Vertices"];
    SPRITE_TRIM_MODE_6      = 6 [(displayName) = "6 Vertices"];
    SPRITE_TRIM_MODE_7      = 7 [(displayName) = "7 Vertices"];
    SPRITE_TRIM_MODE_8      = 8 [(displayName) = "8 Vertices"];
    SPRITE_TRIM_POLYGONS    = 9 [(displayName) = "Polygons"];
}

message Animation
{
    required string id              = 1;
    required uint32 start_tile      = 2;
    required uint32 end_tile        = 3;
    optional Playback playback      = 4 [default = PLAYBACK_ONCE_FORWARD];
    optional uint32 fps             = 5 [default = 30];
    optional uint32 flip_horizontal = 6 [default = 0];
    optional uint32 flip_vertical   = 7 [default = 0];
    repeated Cue cues               = 8;
}

message TileSet
{
    required string image                           = 1 [(resource)=true];
    required uint32 tile_width                      = 2 [default = 0];
    required uint32 tile_height                     = 3 [default = 0];
    optional uint32 tile_margin                     = 4 [default = 0];
    optional uint32 tile_spacing                    = 5 [default = 0];
    optional string collision                       = 6 [(resource)=true];
    optional string material_tag                    = 7 [default = "tile"];
    repeated ConvexHull convex_hulls                = 8;
    repeated float convex_hull_points               = 9 [(runtime_only)=true];
    repeated string collision_groups                = 10;
    repeated Animation animations                   = 11;
    optional uint32 extrude_borders                 = 12 [default = 0];
    optional uint32 inner_padding                   = 13 [default = 0];
    optional SpriteTrimmingMode sprite_trim_mode    = 14 [default = SPRITE_TRIM_MODE_OFF];
}

message TileCell
{
    required int32 x            = 1 [default = 0];
    required int32 y            = 2 [default = 0];
    required uint32 tile        = 3 [default = 0];
    optional uint32 h_flip      = 4 [default = 0];
    optional uint32 v_flip      = 5 [default = 0];
    optional uint32 rotate90    = 6 [default = 0];
}

message TileLayer
{
    required string id          = 1 [default = "layer1"];
    required float z            = 2 [default = 0.0];
    optional uint32 is_visible  = 3 [default = 1];
    optional uint64 id_hash     = 4 [default = 0, (runtime_only)=true];
    repeated TileCell cell      = 6;
}

message TileGrid
{
    enum BlendMode
    {
        BLEND_MODE_ALPHA     = 0 [(displayName) = "Alpha"];
        BLEND_MODE_ADD       = 1 [(displayName) = "Add"];
        BLEND_MODE_ADD_ALPHA = 2 [(displayName) = "Add Alpha (Deprecated)"];
        BLEND_MODE_MULT      = 3 [(displayName) = "Multiply"];
        BLEND_MODE_SCREEN    = 4 [(displayName) = "Screen"];
    }

    required string tile_set        = 1 [(resource)=true];
    repeated TileLayer layers       = 2;
    optional string material        = 3 [(resource)=true, default="/builtins/materials/tile_map.material"];
    optional BlendMode blend_mode   = 4 [default = BLEND_MODE_ALPHA];
}

/* Function wrapper documented in script_tilemap.cpp */
message SetConstantTileMap
{
    required uint64         name_hash   = 1;
    required dmMath.Vector4 value       = 2 [(field_align)=true];
}

/* Function wrapper documented in script_tilemap.cpp */
message ResetConstantTileMap
{
    required uint64         name_hash   = 1;
}
