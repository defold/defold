syntax = "proto2";
package dmPhysicsDDF;

import "ddf/ddf_extensions.proto";
import "ddf/ddf_math.proto";

option java_package = "com.dynamo.gamesys.proto";
option java_outer_classname = "Physics";

message ConvexShape
{
    /* NOTE: These values must match CollisionShape.Type below */
    enum Type
    {
        TYPE_SPHERE = 0 [(displayName) = "Sphere"];
        TYPE_BOX = 1 [(displayName) = "Box"];
        TYPE_CAPSULE = 2 [(displayName) = "Capsule"];
        TYPE_HULL = 3 [(displayName) = "Hull"];
    }

    required Type shape_type = 1;

    /*
     ShapeType == SPHERE
     Data = [radius]

     ShapeType == BOX
     Data = [ext_x, ext_y, ext_z]

     ShapeType == CAPSULE
     Data = [radius, height]

     ShapeType == HULL
     Data = [x0, y0, z0, x1, ...]
    */
    repeated float data = 2;
}

message CollisionShape
{
    /* NOTE: These values must match ConvexShape.Type above */
    enum Type
    {
        TYPE_SPHERE = 0;
        TYPE_BOX = 1;
        TYPE_CAPSULE = 2;
        TYPE_HULL = 3;
    }

    /*
        ShapeType == SPHERE
        Data = [radius]

        ShapeType == BOX
        Data = [ext_x, ext_y, ext_z]

        ShapeType == CAPSULE
        Data = [radius, height]

        ShapeType == HULL
        Data = [x0, y0, z0, x1, ...]
    */

    message Shape
    {
        required Type shape_type        = 1;
        required dmMath.Point3 position = 2;
        required dmMath.Quat rotation   = 3;
        required uint32 index           = 4;
        required uint32 count           = 5;
        optional string id              = 6;
        optional uint64 id_hash         = 7 [(runtime_only) = true];
    }

    repeated Shape shapes = 1;
    repeated float data   = 2;
}

/* This should coincide with CollisionObjectType in physics-lib */
enum CollisionObjectType
{
    COLLISION_OBJECT_TYPE_DYNAMIC = 0 [(displayName) = "Dynamic"];
    COLLISION_OBJECT_TYPE_KINEMATIC = 1 [(displayName) = "Kinematic"];
    COLLISION_OBJECT_TYPE_STATIC = 2 [(displayName) = "Static"];
    COLLISION_OBJECT_TYPE_TRIGGER = 3 [(displayName) = "Trigger"];
}

message CollisionObjectDesc
{
    optional string                 collision_shape = 1 [(resource)=true];
    required CollisionObjectType    type            = 2;
    required float                  mass            = 3;
    required float                  friction        = 4;
    required float                  restitution     = 5;
    required string                 group           = 6;
    repeated string                 mask            = 7;
    optional CollisionShape         embedded_collision_shape = 8;
    optional float                  linear_damping  = 9 [default=0];
    optional float                  angular_damping = 10 [default=0];
    optional bool                   locked_rotation = 11 [default=false];
    optional bool                   bullet          = 12 [default=false];
}

/*# Collision object physics API documentation
 *
 * @document
 * @name Collision object
 * @namespace physics
 */

/*# applies a force on a collision object
 * Post this message to a collision-object-component to apply the specified force on the collision object.
 * The collision object must be dynamic.
 *
 * @message
 * @name apply_force
 * @param force [type:vector3] the force to be applied on the collision object, measured in Newton
 * @param position [type:vector3] the position where the force should be applied
 * @examples
 *
 * Assuming the instance of the script has a collision-object-component with id "co":
 *
 * ```lua
 * -- apply a force of 1 Newton towards world-x at the center of the game object instance
 * msg.post("#co", "apply_force", {force = vmath.vector3(1, 0, 0), position = go.get_world_position()})
 * ```
 */
message ApplyForce
{
    required dmMath.Vector3 force       = 1;
    required dmMath.Point3  position    = 2;
}

/*# reports a collision between two collision objects
 *
 * This message is broadcasted to every component of an instance that has a collision object,
 * when the collision object collides with another collision object. For a script to take action
 * when such a collision happens, it should check for this message in its `on_message` callback
 * function.
 *
 * This message only reports that a collision actually happened and will only be sent once per
 * colliding pair and frame.
 * To retrieve more detailed information, check for the `contact_point_response` instead.
 *
 * @message
 * @name collision_response
 * @param other_id [type:hash] the id of the instance the collision object collided with
 * @param other_position [type:vector3] the world position of the instance the collision object collided with
 * @param other_group [type:hash] the collision group of the other collision object
 * @param own_group [type:hash] the collision group of the own collision object
 * @examples
 *
 * How to take action when a collision occurs:
 *
 * ```lua
 * function on_message(self, message_id, message, sender)
 *     -- check for the message
 *     if message_id == hash("collision_response") then
 *         -- take action
 *     end
 * end
 * ```
 */
message CollisionResponse
{
    required uint64 other_id                = 1;
    required uint64 group                   = 2;
    required dmMath.Point3 other_position   = 3;
    required uint64 other_group             = 4;
    required uint64 own_group               = 5;
}

/*# reports a contact point between two collision objects
 *
 * This message is broadcasted to every component of an instance that has a collision object,
 * when the collision object has contact points with respect to another collision object.
 * For a script to take action when such contact points occur, it should check for this message
 * in its `on_message` callback function.
 *
 * Since multiple contact points can occur for two colliding objects, this message can be sent
 * multiple times in the same frame for the same two colliding objects. To only be notified once
 * when the collision occurs, check for the `collision_response` message instead.
 *
 * @message
 * @name contact_point_response
 * @param position [type:vector3] world position of the contact point
 * @param normal [type:vector3] normal in world space of the contact point, which points from the other object towards the current object
 * @param relative_velocity [type:vector3] the relative velocity of the collision object as observed from the other object
 * @param distance [type:number] the penetration distance between the objects, which is always positive
 * @param applied_impulse [type:number] the impulse the contact resulted in
 * @param life_time [type:number] life time of the contact, **not currently used**
 * @param mass [type:number] the mass of the current collision object in kg
 * @param other_mass [type:number] the mass of the other collision object in kg
 * @param other_id [type:hash] the id of the instance the collision object is in contact with
 * @param other_position [type:vector3] the world position of the other collision object
 * @param other_group [type:hash] the collision group of the other collision object
 * @param own_group [type:hash] the collision group of the own collision object
 * @examples
 *
 * How to take action when a contact point occurs:
 *
 * ```lua
 * function on_message(self, message_id, message, sender)
 *     -- check for the message
 *     if message_id == hash("contact_point_response") then
 *         -- take action
 *     end
 * end
 * ```
 */
message ContactPointResponse
{
    required dmMath.Point3  position                = 1;
    required dmMath.Vector3 normal                  = 2;
    required dmMath.Vector3 relative_velocity       = 3;
    required float          distance                = 4;
    required float          applied_impulse         = 5;
    required float          life_time               = 6;
    required float          mass                    = 7;
    required float          other_mass              = 8;
    required uint64         other_id                = 9;
    required dmMath.Point3  other_position          = 10;
    required uint64         group                   = 11;
    required uint64         other_group             = 12;
    required uint64         own_group               = 13;
}

/*# reports interaction (enter/exit) between a trigger collision object and another collision object
 *
 * This message is broadcasted to every component of an instance that has a collision object,
 * when the collision object interacts with another collision object and one of them is a trigger.
 * For a script to take action when such an interaction happens, it should check for this message
 * in its `on_message` callback function.
 *
 * This message only reports that an interaction actually happened and will only be sent once per
 * colliding pair and frame. To retrieve more detailed information, check for the
 * `contact_point_response` instead.
 *
 * @message
 * @name trigger_response
 * @param other_id [type:hash] the id of the instance the collision object collided with
 * @param enter [type:boolean] if the interaction was an entry or not
 * @param other_group [type:hash] the collision group of the triggering collision object
 * @param own_group [type:hash] the collision group of the own collision object
 * @examples
 *
 * How to take action when a trigger interaction occurs:
 *
 * ```lua
 * function on_message(self, message_id, message, sender)
 *     -- check for the message
 *     if message_id == hash("trigger_response") then
 *         if message.enter then
 *             -- take action for entry
 *         else
 *             -- take action for exit
 *         end
 *     end
 * end
 * ```
 */
message TriggerResponse
{
    required uint64 other_id                = 1;
    required bool enter                     = 2;
    required uint64 group                   = 3;
    required uint64 other_group             = 4;
    required uint64 own_group               = 5;
}

// Runtime only (not public)
message RequestRayCast
{
    required dmMath.Point3  from            = 1;
    required dmMath.Point3  to              = 2;
    required uint32         mask            = 3;
    required uint32         request_id      = 4;
}

/*# reports a ray cast hit
 *
 * This message is sent back to the sender of a [ref:ray_cast_request], or to the physics world listener
 * if it is set (see [ref:physics.set_listener]), if the ray hits a collision object.
 * See [ref:physics.raycast_async] for examples of how to use it.
 *
 * @message
 * @name ray_cast_response
 * @param fraction [type:number] the fraction of the hit measured along the ray, where 0 is the start of the ray and 1 is the end
 * @param position [type:vector3] the world position of the hit
 * @param normal [type:vector3] the normal of the surface of the collision object where it was hit
 * @param id [type:hash] the instance id of the hit collision object
 * @param group [type:hash] the collision group of the hit collision object as a hashed name
 * @param request_id [type:number] id supplied when the ray cast was requested
 */
message RayCastResponse
{
    required float          fraction        = 1;
    required dmMath.Point3  position        = 2;
    required dmMath.Vector3 normal          = 3;
    required uint64         id              = 4;
    required uint64         group           = 5;
    required uint32         request_id      = 6;
}

/*# reports a ray cast miss
 *
 * This message is sent back to the sender of a [ref:ray_cast_request], or to the physics world listener
 * if it is set (see [ref:physics.set_listener]), if the ray didn't hit any collision object.
 * See [ref:physics.raycast_async] for examples of how to use it.
 *
 * @message
 * @name ray_cast_missed
 * @param request_id [type:number] id supplied when the ray cast was requested
 */
message RayCastMissed
{
    required uint32         request_id      = 1;
}

message RequestVelocity {}

message VelocityResponse
{
    required dmMath.Vector3 linear_velocity     = 1;
    required dmMath.Vector3 angular_velocity    = 2;
}

// System message (TileGrid=>CollisionObject)
message SetGridShapeHull
{
    required uint32 shape = 1;
    required uint32 row = 2;
    required uint32 column = 3;
    required uint32 hull = 4;
    required uint32 flip_horizontal = 5;
    required uint32 flip_vertical = 6;
    required uint32 rotate90 = 7;
}

// System message (TileGrid=>CollisionObject)
message EnableGridShapeLayer
{
    required uint32 shape = 1;
    required uint32 enable = 2;
}

message ContactPoint
{
    required dmMath.Point3  position                 = 1;
    required dmMath.Vector3 normal                   = 2;
    required dmMath.Vector3 relative_velocity        = 3;
    required float          mass                     = 4;
    required uint64         id                       = 5;
    required uint64         group                    = 6;
}

/*# reports a contact point between two collision objects in cases where a listener is specified.
 * See [ref:physics.set_listener].
 *
 * This message is sent to a function specified in [ref:physics.set_listener] when
 * a collision object has contact points with another collision object.
 *
 * Since multiple contact points can occur for two colliding objects, this event can be sent
 * multiple times in the same frame for the same two colliding objects. To only be notified once
 * when the collision occurs, check for the [ref:collision_event] event instead.
 *
 * @message
 * @name contact_point_event
 * @param applied_impulse [type:number] the impulse the contact resulted in
 * @param distance [type:number] the penetration distance between the objects, which is always positive
 * @param a [type:table] contact point information for object A
 *
 * `position`
 * : [type:vector3] The world position of object A
 *
 * `id`
 * : [type:hash] The ID of object A
 *
 * `group`
 * : [type:hash] The collision group of object A
 *
 * `relative_velocity`
 * : [type:vector3] The relative velocity of the collision object A as observed from B object
 *
 * `mass`
 * : [type:number] The mass of the collision object A in kg
 *
 * `normal`
 * : [type:vector3] normal in world space of the contact point, which points from B object towards A object
 *
 * @param b [type:table] contact point information for object B
 *
 * `position`
 * : [type:vector3] The world position of object B
 *
 * `id`
 * : [type:hash] The ID of object B
 *
 * `group`
 * : [type:hash] The collision group of object B
 *
 * `relative_velocity`
 * : [type:vector3] The relative velocity of the collision object B as observed from A object
 *
 * `mass`
 * : [type:number] The mass of the collision object B in kg
 *
 * `normal`
 * : [type:vector3] normal in world space of the contact point, which points from A object towards B object
 *
 * @examples
 *
 * How to take action when a contact point occurs:
 *
 * ```lua
 * physics.set_listener(function(self, event, data)
 *  if event == hash("contact_point_event") then
 *      pprint(data)
 *      -- {
 *      --  applied_impulse = 310.00769042969,
 *      --  distance = 0.0714111328125,
 *      --  a = {
 *      --      position = vmath.vector3(446, 371, 0),
 *      --      relative_velocity = vmath.vector3(1.1722083854693e-06, -20.667181015015, -0),
 *      --      mass = 0,
 *      --      group = hash: [default],
 *      --      id = hash: [/flat],
 *      --      normal = vmath.vector3(-0, -1, -0)
 *      --  },
 *      --  b = {
 *      --      position = vmath.vector3(185, 657.92858886719, 0),
 *      --      relative_velocity = vmath.vector3(-1.1722083854693e-06, 20.667181015015, 0),
 *      --      mass = 10,
 *      --      group = hash: [default],
 *      --      id = hash: [/go2],
 *      --      normal = vmath.vector3(0, 1, 0)
 *      --  },
 *      -- }
 *   end
 * end)
 * ```
 */
message ContactPointEvent
{   
    required ContactPoint   a                         = 1;
    required ContactPoint   b                         = 2;
    required float          distance                  = 3;
    required float          applied_impulse           = 4;
}

message Collision
{
    required dmMath.Point3 position                  = 1;
    required uint64 id                               = 2;
    required uint64 group                            = 3;
}

/*# reports a collision between two collision objects in cases where a listener is specified.
 * See [ref:physics.set_listener].
 *
 * This message is sent to a function specified in [ref:physics.set_listener]
 * when two collision objects collide.
 *
 * This message only reports that a collision has occurred and will be sent once per frame and per colliding pair.
 * For more detailed information, check for the [ref:contact_point_event].
 *
 * @message
 * @name collision_event
 * @param a [type:table] collision information for object A
 *
 * `position`
 * : [type:vector3] The world position of object A
 *
 * `id`
 * : [type:hash] The ID of object A
 *
 * `group`
 * : [type:hash] The collision group of object A
 *
 * @param b [type:table] collision information for object B
 *
 * `position`
 * : [type:vector3] The world position of object B
 *
 * `id`
 * : [type:hash] The ID of object B
 *
 * `group`
 * : [type:hash] The collision group of object B
 *
 * @examples
 *
 * How to take action when a collision occurs:
 *
 * ```lua
 * physics.set_listener(function(self, event, data)
 *   if event == hash("collision_event") then
 *       pprint(data)
 *       -- {
 *       --  a = {
 *       --          group = hash: [default],
 *       --          position = vmath.vector3(183, 666, 0),
 *       --          id = hash: [/go1]
 *       --      },
 *       --  b = {
 *       --          group = hash: [default],
 *       --          position = vmath.vector3(185, 704.05865478516, 0),
 *       --          id = hash: [/go2]
 *       --      }
 *       -- }
 *   end
 * end)
 * ```
 */
message CollisionEvent
{
    required Collision a                            = 1;
    required Collision b                            = 2;
}

message Trigger
{
    required uint64 id                              = 1;
    required uint64 group                           = 2;
}

/*# reports interaction (enter/exit) between a trigger collision object and another collision object
 * See [ref:physics.set_listener].
 *
 * This message is sent to a function specified in [ref:physics.set_listener]
 * when a collision object interacts with another collision object and one of them is a trigger.
 *
 * This message only reports that an interaction actually happened and will be sent once per colliding pair and frame.
 * For more detailed information, check for the [ref:contact_point_event].
 *
 * @message
 * @name trigger_event
 * @param enter [type:boolean] if the interaction was an entry or not
 * @param a [type:table] interaction information for object A
 * `id`
 * : [type:hash] The ID of object A
 *
 * `group`
 * : [type:hash] The collision group of object A
 *
 * @param b [type:table] collision information for object B
 *
 * `id`
 * : [type:hash] The ID of object B
 *
 * `group`
 * : [type:hash] The collision group of object B
 *
 * @examples
 *
 * How to take action when a trigger interaction occurs:
 *
 * ```lua
 * physics.set_listener(function(self, event, data)
 *  if event ==  hash("trigger_event") then
 *      if data.enter then
 *         -- take action for entry
 *      else
 *         -- take action for exit
 *      end
 *      pprint(data)
 *      -- {
 *      --  enter = true,
 *      --  b = {
 *      --      group = hash: [default],
 *      --      id = hash: [/go2]
 *      --  },
 *      --  a = {
 *      --      group = hash: [default],
 *      --      id = hash: [/go1]
 *      --  }
 *      -- },
 *   end
 * end)
 * ```
 */
message TriggerEvent
{
    required bool enter                             = 1;
    required Trigger a                              = 2;
    required Trigger b                              = 3;
}
