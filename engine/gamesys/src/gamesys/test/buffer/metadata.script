-- Copyright 2020-2025 The Defold Foundation
-- Copyright 2014-2020 King
-- Copyright 2009-2014 Ragnar Svensson, Christian Murray
-- Licensed under the Defold License version 1.0 (the "License"); you may not use
-- this file except in compliance with the License.
--
-- You may obtain a copy of the License, together with FAQs at
-- https://www.defold.com/license
--
-- Unless required by applicable law or agreed to in writing, software distributed
-- under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
-- CONDITIONS OF ANY KIND, either express or implied. See the License for the
-- specific language governing permissions and limitations under the License.


function comparetables(t1, t2)
    if #t1 ~= #t2 then return false end
    for i=1,#t1 do
        if t1[i] ~= t2[i] then return false end
    end
    return true
end


function test_number_types(thebuffer)
    -- float data

    local metadata1 = { -1.5, -2.5, -3.5, 1.5, 2.5, 3.5 }
    buffer.set_metadata(thebuffer, hash("floats"), metadata1, buffer.VALUE_TYPE_FLOAT32)
    local metadata2, thetype = buffer.get_metadata(thebuffer, "floats")
    assert( comparetables(metadata1, metadata2) )
    assert( thetype == buffer.VALUE_TYPE_FLOAT32 )

    -- unsigned int data

    metadata1 = { 1, 2, 3, 4, 5, 6 }
    buffer.set_metadata(thebuffer, hash("unsigned8"), metadata1, buffer.VALUE_TYPE_UINT8)
    metadata2, thetype = buffer.get_metadata(thebuffer, "unsigned8")
    assert( comparetables(metadata1, metadata2) )
    assert( thetype == buffer.VALUE_TYPE_UINT8 )

    metadata1 = { 257, 2, 3, 4, 5, 6 }
    buffer.set_metadata(thebuffer, hash("unsigned16"), metadata1, buffer.VALUE_TYPE_UINT16)
    metadata2, thetype = buffer.get_metadata(thebuffer, "unsigned16")
    assert( comparetables(metadata1, metadata2) )
    assert( thetype == buffer.VALUE_TYPE_UINT16 )

    metadata1 = { 65537, 2, 3, 4, 5, 6 }
    buffer.set_metadata(thebuffer, hash("unsigned32"), metadata1, buffer.VALUE_TYPE_UINT32)
    metadata2, thetype = buffer.get_metadata(thebuffer, "unsigned32")
    assert( comparetables(metadata1, metadata2) )
    assert( thetype == buffer.VALUE_TYPE_UINT32 )

    -- set UINT64 metadata should fail
    local status, result = pcall(function (thebuffer)
        local metadata1 = {}
        buffer.set_metadata(thebuffer, hash("metadata-entry15"), metadata1, buffer.VALUE_TYPE_UINT64)
    end, thebuffer)
    assert(not status)

    -- signed int data
    local metadata1 = { -1, -2, -3, 4, 5, 6 }
    buffer.set_metadata(thebuffer, hash("signed8"), metadata1, buffer.VALUE_TYPE_INT8)
    local metadata2, thetype = buffer.get_metadata(thebuffer, "signed8")
    assert( comparetables(metadata1, metadata2) )
    assert( thetype == buffer.VALUE_TYPE_INT8 )

    metadata1 = { -129, 2, 3, 4, 5, 6 }
    buffer.set_metadata(thebuffer, hash("signed16"), metadata1, buffer.VALUE_TYPE_INT16)
    metadata2, thetype = buffer.get_metadata(thebuffer, "signed16")
    assert( comparetables(metadata1, metadata2) )
    assert( thetype == buffer.VALUE_TYPE_INT16 )

    metadata1 = { -33000, 2, 3, 4, 5, 6 }
    buffer.set_metadata(thebuffer, hash("signed32"), metadata1, buffer.VALUE_TYPE_INT32)
    metadata2, thetype = buffer.get_metadata(thebuffer, "signed32")
    assert( comparetables(metadata1, metadata2) )
    assert( thetype == buffer.VALUE_TYPE_INT32 )

    -- set INT64 metadata should fail
    local status, result = pcall(function (thebuffer)
        local metadata1 = {}
        buffer.set_metadata(thebuffer, hash("metadata-entry15"), metadata1, buffer.VALUE_TYPE_INT64)
    end, thebuffer)
    assert(not status)


end


function init(self)

    self.new_buffer = buffer.create(6, {
            { name = hash("position"),
             type=buffer.VALUE_TYPE_FLOAT32,
             count = 3 }
    })

    -- changing the number type should fail with RESULT_METADATA_INVALID
    local status, result = pcall(function (thebuffer)
        local metadata1 = { 1, 2, 3}
        buffer.set_metadata(thebuffer, hash("metadata-entry"), metadata1, buffer.VALUE_TYPE_INT8)
        buffer.set_metadata(thebuffer, hash("metadata-entry"), metadata1, buffer.VALUE_TYPE_UINT8)
    end, self.new_buffer)
    assert(not status and string.match(result, "RESULT_METADATA_INVALID"), "update metadata with different number type should fail with RESULT_METADATA_INVALID" )

    -- changing the count of number should fail with RESULT_METADATA_INVALID
    local status, result = pcall(function (thebuffer)
        local metadata1 = { 1, 2, 3}
        local metadata2 = { 1, 2, 3, 4}
        buffer.set_metadata(thebuffer, hash("metadata-entry2"), metadata1, buffer.VALUE_TYPE_INT8)
        buffer.set_metadata(thebuffer, hash("metadata-entry2"), metadata2, buffer.VALUE_TYPE_INT8)
    end, self.new_buffer)
    assert(not status and string.match(result, "RESULT_METADATA_INVALID"), "update metadata with different count of numbers should fail with RESULT_METADATA_INVALID" )

    -- set invalid table with string indices should fail
    local status, result = pcall(function (thebuffer)
        local metadata1 = { a=1, b=2}
        buffer.set_metadata(thebuffer, hash("metadata-entry5"), metadata1, buffer.VALUE_TYPE_INT8)
        print( buffer.get_metadata(thebuffer, hash("metadata-entry5") ) )
    end, self.new_buffer)
    assert(not status)

    -- set empty metadata table should fail
    local status, result = pcall(function (thebuffer)
        local metadata1 = {}
        buffer.set_metadata(thebuffer, hash("metadata-entry5"), metadata1, buffer.VALUE_TYPE_INT8)
        print( buffer.get_metadata(thebuffer, hash("metadata-entry5") ) )
    end, self.new_buffer)
    assert(not status)

    -- retrieving missing metadata entries
    local metadata, datatype = buffer.get_metadata(self.new_buffer, hash("missing"))
    assert(metadata == nil, "returned metadata entry should be nil")
    assert(datatype == nil, "datatype should be nil")

    -- too few arguments for set_metadata
    local status, result = pcall(function (thebuffer)
        local metadata1 = { 1, 2, 3}
        buffer.set_metadata(thebuffer, hash("metadata-entry3"), metadata1)
    end, self.new_buffer)
    assert(not status)

    -- too few arguments for get_metadata
    local status, result = pcall(function (thebuffer)
        local metadata1 = { 1, 2, 3}
        buffer.get_metadata(thebuffer)
    end, self.new_buffer)
    assert(not status)

    -- bad number type
    --[[ TODO - this fails with 'LuaStackCheck: Unbalanced Lua stack, expected (4), actual (5)'. why ?
    local status, result = pcall(function (thebuffer)
        local metadata1 = { 1, 2, 3}
        buffer.set_metadata(thebuffer, hash("metadata-entry4"), metadata1,  12345 )
    end, self.new_buffer)
    assert(not status)
    --]]

    test_number_types(self.new_buffer)

end
