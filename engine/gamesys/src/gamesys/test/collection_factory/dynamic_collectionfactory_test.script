-- Copyright 2020-2025 The Defold Foundation
-- Copyright 2014-2020 King
-- Copyright 2009-2014 Ragnar Svensson, Christian Murray
-- Licensed under the Defold License version 1.0 (the "License"); you may not use
-- this file except in compliance with the License.
--
-- You may obtain a copy of the License, together with FAQs at
-- https://www.defold.com/license
--
-- Unless required by applicable law or agreed to in writing, software distributed
-- under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
-- CONDITIONS OF ANY KIND, either express or implied. See the License for the
-- specific language governing permissions and limitations under the License.


local function state(self)
    return self.states[self.state]
end
local function state_prev(self)
    return self.states[self.state_prev]
end

local function next_state(self)
    self.state_prev = self.state
    self.state = self.state + 1
end

local function delete_gameobjects(self)
    for _, id in ipairs(self.ids) do
        go.delete(id, true)
    end
    self.ids = {}
end

local function create_gameobjects(self, url)
    local ids1 = collectionfactory.create(url)
    local ids2 = collectionfactory.create(url)
    for _, id in pairs(ids1) do table.insert(self.ids, id) end
    for _, id in pairs(ids2) do table.insert(self.ids, id) end
end

local function handle_state(self)
    local state = self.states[self.state]
    -- print("Handle State", self.state, state, state_prev(self))

    if state == "load" then
        assert(collectionfactory.get_status("/go#collectionfactory") == collectionfactory.STATUS_UNLOADED)
        self.loading = true
        collectionfactory.load("/go#collectionfactory", load_complete)
        assert(collectionfactory.get_status("/go#collectionfactory") == collectionfactory.STATUS_LOADING)
    elseif state == "unload" then
        collectionfactory.unload("/go#collectionfactory")
        next_state(self)
    elseif state == "load_prototype" then
        assert(prototype_path ~= nil)
        collectionfactory.set_prototype("/go#collectionfactory", prototype_path)
        self.loading = true
        collectionfactory.load("/go#collectionfactory", load_complete)
    elseif state == "unload_prototype" then
        collectionfactory.unload("/go#collectionfactory")
        collectionfactory.set_prototype("/go#collectionfactory", nil)
        next_state(self)
    elseif state == "delete" then
        delete_gameobjects(self)
        next_state(self)
    elseif state == "create" then
        create_gameobjects(self, self.url)
        next_state(self)
    end
end

function init(self)
    self.url = "/go#collectionfactory"
    self.ids = {}
    self.loading = false
    self.state_prev = 0
    self.state = 1
    self.states = { "load", "unload", "delete", "load", "unload",
                    "unload", "delete", "create", "delete"}

    if prototype_path ~= nil then
        table.insert(self.states, "load_prototype")
        table.insert(self.states, "unload_prototype")
        table.insert(self.states, "delete")
    end
end

function load_complete(self, url, result)
    assert(result == true)
    self.loading = false
    create_gameobjects(self, url)
    next_state(self)
end

function update(self, dt)
    if self.loading then
        return
    end

    handle_state(self)
end

function final(self)
end
