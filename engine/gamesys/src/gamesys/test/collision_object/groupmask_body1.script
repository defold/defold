-- Copyright 2020-2025 The Defold Foundation
-- Copyright 2014-2020 King
-- Copyright 2009-2014 Ragnar Svensson, Christian Murray
-- Licensed under the Defold License version 1.0 (the "License"); you may not use
-- this file except in compliance with the License.
--
-- You may obtain a copy of the License, together with FAQs at
-- https://www.defold.com/license
--
-- Unless required by applicable law or agreed to in writing, software distributed
-- under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
-- CONDITIONS OF ANY KIND, either express or implied. See the License for the
-- specific language governing permissions and limitations under the License.

-- scenario: mask/group status of bodies set up, body1-go is thrown to body2-go, collision result is asserted
-- globals IN: actions, collision_expected

-- a function that works for Lua 5.1
local function split(s, delimiter)
    result = {};
    for match in (s..delimiter):gmatch("(.-)"..delimiter) do
        table.insert(result, match);
    end
    return result;
end


function executeAction(command, co, argument)
  print("command: ", "'"..command.."'", ", object: ", "'"..co.."'", ", argument: ", "'"..argument.."'")
  if command == "group" then
    physics.set_group(co, argument)
  elseif command == "addmask" then
    physics.set_maskbit(co, argument, true)
  elseif command == "removemask" then
    physics.set_maskbit(co, argument,false)
  end

end

function init(self)
  -- set up group and mask properties
  for action in actions:gmatch("[^\r\n]+") do -- split multiline string
    -- print("action", action)
    local tokens = split(action, " ")  -- split each line command/co/argument parts
    executeAction(tokens[1], tokens[2], tokens[3])
  end

  -- throw object
  --physics.wakeup("body1-go#co")
  go.set("/body1-go#co", "linear_velocity", vmath.vector3(100,0,0))
  --go.set("/body2-go#co", "linear_velocity", vmath.vector3(100,0,0))

end

tests_done = false -- flag end of test to C level
local counter = 0

local collision_detected = false
function on_message(self, message_id, message, sender)
  if message_id == hash("collision_response") then
    --print("collision detected at frame ", counter )
        collision_detected = true
  end
end


function update(self, dt)
  counter = counter + 1

  --print("body1 at:",go.get_position("/body1-go"))
  --print("body2 at:",go.get_position("/body2-go"))


  if counter >= 120 then
    assert(collision_expected == collision_detected)
    tests_done = true
  end
end

