-- Copyright 2020-2024 The Defold Foundation
-- Copyright 2014-2020 King
-- Copyright 2009-2014 Ragnar Svensson, Christian Murray
-- Licensed under the Defold License version 1.0 (the "License"); you may not use
-- this file except in compliance with the License.
-- 
-- You may obtain a copy of the License, together with FAQs at
-- https://www.defold.com/license
-- 
-- Unless required by applicable law or agreed to in writing, software distributed
-- under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
-- CONDITIONS OF ANY KIND, either express or implied. See the License for the
-- specific language governing permissions and limitations under the License.

function init(self)
	self.update_counter = 0
end

-- oridinal dimensions of the sprite is 84 x 67, but it gets downsized to 64 x 64
local function test_success_simple(self)
	local x             = 16
	local y             = 16
	local height        = 32
	local width         = 32
	local buf           = buffer.create(width * height, { {name=hash("rgb"), type=buffer.VALUE_TYPE_UINT8, count=3} } )
	local resource_path = go.get("#sprite", "texture0")
	local header = {
		width        = width,
		height       = height,
		type         = graphics.TEXTURE_TYPE_2D,
		format       = graphics.TEXTURE_FORMAT_RGB,
		x            = x,
		y            = y,
	}
	resource.set_texture(resource_path, header, buf)
end

local function test_success_resize(self)
	local height        = 256
	local width         = 256
	local buf           = buffer.create(width * height, { {name=hash("rgb"), type=buffer.VALUE_TYPE_UINT8, count=3} } )
	local resource_path = go.get("#sprite", "texture0")
	local header = {
		width        = width,
		height       = height,
		type         = graphics.TEXTURE_TYPE_2D,
		format       = graphics.TEXTURE_FORMAT_RGB,
	}
	resource.set_texture(resource_path, header, buf)
end

local function test_fail_out_of_bounds(self)
	local x             = 256
	local y             = 256
	local height        = 32
	local width         = 32
	local buf           = buffer.create(width * height, { {name=hash("rgb"), type=buffer.VALUE_TYPE_UINT8, count=3} } )
	local resource_path = go.get("#sprite", "texture0")
	local header = {
		width        = width,
		height       = height,
		type         = graphics.TEXTURE_TYPE_2D,
		format       = graphics.TEXTURE_FORMAT_RGB,
		x            = x,
		y            = y,
	}
	resource.set_texture(resource_path, header, buf)
end

local function test_fail_wrong_mipmap(self)
	local height        = 1
	local width         = 1
	local buf           = buffer.create(width * height, { {name=hash("rgb"), type=buffer.VALUE_TYPE_UINT8, count=3} } )
	local resource_path = go.get("#sprite", "texture0")
	local header = {
		width        = width,
		height       = height,
		type         = graphics.TEXTURE_TYPE_2D,
		format       = graphics.TEXTURE_FORMAT_RGB,
		mipmap       = 31,
	}
	resource.set_texture(resource_path, header, buf)
end

local function test_success_compressed(self)
    local host_path = sys.get_host_path("src/gamesys/test/resource/blank.basis")
	local f     = io.open(host_path, "rb")
    local c     = f:read("*all")
    local fsize = f:seek("end")
    f:close()

    local tex_buffer = buffer.create(fsize, {{name = hash("data"), type = buffer.VALUE_TYPE_UINT8, count = 1 }})
	local stream     = buffer.get_stream(tex_buffer, hash("data"))

	for i=1, fsize do
		stream[i] = c:byte(i)
	end

	local args = {
		type             = graphics.TEXTURE_TYPE_2D,
		width            = 32,
		height           = 32,
		format           = graphics.TEXTURE_FORMAT_RGB_ETC1,
		compression_type = graphics.COMPRESSION_TYPE_BASIS_UASTC,
	}

    resource.set_texture(go.get("#sprite", "texture0"), args, tex_buffer)
end

function update(self, dt)
	self.update_counter = self.update_counter + 1

	local tests = {
		test_success_simple,
		test_success_resize,
		test_fail_out_of_bounds,
		test_fail_wrong_mipmap,
		test_success_compressed,
	}

	tests[self.update_counter](self)
end
