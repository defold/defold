apply plugin: 'java'

apply from: '../com.dynamo.cr.bob/build.gradle'

ext {
    testDir = file('../com.dynamo.cr.bob.test/')
    testClassesDir = file("$testDir/build")
    testTmpDir = file("$testDir/tmp")
    DM_BOB_BUNDLERTEST_ONLY_HOST = project.hasProperty('DM_BOB_BUNDLERTEST_ONLY_HOST') ? project.property('DM_BOB_BUNDLERTEST_ONLY_HOST') : ''
}

task cleanTestDirs(type: Delete) {
    delete testClassesDir, testTmpDir
}

clean.dependsOn cleanTestDirs

configurations {
    testClasspath
}

dependencies {
    testClasspath files("$testDir/lib/junit-4.12.jar")
    testClasspath files("$testDir/lib/hamcrest-all-1.3.jar")
    testClasspath files("$testDir/lib/ant-junit-1.10.7.jar")
    testClasspath files("$testDir/lib/aspectjtools-1.9.5.jar")
    testClasspath files("$testDir/lib/jetty-all-7.0.2.v20100331.jar")
    testClasspath files("$testDir/lib/servlet-api-2.5.jar")
    testClasspath files("$testDir/lib/protobuf-java-3.11.4.jar")
}

task compileTest(type: JavaCompile, dependsOn:distBob) {
    source = fileTree(dir: 'src', include: '**/com/dynamo/**')
    destinationDirectory = testClassesDir
    classpath = files("$gradle.ext.bobDir/dist/bob.jar", configurations.testClasspath)
    options.encoding = 'UTF-8'
    options.compilerArgs << '-g'

    doFirst {
        if (!file("$gradle.ext.bobDir/dist/bob.jar").exists()) {
            throw new GradleException("bob.jar is missing")
        }
        mkdir testClassesDir
    }
}

task createTestJar(type: Jar, dependsOn:compileTest) {
    archiveFileName = 'bob-tests.jar'
    destinationDirectory = testTmpDir
    from(testClassesDir) {
        exclude 'default/**/*.*'
    }
    from("$gradle.ext.testDir/src") {
        include 'com/dynamo/bob/**/*.txt', 'com/dynamo/bob/**/*.yml', 'com/dynamo/bob/**/*.png',
                'com/dynamo/bob/**/*.dae', 'com/dynamo/bob/**/*.gltf', 'com/dynamo/bob/**/*.glb',
                'com/dynamo/bob/**/*.lua', 'com/dynamo/bob/**/*.fnt', 'com/dynamo/bob/**/*.ttf',
                'com/dynamo/bob/**/*.json', 'builtins/**/*.*'
    }
    from("$gradle.ext.testDir") {
        include 'test/**/*.*', 'testappmanifest/**/*.*', 'testextension/**/*.*'
        exclude 'test/build/**/*.*'
    }
}

task testJar(type: Test, dependsOn: createTestJar) {
    useJUnit()

    systemProperty 'DM_BOB_BUNDLERTEST_ONLY_HOST', DM_BOB_BUNDLERTEST_ONLY_HOST
    testLogging {
        events 'passed', 'skipped', 'failed'
    }

    classpath = files(configurations.testClasspath, "$gradle.ext.bobDir/dist/bob.jar", "$testTmpDir/bob-tests.jar")
    testClassesDirs = files("$gradle.ext.testDir/src").asFileTree.matching {
        include '**/*Test*.java'
        exclude '**/Abstract*.java', '**/TestClassLoaderScanner.java', '**/TestLibrariesRule.java', '**/PropertiesTestUtil.java'
    }
}

defaultTasks 'clean', 'testJar'
