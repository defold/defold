apply plugin: 'java'

def testDir = "../com.dynamo.cr.bob.test/"
def testClassesDir = "${testDir}/build"
def testTmpDir = "${testDir}/tmp"
def DM_BOB_BUNDLERTEST_ONLY_HOST = System.getenv("DM_BOB_BUNDLERTEST_ONLY_HOST")
def bobDir = projectDir.parentFile.parentFile.path + '/com.dynamo.cr.bob'

repositories {
    flatDir {
        dirs "${testDir}/lib"
    }
}

configurations {
    testClasspath
}

dependencies {
    testClasspath fileTree(dir: "${testDir}/lib", include: [
            'junit-4.12.jar',
            'hamcrest-all-1.3.jar',
            'ant-junit-1.10.7.jar',
            'aspectjtools-1.9.5.jar',
            'jetty-all-7.0.2.v20100331.jar',
            'servlet-api-2.5.jar'
    ])
}

task testClean(type: Delete) {
    delete file('build/classes')
    delete file(testClassesDir)
    delete file(testTmpDir)
}

task customClean(type: Delete) {
    delete file(testClassesDir)
}

// Define a dummy dist task to satisfy the dependency
task dist {
    doLast {
        println "Dummy dist task - ensure the actual dist task is correctly defined in the Ant script."
    }
}

task compileTest(dependsOn: [dist]) {
    doLast {
        mkdir testClassesDir

        def bobJarFile = file("${bobDir}/dist/bob.jar")
        if (!bobJarFile.exists()) {
            throw new GradleException("bob.jar is missing")
        }

        ant.javac(destdir: testClassesDir, includeantruntime: false, debug: 'true', encoding: 'UTF-8') {
            src(path: 'src')
            include(name: 'com/dynamo/**')

            classpath(location: bobJarFile)
            classpath {
                path(refid: 'classpath')
            }
            classpath {
                path(refid: 'test.classpath')
            }
            compilerarg(value: '-g')
        }

        ant.jar(destfile: "${testTmpDir}/bob-tests.jar") {
            fileset(dir: testClassesDir) {
                exclude(name: 'default/**/*.*')
            }
            fileset(dir: "${testDir}/src") {
                include(name: 'com/dynamo/bob/**/*.txt')
                include(name: 'com/dynamo/bob/**/*.yml')
                include(name: 'com/dynamo/bob/**/*.png')
                include(name: 'com/dynamo/bob/**/*.dae')
                include(name: 'com/dynamo/bob/**/*.gltf')
                include(name: 'com/dynamo/bob/**/*.glb')
                include(name: 'com/dynamo/bob/**/*.lua')
                include(name: 'com/dynamo/bob/**/*.fnt')
                include(name: 'com/dynamo/bob/**/*.ttf')
                include(name: 'com/dynamo/bob/**/*.json')
                include(name: 'builtins/**/*.*')
            }
            fileset(dir: testDir) {
                include(name: 'test/**/*.*')
                exclude(name: 'test/build/**/*.*')
                include(name: 'testappmanifest/**/*.*')
                include(name: 'testextension/**/*.*')
            }
        }
    }
}

task runCustomTests(dependsOn: 'compileTest', type: Test) {
    systemProperty 'DM_BOB_BUNDLERTEST_ONLY_HOST', DM_BOB_BUNDLERTEST_ONLY_HOST

    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showCauses true
        showExceptions true
        showStackTraces true
    }

    classpath = files(configurations.testClasspath, "${bobDir}/dist/bob.jar", "${testTmpDir}/bob-tests.jar")

    include '**/*Test*.java'
    exclude '**/Abstract*.java', '**/TestClassLoaderScanner.java', '**/TestLibrariesRule.java', '**/PropertiesTestUtil.java'
}

task customTest(dependsOn: 'runCustomTests')
