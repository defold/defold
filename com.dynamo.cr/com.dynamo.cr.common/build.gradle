import java.util.concurrent.Executors
import java.util.concurrent.Callable

apply plugin: 'java'
apply from: '../com.dynamo.cr.bob/basic.gradle'

task cleanGenerated {
    doLast {
        delete "${project.commonDir}/generated"
    }
}

clean.dependsOn cleanGenerated

task extGeneratedCopy(dependsOn: [getGitRevision]) {
    doLast {
        def gitRevision = tasks.getGitRevision.gitRevision
        def extGeneratedDir = file('ext_generated')
        extGeneratedDir.mkdirs()
        copy {
            from "${project.dynamoHome}/archive/${gitRevision}/engine/share/java"
            include 'dlib.jar'
            into extGeneratedDir
        }
        copy {
            from "${project.dynamoHome}/share/java"
            include 'dlib.jar'
            into extGeneratedDir
        }
        if (extGeneratedDir.listFiles().length == 0) {
            throw new RuntimeException("dlib.jar is missing")
        }
    }
}

def protoTasks = [
        [dir: "proto", file: "cr_ddf.proto"],
        [dir: "proto", file: "cr_protocol_ddf.proto"],
]

task generateProtos(dependsOn: extGeneratedCopy) {
    doLast {
        file("${project.commonDir}/generated").mkdirs()

        def executor = Executors.newFixedThreadPool(10)
        def futures = []

        protoTasks.each { proto ->
            futures << executor.submit({ ->
                def command = [
                        "${project.dynamoHome}/ext/bin/${project.hostPlatform}/protoc",
                        "--java_out=${project.commonDir}/generated",
                        "-I${proto.dir}",
                        "-I${project.dynamoHome}/ext/include",
                        "-I../../engine/ddf/src",
                        "-I../../engine/script/src",
                        "-I../../engine/gameobject/proto",
                        "-I../../engine/graphics/proto",
                        "${proto.dir}/${proto.file}"
                ] as String[] // Explicitly type the command array as String[]

                println "Executing: ${command.join(' ')}"
                def process = command.execute()
                process.waitFor()
                if (process.exitValue() != 0) {
                    println process.err.text
                    throw new RuntimeException("Error compiling proto: ${proto.file}")
                }
            } as Callable<Void>)
        }
        futures.each { it.get() }
        executor.shutdown()
    }
}

compileJava.dependsOn(generateProtos)
