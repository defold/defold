import java.util.concurrent.Executors

apply plugin: 'java'

def buildToolsDir = "../../build_tools"
def dynamoHome = System.getenv("DYNAMO_HOME") ?: "../../tmp/dynamo_home"

task getHostPlatform {
    doLast {
        def command = [
                "python",
                "-c",
                "import sys; sys.path.append('" + buildToolsDir +"'); import sdk; print(sdk.get_host_platform())"
        ]

        try {
            def process = new ProcessBuilder(command)
                    .redirectErrorStream(true)
                    .start()
            def output = new StringBuffer()
            process.inputStream.eachLine { line -> output.append(line).append('\n') }
            process.waitFor()
            def outputString = output.toString().trim()

            if (process.exitValue() == 0) {
                def hostPlatform = outputString
                if (hostPlatform) {
                    project.ext.hostPlatform = hostPlatform
                    println "Host Platform: ${hostPlatform}"
                } else {
                    throw new GradleException("Failed to determine host platform: output is empty")
                }
            } else {
                throw new GradleException("Failed to determine host platform: ${outputString}")
            }
        } catch (Exception e) {
            println "Exception occurred: ${e.message}"
            throw e
        }
    }
}

task cleanGenerated {
    doLast {
        delete 'generated'
    }
}

task getGitRevision {
    doLast {
        def gitRevision = "git log --pretty=%H -n1".execute().text.trim()
        project.ext.gitRevision = gitRevision
        println "Git Revision: ${gitRevision}"
    }
}

task extGeneratedCopy(dependsOn: [getGitRevision, getHostPlatform]) {
    doLast {
        def extGeneratedDir = file('ext_generated')
        extGeneratedDir.mkdirs()
        copy {
            from "${dynamoHome}/archive/${project.ext.gitRevision}/engine/share/java"
            include 'dlib.jar'
            into extGeneratedDir
        }
        copy {
            from "${dynamoHome}/share/java"
            include 'dlib.jar'
            into extGeneratedDir
        }
        if (extGeneratedDir.listFiles().length == 0) {
            throw new GradleException("dlib.jar is missing")
        }
    }
}

def protoTasks = [
        [dir: "proto", file: "cr_ddf.proto"],
        [dir: "proto", file: "cr_protocol_ddf.proto"],
        [dir: "../../engine/ddf/src", file: "ddf/ddf_extensions.proto"],
        [dir: "../../engine/ddf/src", file: "ddf/ddf_math.proto"],
        [dir: "../../engine/engine/proto", file: "engine/engine_ddf.proto"],
        [dir: "../../engine/graphics/proto", file: "graphics/graphics_ddf.proto"],
        [dir: "../../engine/gameobject/proto", file: "gameobject/properties_ddf.proto"],
        [dir: "../../engine/gameobject/proto", file: "gameobject/gameobject_ddf.proto"],
        [dir: "../../engine/gameobject/proto", file: "gameobject/lua_ddf.proto"],
        [dir: "../../engine/gamesys/proto", file: "gamesys/atlas_ddf.proto"],
        [dir: "../../engine/gamesys/proto", file: "gamesys/camera_ddf.proto"],
        [dir: "../../engine/gamesys/proto", file: "gamesys/gamesys_ddf.proto"],
        [dir: "../../engine/gamesys/proto", file: "gamesys/gui_ddf.proto"],
        [dir: "../../engine/gamesys/proto", file: "gamesys/label_ddf.proto"],
        [dir: "../../engine/gamesys/proto", file: "gamesys/model_ddf.proto"],
        [dir: "../../engine/gamesys/proto", file: "gamesys/physics_ddf.proto"],
        [dir: "../../engine/gamesys/proto", file: "gamesys/sound_ddf.proto"],
        [dir: "../../engine/gamesys/proto", file: "gamesys/sprite_ddf.proto"],
        [dir: "../../engine/gamesys/proto", file: "gamesys/texture_set_ddf.proto"],
        [dir: "../../engine/gamesys/proto", file: "gamesys/tile_ddf.proto"],
        [dir: "../../engine/gamesys/proto", file: "gamesys/mesh_ddf.proto"],
        [dir: "../../engine/gamesys/proto", file: "gamesys/buffer_ddf.proto"],
        [dir: "../../engine/rig/proto", file: "rig/rig_ddf.proto"],
        [dir: "../../engine/input/proto", file: "input/input_ddf.proto"],
        [dir: "../../engine/particle/proto", file: "particle/particle_ddf.proto"],
        [dir: "../../engine/render/proto", file: "render/font_ddf.proto"],
        [dir: "../../engine/render/proto", file: "render/material_ddf.proto"],
        [dir: "../../engine/render/proto", file: "render/render_ddf.proto"],
        [dir: "../../engine/resource/proto", file: "resource/liveupdate_ddf.proto"],
        [dir: "../../engine/resource/proto", file: "resource/resource_ddf.proto"],
        [dir: "../../engine/script/src", file: "script/script_doc_ddf.proto"],
        [dir: "../../engine/script/src", file: "script/lua_source_ddf.proto"],
        [dir: "../../engine/script/src", file: "script/ddf_script.proto"],
        [dir: "../../engine/script/src", file: "script/sys_ddf.proto"]
]

task generateProtos(dependsOn: extGeneratedCopy) {
    doLast {
        file('generated').mkdirs() // Ensure the generated directory exists

        def executor = Executors.newFixedThreadPool(10) // Create a thread pool with 10 threads
        def futures = []

        protoTasks.each { proto ->
            futures << executor.submit {
                def command = [
                        "${dynamoHome}/ext/bin/${project.ext.hostPlatform}/protoc",
                        "--java_out=generated",
                        "-I${proto.dir}",
                        "-I${dynamoHome}/ext/include",
                        "-I../../engine/ddf/src",
                        "-I../../engine/script/src",
                        "-I../../engine/gameobject/proto",
                        "-I../../engine/graphics/proto",
                        "${proto.dir}/${proto.file}"
                ]
                println "Executing: ${command.join(' ')}"
                def process = command.execute()
                process.waitFor()
                if (process.exitValue() != 0) {
                    println process.err.text
                    throw new GradleException("Error compiling proto: ${proto.file}")
                }
            }
        }

        // Wait for all tasks to complete
        futures.each { it.get() }

        // Shutdown the executor
        executor.shutdown()
    }
}

compileJava.dependsOn(generateProtos)
