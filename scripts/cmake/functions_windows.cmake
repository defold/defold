message("functions_windows.cmake:")

# Helper to pick latest directory path from a list of paths
function(_defold_pick_latest_dir OUT_VAR)
    set(dirs ${ARGN})
    if(dirs)
        # Use natural sorting so versioned directory names order correctly
        list(SORT dirs COMPARE NATURAL)
        list(REVERSE dirs)
        list(GET dirs 0 _latest)
        set(${OUT_VAR} "${_latest}" PARENT_SCOPE)
    endif()
endfunction()

# Helper: detect Windows SDK version under a root (Windows Kits/10/Include/<ver>)
function(_defold_detect_winsdk_from_root ROOT OUT_VER)
    set(${OUT_VER} "" PARENT_SCOPE)
    if(NOT EXISTS "${ROOT}")
        return()
    endif()
    set(_best_ver "")
    foreach(_winsdk_layout "Windows Kits" "WindowsKits")
        if(_best_ver)
            break()
        endif()
        set(_inc_root "${ROOT}/${_winsdk_layout}/10/Include")
        if(EXISTS "${_inc_root}")
            file(GLOB _sdk_vers RELATIVE "${_inc_root}" "${_inc_root}/*")
            if(_sdk_vers)
                _defold_pick_latest_dir(_latest_ver ${_sdk_vers})
                if(_latest_ver)
                    set(_best_ver "${_latest_ver}")
                endif()
            endif()
        endif()
    endforeach()
    if(_best_ver)
        set(${OUT_VER} "${_best_ver}" PARENT_SCOPE)
    endif()
endfunction()

# Helper: detect cl.exe under a Visual Studio root
function(_defold_detect_msvc_cl_from_vsroot VSROOT ARCH OUT_PATH)
    set(${OUT_PATH} "" PARENT_SCOPE)
    if(NOT EXISTS "${VSROOT}")
        return()
    endif()
    if(ARCH STREQUAL "x64")
        set(_cl_globs "${VSROOT}/VC/Tools/MSVC/*/bin/Hostx64/x64/cl.exe")
    else()
        set(_cl_globs "${VSROOT}/VC/Tools/MSVC/*/bin/Hostx86/x86/cl.exe")
    endif()
    foreach(_pat IN LISTS _cl_globs)
        file(GLOB _matches ${_pat})
        if(_matches)
            _defold_pick_latest_dir(_best ${_matches})
            if(_best)
                set(${OUT_PATH} "${_best}" PARENT_SCOPE)
                return()
            endif()
        endif()
    endforeach()
endfunction()

# Helper: detect clang-cl.exe under a Visual Studio root
function(_defold_detect_clang_cl_from_vsroot VSROOT ARCH OUT_PATH)
    set(${OUT_PATH} "" PARENT_SCOPE)
    if(NOT EXISTS "${VSROOT}")
        return()
    endif()
    if(ARCH STREQUAL "x64")
        set(_globs "${VSROOT}/VC/Tools/Llvm/x64/bin/clang-cl.exe")
    else()
        set(_globs "${VSROOT}/VC/Tools/Llvm/x86/bin/clang-cl.exe")
    endif()
    file(GLOB _matches ${_globs})
    if(_matches)
        _defold_pick_latest_dir(_best ${_matches})
        if(_best)
            set(${OUT_PATH} "${_best}" PARENT_SCOPE)
        endif()
    endif()
endfunction()

# Helper: locate rc.exe and mt.exe inside a Windows Kits root
function(_defold_locate_winsdk_tools_in_root ROOT VER ARCH OUT_RC OUT_MT)
    set(_rc "")
    set(_mt "")
    if(NOT EXISTS "${ROOT}")
        set(${OUT_RC} "" PARENT_SCOPE)
        set(${OUT_MT} "" PARENT_SCOPE)
        return()
    endif()

    foreach(_winsdk_layout "Windows Kits" "WindowsKits")
        if(_rc AND _mt)
            break()
        endif()
        set(_bin_root "${ROOT}/${_winsdk_layout}/10/bin")
        if(EXISTS "${_bin_root}")
            # Prefer versioned layout: .../10/bin/<VER>/<ARCH>/
            set(_ver_dir "${_bin_root}/${VER}")
            if(EXISTS "${_ver_dir}")
                set(_rc_candidate "${_ver_dir}/${ARCH}/rc.exe")
                set(_mt_candidate "${_ver_dir}/${ARCH}/mt.exe")
                if(NOT _rc AND EXISTS "${_rc_candidate}")
                    set(_rc "${_rc_candidate}")
                endif()
                if(NOT _mt AND EXISTS "${_mt_candidate}")
                    set(_mt "${_mt_candidate}")
                endif()
            endif()
            # Fallback non-versioned layout: .../10/bin/<ARCH>/
            if(NOT _rc)
                set(_rc_candidate2 "${_bin_root}/${ARCH}/rc.exe")
                if(EXISTS "${_rc_candidate2}")
                    set(_rc "${_rc_candidate2}")
                endif()
            endif()
            if(NOT _mt)
                set(_mt_candidate2 "${_bin_root}/${ARCH}/mt.exe")
                if(EXISTS "${_mt_candidate2}")
                    set(_mt "${_mt_candidate2}")
                endif()
            endif()
        endif()
    endforeach()

    set(${OUT_RC} "${_rc}" PARENT_SCOPE)
    set(${OUT_MT} "${_mt}" PARENT_SCOPE)
endfunction()

# Helper: given a cl.exe path, locate the MSVC lib directory that contains LIBCMT.lib
function(_defold_locate_msvc_lib_dir_from_cl CL_PATH ARCH OUT_LIB_DIR)
    set(${OUT_LIB_DIR} "" PARENT_SCOPE)
    if(NOT EXISTS "${CL_PATH}")
        return()
    endif()
    # Normalize and walk up to VC/Tools/MSVC/<ver>
    cmake_path(REAL_PATH "${CL_PATH}" _cl_real)
    cmake_path(GET _cl_real PARENT_PATH _cl_dir)       # .../bin/Host*/<arch>
    cmake_path(GET _cl_dir  PARENT_PATH _host_dir)     # .../bin/Host*
    cmake_path(GET _host_dir PARENT_PATH _bin_dir)     # .../bin
    cmake_path(GET _bin_dir  PARENT_PATH _msvc_ver_dir)# .../VC/Tools/MSVC/<ver>

    set(_candidates
        "${_msvc_ver_dir}/lib/${ARCH}"
        "${_msvc_ver_dir}/lib/onecore/${ARCH}"
    )
    foreach(_cand IN LISTS _candidates)
        if(EXISTS "${_cand}/libcmt.lib")
            set(${OUT_LIB_DIR} "${_cand}" PARENT_SCOPE)
            return()
        endif()
    endforeach()
endfunction()

# Helper: given a cl.exe path, locate the MSVC include directory that contains vcruntime.h
function(_defold_locate_msvc_include_dir_from_cl CL_PATH OUT_INC_DIR)
    set(${OUT_INC_DIR} "" PARENT_SCOPE)
    if(NOT EXISTS "${CL_PATH}")
        return()
    endif()
    cmake_path(REAL_PATH "${CL_PATH}" _cl_real)
    cmake_path(GET _cl_real PARENT_PATH _cl_dir)       # .../bin/Host*/<arch>
    cmake_path(GET _cl_dir  PARENT_PATH _host_dir)     # .../bin/Host*
    cmake_path(GET _host_dir PARENT_PATH _bin_dir)     # .../bin
    cmake_path(GET _bin_dir  PARENT_PATH _msvc_ver_dir)# .../VC/Tools/MSVC/<ver>
    set(_inc_dir "${_msvc_ver_dir}/include")
    if(EXISTS "${_inc_dir}/vcruntime.h")
        set(${OUT_INC_DIR} "${_inc_dir}" PARENT_SCOPE)
    endif()
endfunction()

# Helper: locate UM and UCRT lib dirs in a Windows Kits root
function(_defold_locate_winsdk_lib_dirs_in_root ROOT VER ARCH OUT_UM_DIR OUT_UCRT_DIR)
    set(_um_dir "")
    set(_ucrt_dir "")
    foreach(_winsdk_layout "Windows Kits" "WindowsKits")
        if(_um_dir AND _ucrt_dir)
            break()
        endif()
        set(_lib_root "${ROOT}/${_winsdk_layout}/10/Lib/${VER}")
        if(EXISTS "${_lib_root}")
            set(_um_candidate "${_lib_root}/um/${ARCH}")
            if(EXISTS "${_um_candidate}")
                set(_um_dir "${_um_candidate}")
            endif()
            set(_ucrt_candidate "${_lib_root}/ucrt/${ARCH}")
            if(EXISTS "${_ucrt_candidate}")
                set(_ucrt_dir "${_ucrt_candidate}")
            endif()
        endif()
    endforeach()
    set(${OUT_UM_DIR} "${_um_dir}" PARENT_SCOPE)
    set(${OUT_UCRT_DIR} "${_ucrt_dir}" PARENT_SCOPE)
endfunction()
