defold_log("sdk_windows.cmake:")

# Detect Windows toolchain and SDK in this order:
# 1) Prepackaged toolchain under ${DEFOLD_SDK_ROOT}/ext/SDKs (aka tmp/dynamo_home/ext/SDKs)
# 2) Locally installed Visual Studio
# 3) Locally installed LLVM/Clang (clang-cl/clang++)
#
# Results:
# - Sets CMAKE_{C,CXX}_COMPILER when not already provided
# - Tries to detect a Windows SDK version and sets CMAKE_SYSTEM_VERSION

if(NOT WIN32)
    message(DEBUG "sdk_windows: Non-Windows host; nothing to do")
    return()
endif()

# Ensure shared helpers are available (defold_collect_packaged_roots, Windows helpers, etc.)
include(functions)
include(functions_windows)

set(_DEFOLD_WIN_ARCH "x64")
if(DEFINED TARGET_PLATFORM)
    if(TARGET_PLATFORM MATCHES "(^|-)x86($|-)" OR TARGET_PLATFORM MATCHES "x86-win32")
        set(_DEFOLD_WIN_ARCH "x86")
    endif()
endif()

set(_FOUND_MSVC_CL "")
set(_FOUND_CLANG_CL "")
set(_FOUND_LLVM_CLANGXX "")
set(_FOUND_LLVM_CLANG   "")
set(_FOUND_WINSDK_VERSION "")
set(_FOUND_PACKAGED_TOOLCHAIN FALSE)

# Helper to pick latest directory path from a list of paths

#############################################
# Unified Visual Studio roots and detection
set(_VS_CANDIDATE_ROOTS "")
if(DEFINED DEFOLD_SDK_ROOT)
    set(_SDKS_DIR "${DEFOLD_SDK_ROOT}/ext/SDKs")
    if(EXISTS "${_SDKS_DIR}")
        defold_collect_packaged_roots("${_SDKS_DIR}" _packaged_vs_roots)
        list(APPEND _VS_CANDIDATE_ROOTS ${_packaged_vs_roots})
    endif()
endif()

# Prefer latest from vswhere if available
find_program(_VSWHERE vswhere HINTS "C:/Program Files (x86)/Microsoft Visual Studio/Installer")
if(_VSWHERE)
    execute_process(COMMAND "${_VSWHERE}" -latest -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath
                    OUTPUT_VARIABLE _VS_INSTALL
                    OUTPUT_STRIP_TRAILING_WHITESPACE
                    ERROR_QUIET)
    if(_VS_INSTALL AND EXISTS "${_VS_INSTALL}")
        list(INSERT _VS_CANDIDATE_ROOTS 0 "${_VS_INSTALL}")
    endif()
endif()

# Common local fallback roots
list(APPEND _VS_CANDIDATE_ROOTS
    "C:/Program Files (x86)/Microsoft Visual Studio/2022/BuildTools"
    "C:/Program Files (x86)/Microsoft Visual Studio/2022/Community"
    "C:/Program Files (x86)/Microsoft Visual Studio/2019/BuildTools"
    "C:/Program Files (x86)/Microsoft Visual Studio/2019/Community")
list(REMOVE_DUPLICATES _VS_CANDIDATE_ROOTS)

# Scan for MSVC and clang-cl
foreach(_vs IN LISTS _VS_CANDIDATE_ROOTS)
    if(NOT _FOUND_MSVC_CL)
        _defold_detect_msvc_cl_from_vsroot("${_vs}" "${_DEFOLD_WIN_ARCH}" _cl)
        if(_cl)
            set(_FOUND_MSVC_CL "${_cl}")
        endif()
    endif()
    if(NOT _FOUND_CLANG_CL)
        _defold_detect_clang_cl_from_vsroot("${_vs}" "${_DEFOLD_WIN_ARCH}" _clangcl)
        if(_clangcl)
            set(_FOUND_CLANG_CL "${_clangcl}")
        endif()
    endif()
endforeach()

# Detect Windows SDK version from the same roots or system
if(NOT _FOUND_WINSDK_VERSION)
    foreach(_root IN LISTS _VS_CANDIDATE_ROOTS)
        if(NOT _FOUND_WINSDK_VERSION)
            _defold_detect_winsdk_from_root("${_root}" _ver)
            if(_ver)
                set(_FOUND_WINSDK_VERSION "${_ver}")
            endif()
        endif()
    endforeach()
endif()
if(NOT _FOUND_WINSDK_VERSION)
    foreach(_sys IN "C:/Program Files (x86)" "C:/Program Files")
        if(NOT _FOUND_WINSDK_VERSION)
            _defold_detect_winsdk_from_root("${_sys}" _ver_sys)
            if(_ver_sys)
                set(_FOUND_WINSDK_VERSION "${_ver_sys}")
            endif()
        endif()
    endforeach()
endif()

# Local LLVM/Clang (clang++) if nothing else found
if(NOT _FOUND_CLANG_CL AND NOT _FOUND_MSVC_CL AND NOT _FOUND_LLVM_CLANGXX)
    # Prefer locally installed Visual Studio over LLVM/Clang (handled above)
    # Now look for a local LLVM install (prefer clang-cl)
    find_program(_CLANGCL clang-cl HINTS
        "C:/Program Files/LLVM/bin"
        "C:/Program Files (x86)/LLVM/bin"
    )
    if(_CLANGCL)
        set(_FOUND_CLANG_CL "${_CLANGCL}")
    else()
        find_program(_CLANGXX clang++ HINTS
            "C:/Program Files/LLVM/bin"
            "C:/Program Files (x86)/LLVM/bin"
        )
        if(_CLANGXX)
            set(_FOUND_LLVM_CLANGXX "${_CLANGXX}")
            get_filename_component(_clang_dir "${_CLANGXX}" DIRECTORY)
            find_program(_CLANG clang HINTS "${_clang_dir}")
            if(_CLANG)
                set(_FOUND_LLVM_CLANG "${_CLANG}")
            endif()
        endif()
    endif()

    # Try Git for Windows LLVM bundle (sometimes installed via VSCode toolchains)
    if(NOT _FOUND_LLVM_CLANGXX)
        find_program(_CLANGCL2 clang-cl)
        if(_CLANGCL2 AND NOT _FOUND_CLANG_CL)
            set(_FOUND_CLANG_CL "${_CLANGCL2}")
        endif()
        if(NOT _FOUND_CLANG_CL)
            find_program(_CLANGXX2 clang++)
            if(_CLANGXX2)
                set(_FOUND_LLVM_CLANGXX "${_CLANGXX2}")
            endif()
            find_program(_CLANG2 clang)
            if(NOT _FOUND_LLVM_CLANG AND _CLANG2)
                set(_FOUND_LLVM_CLANG "${_CLANG2}")
            endif()
        endif()
    endif()

    # Windows SDK version from system if not set
    if(NOT _FOUND_WINSDK_VERSION)
        _defold_detect_winsdk_from_root("C:/Program Files (x86)" _ver2)
        if(_ver2)
            set(_FOUND_WINSDK_VERSION "${_ver2}")
        endif()
    endif()
endif()

# As a last resort, if no Windows SDK version has been detected yet, try the system install
if(NOT _FOUND_WINSDK_VERSION)
    _defold_detect_winsdk_from_root("C:/Program Files (x86)" _ver3)
    if(_ver3)
        set(_FOUND_WINSDK_VERSION "${_ver3}")
    endif()
endif()

# Finalize: choose compilers respecting requested order:
# - Prefer packaged toolchains (handled by skipping local detection when packaged is present)
# - Otherwise prefer locally installed Visual Studio over local LLVM/Clang

if(_FOUND_MSVC_CL)
    defold_log("sdk_windows: Using MSVC cl: ${_FOUND_MSVC_CL}")
    # Cache discovered MSVC cl path
    set(DEFOLD_MSVC_CL "${_FOUND_MSVC_CL}" CACHE FILEPATH "Path to cl.exe (MSVC)" FORCE)
    if(NOT CMAKE_C_COMPILER)
        set(CMAKE_C_COMPILER "${_FOUND_MSVC_CL}" CACHE FILEPATH "MSVC C compiler" FORCE)
    endif()
    if(NOT CMAKE_CXX_COMPILER)
        set(CMAKE_CXX_COMPILER "${_FOUND_MSVC_CL}" CACHE FILEPATH "MSVC C++ compiler" FORCE)
    endif()
elseif(_FOUND_CLANG_CL)
    defold_log("sdk_windows: Using clang-cl: ${_FOUND_CLANG_CL}")
    if(NOT CMAKE_C_COMPILER)
        set(CMAKE_C_COMPILER "${_FOUND_CLANG_CL}" CACHE FILEPATH "LLVM C compiler (clang-cl)" FORCE)
    endif()
    if(NOT CMAKE_CXX_COMPILER)
        set(CMAKE_CXX_COMPILER "${_FOUND_CLANG_CL}" CACHE FILEPATH "LLVM C++ compiler (clang-cl)" FORCE)
    endif()
elseif(_FOUND_LLVM_CLANGXX)
    defold_log("sdk_windows: Using LLVM toolchain: ${_FOUND_LLVM_CLANGXX}")
    if(NOT CMAKE_CXX_COMPILER)
        set(CMAKE_CXX_COMPILER "${_FOUND_LLVM_CLANGXX}" CACHE FILEPATH "LLVM C++ compiler" FORCE)
    endif()
    if(NOT CMAKE_C_COMPILER)
        if(_FOUND_LLVM_CLANGXX MATCHES "clang-cl\.exe$")
            set(CMAKE_C_COMPILER "${_FOUND_LLVM_CLANGXX}" CACHE FILEPATH "LLVM C compiler (clang-cl)" FORCE)
        elseif(_FOUND_LLVM_CLANG)
            set(CMAKE_C_COMPILER "${_FOUND_LLVM_CLANG}" CACHE FILEPATH "LLVM clang" FORCE)
        else()
            find_program(_FALLBACK_CLANG clang)
            if(_FALLBACK_CLANG)
                set(CMAKE_C_COMPILER "${_FALLBACK_CLANG}" CACHE FILEPATH "LLVM clang" FORCE)
            endif()
        endif()
    endif()
else()
    message(WARNING "sdk_windows: No suitable MSVC or LLVM toolchain found. CMake default compilers will be used.")
endif()

# Set Windows SDK version if discovered (helps CMake locate SDK libs/headers)
if(_FOUND_WINSDK_VERSION)
    # CMake uses CMAKE_SYSTEM_VERSION to control chosen Windows SDK
    set(CMAKE_SYSTEM_VERSION "${_FOUND_WINSDK_VERSION}" CACHE STRING "Windows SDK version" FORCE)
    defold_log("sdk_windows: Windows SDK version: ${CMAKE_SYSTEM_VERSION}")
    # Cache discovered WinSDK version
    set(DEFOLD_WINSDK_VERSION "${_FOUND_WINSDK_VERSION}" CACHE STRING "Detected Windows SDK version" FORCE)
endif()

# Locate rc.exe and mt.exe inside the chosen Windows Kits folder
if(_FOUND_WINSDK_VERSION)
    set(_WSDK_CANDIDATE_ROOTS "")
    if(DEFINED DEFOLD_SDK_ROOT)
        set(_SDKS_DIR "${DEFOLD_SDK_ROOT}/ext/SDKs")
        if(EXISTS "${_SDKS_DIR}")
            defold_collect_packaged_roots("${_SDKS_DIR}" _wsdk_roots)
            list(APPEND _WSDK_CANDIDATE_ROOTS ${_wsdk_roots})
        endif()
    endif()
    # Always include system locations
    list(APPEND _WSDK_CANDIDATE_ROOTS "C:/Program Files (x86)" "C:/Program Files")
    list(REMOVE_DUPLICATES _WSDK_CANDIDATE_ROOTS)

    set(_FOUND_RC_EXE "")
    set(_FOUND_MT_EXE "")
    foreach(_root IN LISTS _WSDK_CANDIDATE_ROOTS)
        if(NOT _FOUND_RC_EXE OR NOT _FOUND_MT_EXE)
            _defold_locate_winsdk_tools_in_root("${_root}" "${_FOUND_WINSDK_VERSION}" "${_DEFOLD_WIN_ARCH}" _rc _mt)
            if(NOT _FOUND_RC_EXE AND _rc)
                set(_FOUND_RC_EXE "${_rc}")
            endif()
            if(NOT _FOUND_MT_EXE AND _mt)
                set(_FOUND_MT_EXE "${_mt}")
            endif()
        endif()
    endforeach()

    if(_FOUND_RC_EXE)
        set(CMAKE_RC_COMPILER "${_FOUND_RC_EXE}" CACHE FILEPATH "Windows Resource Compiler (rc.exe)" FORCE)
        defold_log("sdk_windows: Using rc.exe: ${CMAKE_RC_COMPILER}")
        set(DEFOLD_WINSDK_RC "${_FOUND_RC_EXE}" CACHE FILEPATH "Windows Resource Compiler (rc.exe)" FORCE)
    endif()
    if(_FOUND_MT_EXE)
        set(CMAKE_MT "${_FOUND_MT_EXE}" CACHE FILEPATH "Windows Manifest Tool (mt.exe)" FORCE)
        defold_log("sdk_windows: Using mt.exe: ${CMAKE_MT}")
        set(DEFOLD_WINSDK_MT "${_FOUND_MT_EXE}" CACHE FILEPATH "Windows Manifest Tool (mt.exe)" FORCE)
    endif()
endif()

# Locate base Windows libraries (e.g. kernel32.lib) inside the chosen Windows Kits folder
if(_FOUND_WINSDK_VERSION)
    set(_WSDK_CANDIDATE_ROOTS_LIB "")
    if(DEFINED DEFOLD_SDK_ROOT)
        set(_SDKS_DIR "${DEFOLD_SDK_ROOT}/ext/SDKs")
        if(EXISTS "${_SDKS_DIR}")
            list(APPEND _WSDK_CANDIDATE_ROOTS_LIB "${_SDKS_DIR}")
            file(GLOB _wsdk_children2 "${_SDKS_DIR}/*")
            foreach(_child IN LISTS _wsdk_children2)
                if(IS_DIRECTORY "${_child}")
                    list(APPEND _WSDK_CANDIDATE_ROOTS_LIB "${_child}")
                endif()
            endforeach()
        endif()
    endif()
    list(APPEND _WSDK_CANDIDATE_ROOTS_LIB "C:/Program Files (x86)" "C:/Program Files")
    list(REMOVE_DUPLICATES _WSDK_CANDIDATE_ROOTS_LIB)

    set(DEFOLD_WINSDK_LIB_UM_DIR "")
    set(DEFOLD_WINSDK_LIB_UCRT_DIR "")

    foreach(_root IN LISTS _WSDK_CANDIDATE_ROOTS_LIB)
        if(NOT DEFOLD_WINSDK_LIB_UM_DIR OR NOT DEFOLD_WINSDK_LIB_UCRT_DIR)
            _defold_locate_winsdk_lib_dirs_in_root("${_root}" "${_FOUND_WINSDK_VERSION}" "${_DEFOLD_WIN_ARCH}" _um _ucrt)
            if(NOT DEFOLD_WINSDK_LIB_UM_DIR AND _um)
                set(DEFOLD_WINSDK_LIB_UM_DIR "${_um}")
            endif()
            if(NOT DEFOLD_WINSDK_LIB_UCRT_DIR AND _ucrt)
                set(DEFOLD_WINSDK_LIB_UCRT_DIR "${_ucrt}")
            endif()
        endif()
    endforeach()

    if(DEFOLD_WINSDK_LIB_UM_DIR)
        defold_log("sdk_windows: WindowsKits UM libs: ${DEFOLD_WINSDK_LIB_UM_DIR}")
        list(APPEND CMAKE_LIBRARY_PATH "${DEFOLD_WINSDK_LIB_UM_DIR}")
        set(DEFOLD_WINSDK_LIB_UM_DIR "${DEFOLD_WINSDK_LIB_UM_DIR}" CACHE PATH "WindowsKits UM lib directory" FORCE)
    endif()
    if(DEFOLD_WINSDK_LIB_UCRT_DIR)
        defold_log("sdk_windows: WindowsKits UCRT libs: ${DEFOLD_WINSDK_LIB_UCRT_DIR}")
        list(APPEND CMAKE_LIBRARY_PATH "${DEFOLD_WINSDK_LIB_UCRT_DIR}")
        set(DEFOLD_WINSDK_LIB_UCRT_DIR "${DEFOLD_WINSDK_LIB_UCRT_DIR}" CACHE PATH "WindowsKits UCRT lib directory" FORCE)
    endif()

    # Collect /LIBPATH flags for linker (affects try_compile checks too)
    if(NOT DEFINED _DEFOLD_LINK_LIBPATH_FLAGS)
        set(_DEFOLD_LINK_LIBPATH_FLAGS "")
    endif()
    if(DEFOLD_WINSDK_LIB_UCRT_DIR)
        list(APPEND _DEFOLD_LINK_LIBPATH_FLAGS "/LIBPATH:\"${DEFOLD_WINSDK_LIB_UCRT_DIR}\"")
    endif()
    if(DEFOLD_WINSDK_LIB_UM_DIR)
        list(APPEND _DEFOLD_LINK_LIBPATH_FLAGS "/LIBPATH:\"${DEFOLD_WINSDK_LIB_UM_DIR}\"")
    endif()
endif()

# Locate Windows Kits include directories and add to include paths and compiler flags
if(_FOUND_WINSDK_VERSION)
    set(DEFOLD_WINSDK_INCLUDE_SHARED "")
    set(DEFOLD_WINSDK_INCLUDE_UM "")
    set(DEFOLD_WINSDK_INCLUDE_UCRT "")
    set(DEFOLD_WINSDK_INCLUDE_WINRT "")

    set(_WSDK_INC_CANDIDATE_ROOTS "")
    if(DEFINED DEFOLD_SDK_ROOT)
        set(_SDKS_DIR "${DEFOLD_SDK_ROOT}/ext/SDKs")
        if(EXISTS "${_SDKS_DIR}")
            list(APPEND _WSDK_INC_CANDIDATE_ROOTS "${_SDKS_DIR}")
            file(GLOB _wsdk_children_inc "${_SDKS_DIR}/*")
            foreach(_child IN LISTS _wsdk_children_inc)
                if(IS_DIRECTORY "${_child}")
                    list(APPEND _WSDK_INC_CANDIDATE_ROOTS "${_child}")
                endif()
            endforeach()
        endif()
    endif()
    list(APPEND _WSDK_INC_CANDIDATE_ROOTS "C:/Program Files (x86)" "C:/Program Files")
    list(REMOVE_DUPLICATES _WSDK_INC_CANDIDATE_ROOTS)

    foreach(_root IN LISTS _WSDK_INC_CANDIDATE_ROOTS)
        foreach(_winsdk_layout "Windows Kits" "WindowsKits")
            if(NOT (DEFOLD_WINSDK_INCLUDE_SHARED AND DEFOLD_WINSDK_INCLUDE_UM AND DEFOLD_WINSDK_INCLUDE_UCRT))
                set(_inc_root "${_root}/${_winsdk_layout}/10/Include/${_FOUND_WINSDK_VERSION}")
                if(EXISTS "${_inc_root}")
                    if(NOT DEFOLD_WINSDK_INCLUDE_SHARED AND EXISTS "${_inc_root}/shared")
                        set(DEFOLD_WINSDK_INCLUDE_SHARED "${_inc_root}/shared")
                    endif()
                    if(NOT DEFOLD_WINSDK_INCLUDE_UM AND EXISTS "${_inc_root}/um")
                        set(DEFOLD_WINSDK_INCLUDE_UM "${_inc_root}/um")
                    endif()
                    if(NOT DEFOLD_WINSDK_INCLUDE_UCRT AND EXISTS "${_inc_root}/ucrt")
                        set(DEFOLD_WINSDK_INCLUDE_UCRT "${_inc_root}/ucrt")
                    endif()
                    if(NOT DEFOLD_WINSDK_INCLUDE_WINRT AND EXISTS "${_inc_root}/winrt")
                        set(DEFOLD_WINSDK_INCLUDE_WINRT "${_inc_root}/winrt")
                    endif()
                endif()
            endif()
        endforeach()
    endforeach()

    # Log and add to include search paths
    set(_DEFOLD_INCLUDE_FLAGS "")
    set(_DEFOLD_INC_DIRS)
    foreach(_dir_var DEFOLD_WINSDK_INCLUDE_SHARED DEFOLD_WINSDK_INCLUDE_UCRT DEFOLD_WINSDK_INCLUDE_UM DEFOLD_WINSDK_INCLUDE_WINRT)
        if(${_dir_var})
            defold_log("sdk_windows: WindowsKits include: ${${_dir_var}}")
            list(APPEND CMAKE_INCLUDE_PATH "${${_dir_var}}")
            list(APPEND _DEFOLD_INCLUDE_FLAGS "/I\"${${_dir_var}}\"")
            list(APPEND _DEFOLD_INC_DIRS "${${_dir_var}}")
            # Cache include dirs
            if(_dir_var STREQUAL "DEFOLD_WINSDK_INCLUDE_SHARED")
                set(DEFOLD_WINSDK_INCLUDE_SHARED "${DEFOLD_WINSDK_INCLUDE_SHARED}" CACHE PATH "WindowsKits shared include directory" FORCE)
            elseif(_dir_var STREQUAL "DEFOLD_WINSDK_INCLUDE_UCRT")
                set(DEFOLD_WINSDK_INCLUDE_UCRT "${DEFOLD_WINSDK_INCLUDE_UCRT}" CACHE PATH "WindowsKits UCRT include directory" FORCE)
            elseif(_dir_var STREQUAL "DEFOLD_WINSDK_INCLUDE_UM")
                set(DEFOLD_WINSDK_INCLUDE_UM "${DEFOLD_WINSDK_INCLUDE_UM}" CACHE PATH "WindowsKits UM include directory" FORCE)
            elseif(_dir_var STREQUAL "DEFOLD_WINSDK_INCLUDE_WINRT")
                set(DEFOLD_WINSDK_INCLUDE_WINRT "${DEFOLD_WINSDK_INCLUDE_WINRT}" CACHE PATH "WindowsKits WinRT include directory" FORCE)
            endif()
        endif()
    endforeach()

    if(_DEFOLD_INCLUDE_FLAGS)
        string(JOIN " " _DEFOLD_INCLUDE_FLAGS_STR ${_DEFOLD_INCLUDE_FLAGS})
        # Apply include directories to targets (SYSTEM to reduce warnings)
        if(_DEFOLD_INC_DIRS)
            target_include_directories(defold_sdk SYSTEM INTERFACE ${_DEFOLD_INC_DIRS})
        endif()
        # Propagate to try_compile checks
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${_DEFOLD_INCLUDE_FLAGS_STR}")
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${_DEFOLD_INCLUDE_FLAGS_STR}")
        set(_DEFOLD_TRY_VARS CMAKE_C_FLAGS CMAKE_CXX_FLAGS)
        if(DEFINED CMAKE_TRY_COMPILE_PLATFORM_VARIABLES)
            list(APPEND CMAKE_TRY_COMPILE_PLATFORM_VARIABLES ${_DEFOLD_TRY_VARS})
            list(REMOVE_DUPLICATES CMAKE_TRY_COMPILE_PLATFORM_VARIABLES)
        else()
            set(CMAKE_TRY_COMPILE_PLATFORM_VARIABLES "${_DEFOLD_TRY_VARS}")
        endif()
    endif()
endif()

# Locate MSVC include directory (for vcruntime.h) and add it to include paths and compiler flags
set(DEFOLD_MSVC_INCLUDE_DIR "")
if(NOT DEFOLD_MSVC_INCLUDE_DIR AND DEFOLD_MSVC_LIB_DIR)
    # Try derive include from located MSVC lib dir
    get_filename_component(_lib_parent "${DEFOLD_MSVC_LIB_DIR}" DIRECTORY)      # .../lib
    get_filename_component(_msvc_ver_dir "${_lib_parent}" DIRECTORY)            # .../VC/Tools/MSVC/<ver>
    set(_cand_inc "${_msvc_ver_dir}/include")
    if(EXISTS "${_cand_inc}/vcruntime.h")
        set(DEFOLD_MSVC_INCLUDE_DIR "${_cand_inc}")
    endif()
endif()

if(NOT DEFOLD_MSVC_INCLUDE_DIR AND _FOUND_MSVC_CL)
    _defold_locate_msvc_include_dir_from_cl("${_FOUND_MSVC_CL}" _msvc_inc_dir)
    if(_msvc_inc_dir)
        set(DEFOLD_MSVC_INCLUDE_DIR "${_msvc_inc_dir}")
    endif()
endif()

if(NOT DEFOLD_MSVC_INCLUDE_DIR)
    # Fallback: search common Visual Studio roots (packaged and system)
    set(_MSVC_INC_CANDIDATE_ROOTS "")
    if(DEFINED DEFOLD_SDK_ROOT)
        set(_SDKS_DIR "${DEFOLD_SDK_ROOT}/ext/SDKs")
        if(EXISTS "${_SDKS_DIR}")
            list(APPEND _MSVC_INC_CANDIDATE_ROOTS "${_SDKS_DIR}")
            file(GLOB _vs_children_inc2 "${_SDKS_DIR}/*")
            foreach(_child IN LISTS _vs_children_inc2)
                if(IS_DIRECTORY "${_child}")
                    list(APPEND _MSVC_INC_CANDIDATE_ROOTS "${_child}")
                endif()
            endforeach()
        endif()
    endif()
    list(APPEND _MSVC_INC_CANDIDATE_ROOTS
        "C:/Program Files (x86)/Microsoft Visual Studio/2022/BuildTools"
        "C:/Program Files (x86)/Microsoft Visual Studio/2022/Community"
        "C:/Program Files (x86)/Microsoft Visual Studio/2019/BuildTools"
        "C:/Program Files (x86)/Microsoft Visual Studio/2019/Community"
    )
    list(REMOVE_DUPLICATES _MSVC_INC_CANDIDATE_ROOTS)

    foreach(_root IN LISTS _MSVC_INC_CANDIDATE_ROOTS)
        if(DEFOLD_MSVC_INCLUDE_DIR)
            break()
        endif()
        file(GLOB _msvc_ver_dirs2 "${_root}/VC/Tools/MSVC/*")
        if(_msvc_ver_dirs2)
            list(SORT _msvc_ver_dirs2)
            list(REVERSE _msvc_ver_dirs2)
            foreach(_verdir IN LISTS _msvc_ver_dirs2)
                set(_cand_inc2 "${_verdir}/include")
                if(EXISTS "${_cand_inc2}/vcruntime.h")
                    set(DEFOLD_MSVC_INCLUDE_DIR "${_cand_inc2}")
                    break()
                endif()
            endforeach()
        endif()
    endforeach()
endif()

if(DEFOLD_MSVC_INCLUDE_DIR)
    defold_log("sdk_windows: MSVC include: ${DEFOLD_MSVC_INCLUDE_DIR}")
    list(APPEND CMAKE_INCLUDE_PATH "${DEFOLD_MSVC_INCLUDE_DIR}")
    # Target-scoped include
    target_include_directories(defold_sdk SYSTEM INTERFACE "${DEFOLD_MSVC_INCLUDE_DIR}")
    set(DEFOLD_MSVC_INCLUDE_DIR "${DEFOLD_MSVC_INCLUDE_DIR}" CACHE PATH "MSVC include directory (contains vcruntime.h)" FORCE)
    # Propagate to try_compile
    set(CMAKE_C_FLAGS   "${CMAKE_C_FLAGS} /I\"${DEFOLD_MSVC_INCLUDE_DIR}\"")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /I\"${DEFOLD_MSVC_INCLUDE_DIR}\"")
    set(_DEFOLD_TRY_VARS CMAKE_C_FLAGS CMAKE_CXX_FLAGS)
    if(DEFINED CMAKE_TRY_COMPILE_PLATFORM_VARIABLES)
        list(APPEND CMAKE_TRY_COMPILE_PLATFORM_VARIABLES ${_DEFOLD_TRY_VARS})
        list(REMOVE_DUPLICATES CMAKE_TRY_COMPILE_PLATFORM_VARIABLES)
    else()
        set(CMAKE_TRY_COMPILE_PLATFORM_VARIABLES "${_DEFOLD_TRY_VARS}")
    endif()
endif()


# Locate MSVC runtime/libs directory (for LIBCMT.lib etc.) and add to lib paths and linker flags
set(DEFOLD_MSVC_LIB_DIR "")
if(_FOUND_MSVC_CL)
    _defold_locate_msvc_lib_dir_from_cl("${_FOUND_MSVC_CL}" "${_DEFOLD_WIN_ARCH}" _msvc_lib_dir)
    if(_msvc_lib_dir)
        set(DEFOLD_MSVC_LIB_DIR "${_msvc_lib_dir}")
    endif()
endif()

if(NOT DEFOLD_MSVC_LIB_DIR)
    # Try to locate in common Visual Studio roots (packaged and system)
    set(_MSVC_CANDIDATE_ROOTS "")
    if(DEFINED DEFOLD_SDK_ROOT)
        set(_SDKS_DIR "${DEFOLD_SDK_ROOT}/ext/SDKs")
        if(EXISTS "${_SDKS_DIR}")
            list(APPEND _MSVC_CANDIDATE_ROOTS "${_SDKS_DIR}")
            file(GLOB _vs_children "${_SDKS_DIR}/*")
            foreach(_child IN LISTS _vs_children)
                if(IS_DIRECTORY "${_child}")
                    list(APPEND _MSVC_CANDIDATE_ROOTS "${_child}")
                endif()
            endforeach()
        endif()
    endif()
    list(APPEND _MSVC_CANDIDATE_ROOTS
        "C:/Program Files (x86)/Microsoft Visual Studio/2022/BuildTools"
        "C:/Program Files (x86)/Microsoft Visual Studio/2022/Community"
        "C:/Program Files (x86)/Microsoft Visual Studio/2019/BuildTools"
        "C:/Program Files (x86)/Microsoft Visual Studio/2019/Community"
    )
    list(REMOVE_DUPLICATES _MSVC_CANDIDATE_ROOTS)

    foreach(_root IN LISTS _MSVC_CANDIDATE_ROOTS)
        if(DEFOLD_MSVC_LIB_DIR)
            break()
        endif()
        file(GLOB _msvc_ver_dirs "${_root}/VC/Tools/MSVC/*")
        if(_msvc_ver_dirs)
            list(SORT _msvc_ver_dirs)
            list(REVERSE _msvc_ver_dirs)
            foreach(_verdir IN LISTS _msvc_ver_dirs)
                foreach(_layout IN "lib/${_DEFOLD_WIN_ARCH}" "lib/onecore/${_DEFOLD_WIN_ARCH}")
                    set(_cand "${_verdir}/${_layout}")
                    if(EXISTS "${_cand}/libcmt.lib")
                        set(DEFOLD_MSVC_LIB_DIR "${_cand}")
                        break()
                    endif()
                endforeach()
                if(DEFOLD_MSVC_LIB_DIR)
                    break()
                endif()
            endforeach()
        endif()
    endforeach()
endif()

if(DEFOLD_MSVC_LIB_DIR)
    defold_log("sdk_windows: MSVC libs: ${DEFOLD_MSVC_LIB_DIR}")
    list(APPEND CMAKE_LIBRARY_PATH "${DEFOLD_MSVC_LIB_DIR}")
    set(DEFOLD_MSVC_LIB_DIR "${DEFOLD_MSVC_LIB_DIR}" CACHE PATH "MSVC library directory (contains LIBCMT.lib)" FORCE)
    # Add to linker flags to affect try_compile checks
    if(NOT DEFINED _DEFOLD_LINK_LIBPATH_FLAGS)
        set(_DEFOLD_LINK_LIBPATH_FLAGS "")
    endif()
    list(APPEND _DEFOLD_LINK_LIBPATH_FLAGS "/LIBPATH:\"${DEFOLD_MSVC_LIB_DIR}\"")
endif()

# Apply collected /LIBPATH flags to all linker types so they take effect early (e.g. during compiler checks)
if(_DEFOLD_LINK_LIBPATH_FLAGS)
    string(JOIN " " _DEFOLD_LINK_LIBPATH_FLAGS_STR ${_DEFOLD_LINK_LIBPATH_FLAGS})
    # Apply to this build (target-scoped)
    target_link_options(defold_sdk INTERFACE ${_DEFOLD_LINK_LIBPATH_FLAGS})
    # Propagate to try_compile
    set(CMAKE_EXE_LINKER_FLAGS    "${CMAKE_EXE_LINKER_FLAGS} ${_DEFOLD_LINK_LIBPATH_FLAGS_STR}")
    set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} ${_DEFOLD_LINK_LIBPATH_FLAGS_STR}")
    set(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} ${_DEFOLD_LINK_LIBPATH_FLAGS_STR}")
    set(_DEFOLD_TRY_VARS CMAKE_EXE_LINKER_FLAGS CMAKE_SHARED_LINKER_FLAGS CMAKE_MODULE_LINKER_FLAGS)
    if(DEFINED CMAKE_TRY_COMPILE_PLATFORM_VARIABLES)
        list(APPEND CMAKE_TRY_COMPILE_PLATFORM_VARIABLES ${_DEFOLD_TRY_VARS})
        list(REMOVE_DUPLICATES CMAKE_TRY_COMPILE_PLATFORM_VARIABLES)
    else()
        set(CMAKE_TRY_COMPILE_PLATFORM_VARIABLES "${_DEFOLD_TRY_VARS}")
    endif()
endif()
