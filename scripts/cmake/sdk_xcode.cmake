message("sdk_xcode.cmake:")

# Detect packaged Xcode toolchain in ${DEFOLD_SDK_ROOT}/ext/SDKs and set compilers

if(NOT DEFINED DEFOLD_SDK_ROOT)
    message(DEBUG "sdk_xcode: DEFOLD_SDK_ROOT is not set; skipping Xcode toolchain detection")
    return()
endif()

set(_SDKS_DIR "${DEFOLD_SDK_ROOT}/ext/SDKs")
if(NOT EXISTS "${_SDKS_DIR}")
    message(DEBUG "sdk_xcode: SDKs directory not found: ${_SDKS_DIR}")
    return()
endif()

file(GLOB _XCODE_TOOLCHAINS "${_SDKS_DIR}/XcodeDefault*.xctoolchain")
if(NOT _XCODE_TOOLCHAINS)
    message(DEBUG "sdk_xcode: No packaged Xcode toolchain found in ${_SDKS_DIR}")
    return()
endif()

list(SORT _XCODE_TOOLCHAINS)
list(REVERSE _XCODE_TOOLCHAINS)
set(_XCODE_TOOLCHAIN "")
set(_XCODE_CXX "")
set(_XCODE_CC  "")
foreach(_tc ${_XCODE_TOOLCHAINS})
    set(_cxx "${_tc}/usr/bin/clang++")
    set(_cc  "${_tc}/usr/bin/clang")
    if(EXISTS "${_cxx}")
        set(_XCODE_TOOLCHAIN "${_tc}")
        set(_XCODE_CXX "${_cxx}")
        if(EXISTS "${_cc}")
            set(_XCODE_CC "${_cc}")
        endif()
        break()
    endif()
endforeach()

if(_XCODE_TOOLCHAIN AND _XCODE_CXX)
    message(STATUS "sdk_xcode: Using packaged Xcode toolchain: ${_XCODE_TOOLCHAIN}")
    # Set C++ compiler to packaged clang++ (cache, force to override defaults)
    set(CMAKE_CXX_COMPILER "${_XCODE_CXX}" CACHE FILEPATH "Packaged Xcode clang++" FORCE)
    # Optionally set C compiler if present (kept optional to avoid surprising overrides)
    if(_XCODE_CC)
        set(CMAKE_C_COMPILER "${_XCODE_CC}" CACHE FILEPATH "Packaged Xcode clang" FORCE)
    endif()
else()
    message(DEBUG "sdk_xcode: Failed to locate clang++ inside packaged Xcode toolchain")
endif()

