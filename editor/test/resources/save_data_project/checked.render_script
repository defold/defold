-- Copyright 2020-2025 The Defold Foundation
-- Copyright 2014-2020 King
-- Copyright 2009-2014 Ragnar Svensson, Christian Murray
-- Licensed under the Defold License version 1.0 (the "License"); you may not use
-- this file except in compliance with the License.
--
-- You may obtain a copy of the License, together with FAQs at
-- https://www.defold.com/license
--
-- Unless required by applicable law or agreed to in writing, software distributed
-- under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
-- CONDITIONS OF ANY KIND, either express or implied. See the License for the
-- specific language governing permissions and limitations under the License.

--
-- projection that centers content with maintained aspect ratio and optional zoom
--
local function fixed_projection(near, far, zoom)
	local projected_width = render.get_window_width() / (zoom or 1)
	local projected_height = render.get_window_height() / (zoom or 1)
	local xoffset = -(projected_width - render.get_width()) / 2
	local yoffset = -(projected_height - render.get_height()) / 2
	return vmath.matrix4_orthographic(xoffset, xoffset + projected_width, yoffset, yoffset + projected_height, near, far)
end
--
-- projection that centers and fits content with maintained aspect ratio
--
local function fixed_fit_projection(near, far)
	local width = render.get_width()
	local height = render.get_height()
	local window_width = render.get_window_width()
	local window_height = render.get_window_height()
	local zoom = math.min(window_width / width, window_height / height)
	return fixed_projection(near, far, zoom)
end
--
-- projection that stretches content
--
local function stretch_projection(near, far)
	return vmath.matrix4_orthographic(0, render.get_width(), 0, render.get_height(), near, far)
end

local function get_projection(self)
	return self.projection_fn(self.near, self.far, self.zoom)
end

function init(self)
	self.tile_pred = render.predicate({"tile"})
	self.gui_pred = render.predicate({"gui"})
	self.text_pred = render.predicate({"text"})
	self.particle_pred = render.predicate({"particle"})

	self.clear_color = vmath.vector4(0, 0, 0, 0)
	self.clear_color.x = sys.get_config("render.clear_color_red", 0)
	self.clear_color.y = sys.get_config("render.clear_color_green", 0)
	self.clear_color.z = sys.get_config("render.clear_color_blue", 0)
	self.clear_color.w = sys.get_config("render.clear_color_alpha", 0)

	self.view = vmath.matrix4()

	-- default is stretch projection. copy from builtins and change for different projection
	-- or send a message to the render script to change projection:
	-- msg.post("@render:", "use_stretch_projection", { near = -1, far = 1 })
	-- msg.post("@render:", "use_fixed_projection", { near = -1, far = 1, zoom = 2 })
	-- msg.post("@render:", "use_fixed_fit_projection", { near = -1, far = 1 })
	self.near = -1
	self.far = 1
	self.projection_fn = stretch_projection
end

function update(self)
	local window_width = render.get_window_width()
	local window_height = render.get_window_height()
	if window_width == 0 or window_height == 0 then
		return
	end

	-- clear screen buffers
	--
	render.set_depth_mask(true)
	render.set_stencil_mask(0xff)
	render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})

	-- render world (sprites, tilemaps, particles etc)
	--
	local proj = get_projection(self)
	local frustum = proj * self.view

	render.set_viewport(0, 0, window_width, window_height)
	render.set_view(self.view)
	render.set_projection(proj)

	render.set_depth_mask(false)
	render.disable_state(render.STATE_DEPTH_TEST)
	render.disable_state(render.STATE_STENCIL_TEST)
	render.enable_state(render.STATE_BLEND)
	render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
	render.disable_state(render.STATE_CULL_FACE)

	render.draw(self.tile_pred, {frustum = frustum})
	render.draw(self.particle_pred, {frustum = frustum})
	render.draw_debug3d()

	-- render GUI
	--
	local view_gui = vmath.matrix4()
	local proj_gui = vmath.matrix4_orthographic(0, window_width, 0, window_height, -1, 1)
	local frustum_gui = proj_gui * view_gui

	render.set_view(view_gui)
	render.set_projection(proj_gui)

	render.enable_state(render.STATE_STENCIL_TEST)
	render.draw(self.gui_pred, {frustum = frustum_gui})
	render.draw(self.text_pred, {frustum = frustum_gui})
	render.disable_state(render.STATE_STENCIL_TEST)
end

function on_message(self, message_id, message)
	if message_id == hash("clear_color") then
		self.clear_color = message.color
	elseif message_id == hash("set_view_projection") then
		self.view = message.view
		self.projection = message.projection
	elseif message_id == hash("use_camera_projection") then
		self.projection_fn = function() return self.projection or vmath.matrix4() end
	elseif message_id == hash("use_stretch_projection") then
		self.near = message.near or -1
		self.far = message.far or 1
		self.projection_fn = stretch_projection
	elseif message_id == hash("use_fixed_projection") then
		self.near = message.near or -1
		self.far = message.far or 1
		self.zoom = message.zoom or 1
		self.projection_fn = fixed_projection
	elseif message_id == hash("use_fixed_fit_projection") then
		self.near = message.near or -1
		self.far = message.far or 1
		self.projection_fn = fixed_fit_projection
	end
end
