-- Copyright 2020-2025 The Defold Foundation
-- Copyright 2014-2020 King
-- Copyright 2009-2014 Ragnar Svensson, Christian Murray
-- Licensed under the Defold License version 1.0 (the "License"); you may not use
-- this file except in compliance with the License.
--
-- You may obtain a copy of the License, together with FAQs at
-- https://www.defold.com/license
--
-- Unless required by applicable law or agreed to in writing, software distributed
-- under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
-- CONDITIONS OF ANY KIND, either express or implied. See the License for the
-- specific language governing permissions and limitations under the License.

-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
-- #### main_menu ####

local function main_menu_on_enter(self)
	msg.post("#gui", "enable")
end

local function main_menu_on_exit(self)
	msg.post("#gui", "disable")
end

local function main_menu_on_message(self, message_id, message)
	if message_id == hash("new_game") then
		if self.session_active then
			msg.post("#session_proxy", "final")
			msg.post("#session_proxy", "unload")
		end
		msg.post("#session_proxy", "load")
		msg.post("#session_proxy", "init")
		self.session_active = true
		self.next_state = self.states.session
	elseif message_id == hash("quit") then
		msg.post("@system:", "exit", {code = 0})
	end
end

-- #### session #####

local function session_on_enter(self)
	msg.post("#session_proxy", "enable")
end

local function session_on_exit(self)
	msg.post("#session_proxy", "disable")
	if not self.session_active then
		msg.post("#session_proxy", "final")
		msg.post("#session_proxy", "unload")
	end
end

local function session_on_message(self, message_id, message)
	if message_id == hash("session_done") then
		print("score: " .. message.score)
		if #self.highscores == 10 then
			table.remove(self.highscores, 10)
		end
		table.insert(self.highscores, {name = "", score = message.score})
		table.sort(self.highscores, function(lhs, rhs) return lhs.score < rhs.score end)
		msg.post("#gui", "set_highscores", {highscores = self.highscores})
		self.session_active = false
		self.next_state = self.states.main_menu
	end
end

-- #### set-up ####

function init(self)
	self.states = {
		main_menu = {
			name = "main_menu",
			on_enter = main_menu_on_enter,
			on_exit = main_menu_on_exit,
			on_message = main_menu_on_message
		},
		session = {
			name = "session",
			on_enter = session_on_enter,
			on_exit = session_on_exit,
			on_message = session_on_message
		}
	}
	self.next_state = self.states.main_menu
	msg.post(".", "acquire_input_focus")
	self.hs_file = sys.get_save_file("arkanoid", "highscores")
	self.highscores = sys.load(self.hs_file)
	msg.post("#gui", "set_highscores", {highscores = self.highscores})
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if action_id == hash("profiler_toggle") and action.pressed then
		msg.post("@system:", "toggle_profile")
		return true
	end
	return false
end
