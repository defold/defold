-- Copyright 2020-2025 The Defold Foundation
-- Copyright 2014-2020 King
-- Copyright 2009-2014 Ragnar Svensson, Christian Murray
-- Licensed under the Defold License version 1.0 (the "License"); you may not use
-- this file except in compliance with the License.
--
-- You may obtain a copy of the License, together with FAQs at
-- https://www.defold.com/license
--
-- Unless required by applicable law or agreed to in writing, software distributed
-- under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
-- CONDITIONS OF ANY KIND, either express or implied. See the License for the
-- specific language governing permissions and limitations under the License.

-- #### NORMAL ####

local function normal_on_enter(self)
	msg.post("#level01_proxy", "load")
	msg.post("#level01_proxy", "init")
	msg.post("#level01_proxy", "enable")
end

local function normal_update(self, dt)
	if self.block_count == 0 then
		self.next_state = self.states.win
	end
end

local function normal_on_message(self, message_id, message)
	if message_id == hash("block_destroyed") then
		self.block_count = self.block_count - 1
		self.score = self.score + message.score
		msg.post("hud#gui", "inc_score", {score = message.score, position = message.position})
	elseif message_id == hash("ball_lost") then
		self.next_state = self.states.fail
	end
end

-- #### FAIL #####

local function fail_on_enter(self)
	self.timer = 3
end

local function fail_on_exit(self)
end

local function end_session(self)
	msg.post("main:/main#script", "session_done", {score = self.score})
end

local function fail_update(self, dt)
	msg.post("@render:", "draw_text", {text = "Fail!", position = vmath.vector3(300, 300, 0)})
	self.timer = self.timer - dt
	if self.timer < 0 then
		end_session(self)
	end
end

local function fail_on_input(self, action_id, action)
	if action_id == hash("ok") then
		end_session(self)
	end
	return true
end

-- #### WIN ####

local function win_on_enter(self)
	self.timer = 3
end

local function win_on_exit(self)
end

local function win_update(self, dt)
	msg.post("@render:", "draw_text", {text = "Success!", position = vmath.vector3(300, 300, 0)})
	self.timer = self.timer - dt
	if self.timer < 0 then
		end_session(self)
	end
end

local function win_on_input(self, action_id, action)
	if action_id == hash("ok") then
		end_session(self)
	end
	return true
end

-- #### SET UP ####

function init(self)
	self.block_count = nil
	self.states = {
		normal = {
			name = "normal",
			on_enter = normal_on_enter,
			update = normal_update,
			on_message = normal_on_message
		},
		fail = {
			name = "fail",
			on_enter = fail_on_enter,
			on_exit = fail_on_exit,
			update = fail_update,
			on_input = fail_on_input
		},
		win = {
			name = "win",
			on_enter = win_on_enter,
			on_exit = win_on_exit,
			update = win_update,
			on_input = win_on_input
		}
	}
    msg.post(".", "acquire_input_focus")
    self.score = 0
	self.next_state = self.states.normal
end

function update(self, dt)
	if self.next_state then
		if self.state then
			if self.state.on_exit then
				self.state.on_exit(self)
			end
		end
		self.state = self.next_state
		self.next_state = nil
		if self.state.on_enter then
			self.state.on_enter(self)
		end
	end
	if self.state.update then
		self.state.update(self, dt)
	end
end

function on_message(self, message_id, message)
	if message_id == hash("count_block") then
		if self.block_count == nil then
			self.block_count = 0
		end
		self.block_count = self.block_count + 1
	elseif self.state and self.state.on_message then
		self.state.on_message(self, message_id, message)
	end
end

function on_input(self, action_id, action)
	if self.state and self.state.on_input then
		return self.state.on_input(self, action_id, action)
	end
	return false
end
