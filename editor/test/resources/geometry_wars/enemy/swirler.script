-- Copyright 2020-2025 The Defold Foundation
-- Copyright 2014-2020 King
-- Copyright 2009-2014 Ragnar Svensson, Christian Murray
-- Licensed under the Defold License version 1.0 (the "License"); you may not use
-- this file except in compliance with the License.
--
-- You may obtain a copy of the License, together with FAQs at
-- https://www.defold.com/license
--
-- Unless required by applicable law or agreed to in writing, software distributed
-- under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
-- CONDITIONS OF ANY KIND, either express or implied. See the License for the
-- specific language governing permissions and limitations under the License.

local level_util = require "level.level_util"
local dynamics = require "shared.dynamics"

local color = vmath.vector4(1, 0.2, 0.3, 1)
local particle_color = vmath.vector4(1, 0.2, 0.3, 1)

local max_speed = 400
local max_speed_sq = max_speed * max_speed
local swirl_speed = 600
local death_duration = 2
local spawn_duration = 0.8
local spawn_bob_rate = 5
local spawn_bob_mag = 0.5

function init(self)
	self.timer = 0
	self.velocity = vmath.vector3(0, 0, 0)
	sprite.set_constant("#sprite", "tint", color)
	sprite.set_constant("#light_mask", "tint", color)
	self.target = go.get_world_position("/player/player")
	self.spawning = true
	self.spawn_timer = spawn_duration
	self.dynamics = dynamics.init()
end

function update(self, dt)
	if self.spawning then
		self.spawn_timer = self.spawn_timer - dt
		if self.spawn_timer < 0 then
			self.spawning = false
		else
			local bounce_t = self.spawn_timer * (spawn_bob_rate / spawn_duration)
			bounce_t = bounce_t - math.floor(bounce_t)
			msg.post("#sprite", "set_scale", {scale = vmath.vector3(1 + bounce_t * spawn_bob_mag, 1 + bounce_t * spawn_bob_mag, 1)})
		end
		return
	end
	self.target = go.get_world_position("/player/player")
	self.timer = self.timer + dt
	-- locomotion
	local p = go.get_position()
	-- chase
	local v = vmath.vector3()
	if self.target then
		local delta = self.target - p
		if vmath.length_sqr(delta) > 0 then
			local dir = vmath.normalize(delta)
			local speed = math.max(0, vmath.dot(self.velocity, dir))
			local target_vel = dir * (max_speed - speed)
			local t = self.timer * 2 * math.pi
			local swirl_vel = vmath.vector3(math.cos(t), math.sin(t), 0) * swirl_speed
			v = swirl_vel + target_vel
		end
	end
	-- boundary
	if vmath.length_sqr(v) > max_speed_sq then
		v = vmath.normalize(v) * max_speed
	end
	self.velocity = dynamics.update(self.dynamics, self.velocity, dt)
	-- integration
	p = p + (self.velocity + v) * dt
	go.set_position(level_util.clamp(p))
end

function on_message(self, message_id, message, sender)
	if message_id == hash("transform_response") then
		self.target = message.world_position
	elseif message_id == hash("collision_response") then
		if message.group == hash("bullet") or message.group == hash("black_hole") then
			msg.post("level#script", "enemy_dead", {value = 100, position = go.get_position()})
            particlefx.play("#particlefx")
            particlefx.play("#particlefx_light")
			go.delete()
		end
	else
		if not self.spawning then
			dynamics.on_message(self.dynamics, message_id, message, sender)
		end
	end
end

function on_input(self, action_id, action)
    -- Add input-handling code here
    -- Remove this function if not needed
end

function on_reload(self)
    -- Add reload-handling code here
    -- Remove this function if not needed
end
