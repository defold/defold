-- Copyright 2020-2025 The Defold Foundation
-- Copyright 2014-2020 King
-- Copyright 2009-2014 Ragnar Svensson, Christian Murray
-- Licensed under the Defold License version 1.0 (the "License"); you may not use
-- this file except in compliance with the License.
--
-- You may obtain a copy of the License, together with FAQs at
-- https://www.defold.com/license
--
-- Unless required by applicable law or agreed to in writing, software distributed
-- under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
-- CONDITIONS OF ANY KIND, either express or implied. See the License for the
-- specific language governing permissions and limitations under the License.

local level_util = require "level.level_util"
local util = require "shared.util"

local attractor_count = 4
local attractor_dist = 100
local attractor_dist_sq = attractor_dist * attractor_dist
local attractor_decay_speed = 5

function init(self)
	self.phase = 0
	self.impacts = {}
	self.attractors = {}
	self.color_hue = 0
	self.color = vmath.vector4()
	self.timer = 0
	--msg.post("#sound", "play_sound")
	print("level started")
	self.log_delay = 5
	self.logged_time = false
end

local function update_attractors(self, dt)
	for i,v in ipairs(self.impacts) do
		local mag = v[1]
		local imp_p = v[2]
		local found = false
		for j,u in ipairs(self.attractors) do
			local att_p = u[3]
			if vmath.length_sqr(att_p - imp_p) < attractor_dist_sq then
				u[1] = 0
				u[2] = u[2] + 0.1 * v[1]
				u[2] = math.min(2.0, u[2])
				u[2] = math.max(-150.0, u[2])
				u[3] = att_p + 0.5 * (imp_p - att_p)
				found = true
			end
		end
		if not found and #self.attractors < attractor_count then
			table.insert(self.attractors, {0, mag, imp_p})
		end
	end
	self.impacts = {}
	local count = #self.attractors
	local i = 1
	while i <= count do
		local v = self.attractors[i]
		local t = v[1]
		local m = v[2]
		local decay = -attractor_decay_speed * dt
		if m < 0 then
			decay = -decay
		end
		m = m + decay
		if math.abs(m) <= decay then
			table.remove(self.attractors, i)
			count = count - 1
		else
			v[1] = t + dt
			v[2] = m
			self.attractors[i] = v
			i = i + 1
		end
	end
end

local function send_attractor(i, p, f)
	local p = p * (1.0)
	msg.post("#model", "set_constant", { name_hash = hash("attractor" .. i), value = vmath.vector4(p.x, p.y, 1, f)})
end

local function clear_attractor(i)
	msg.post("#model", "set_constant", { name_hash = hash("attractor" .. i), value = vmath.vector4(0, 0, 0, 0)})
end

function update(self, dt)
	self.timer = self.timer + dt
	if self.timer > self.log_delay and not self.logged_time then
		print(self.log_delay .. " seconds")
		self.logged_time = true
	end
	-- temp draw level
	--level_util.draw()

	update_attractors(self, dt)
	--pprint(self.attractors)
	for i,v in ipairs(self.attractors) do
		local t = v[1]
		local m = v[2]
		local p = v[3]
		local f = (1 - t/m)
		local f = math.cos(t * 20) * m
		send_attractor(i, p, f)
	end
	for i=(#self.attractors+1),(attractor_count - #self.attractors) do
		clear_attractor(i)
	end
	
	self.phase = self.phase + dt * 2
	
	self.color_hue = self.color_hue + dt * 360 / 8
	if self.color_hue > 360 then
		self.color_hue = self.color_hue - 360
	end
	self.color = util.hsl(self.color_hue, 1, 0.7)
	--[[
	if self.temp then
		send_attractor(1, self.temp, -0.1)
	end
	--]]
end

local function add_impact(self, magnitude, position)
	table.insert(self.impacts, {magnitude, position})
end

function on_message(self, message_id, message, sender)
	if message_id == hash("add_impact") then
		add_impact(self, message.magnitude, message.position)
		--send_attractor(1, message.position, message.magnitude)
		--[[
		local p = message.position
		msg.post("#model", "set_constant", { name_hash = hash("attractor1"), value = vmath.vector4(p.x, p.y, 0, 1) })
		--]]
		self.temp = message.position
	elseif message_id == hash("enemy_dead") then
		--add_impact(self, message.value * 0.02, message.position)
		local particle = sender
		particle.fragment = hash("particlefx")
        particlefx.set_constant(particle, "emitter", "tint", self.color)
		particle.fragment = hash("particlefx_light")
        particlefx.set_constant(particle, "emitter", "tint", self.color)
	end
end
