local M = {}

local function expect_error(initial_message, fn, ...)
    local success, message = pcall(fn, ...)
    if success then
        print(("  %s => ??? unexpected success ???"):format(initial_message))
    else
        print(("  %s => %s"):format(initial_message, message))
    end
end

local function print_atlas_contents(atlas)
    local images = editor.get("/test.atlas", "images")
    print(("  images: %s"):format(#images))
    for i = 1, #images do
        local image_node = images[i]
        print(("    image: %s"):format(editor.get(image_node, "image")))
    end
    local animations = editor.get("/test.atlas", "animations")
    print(("  animations: %s"):format(#animations))
    for i = 1, #animations do
        local animation_node = animations[i]
        print(("    animation id: %s"):format(editor.get(animation_node, "id")))
        local animation_images = editor.get(animation_node, "images")
        print(("    animation images: %s"):format(#animation_images))
        for j = 1, #animation_images do
            local animation_image_node = animation_images[j]
            print(("      animation image: %s"):format(editor.get(animation_image_node, "image")))
        end
    end
end

local function print_tilesource_contents(tilesource)
    local animations = editor.get(tilesource, "animations")
    print(("  animations: %s"):format(#animations))
    for i = 1, #animations do
        local animation_node = animations[i]
        print(("    animation: %s"):format(editor.get(animation_node, "id")))
    end
    local collision_groups = editor.get(tilesource, "collision_groups")
    print(("  collision groups: %s"):format(#collision_groups))
    for i = 1, #collision_groups do
        local node = collision_groups[i]
        print(("    collision group: %s"):format(editor.get(node, "id")))
    end
    local tile_collision_groups = editor.get(tilesource, "tile_collision_groups")
    local tile_collision_groups_count = 0
    for _, _ in pairs(tile_collision_groups) do
        tile_collision_groups_count = tile_collision_groups_count + 1
    end
    print(("  tile collision groups: %s"):format(tile_collision_groups_count))
    for k, v in pairs(tile_collision_groups) do
        print(("    tile collision group: %s %s"):format(k, v))
    end
end

local function print_tilemap_contents(tilemap_resource)
    local layers = editor.get(tilemap_resource, "layers")
    print(("  layers: %s"):format(#layers))
    for i = 1, #layers do
        local layer = layers[i]
        print(("    layer: %s"):format(editor.get(layer, "id")))
        print("    tiles: {")
        for x, y, tile in tilemap.tiles.iterator(editor.get(layer, "tiles")) do
            print(("      [%s, %s] = %s"):format(x,y,tile))
        end
        print("    }")
    end
end

local function print_particlefx_contents(particlefx)
    local emitters = editor.get(particlefx, "emitters")
    print(("  emitters: %s"):format(#emitters))
    for i = 1, #emitters do
        local emitter = emitters[i]
        print(("    emitter: %s"):format(editor.get(emitter, "id")))
        local modifiers = editor.get(emitter, "modifiers")
        print(("    modifiers: %s"):format(#modifiers))
        for j = 1, #modifiers do
            print(("      modifier: %s"):format(editor.get(modifiers[j], "type")))
        end
    end
    local modifiers = editor.get(particlefx, "modifiers")
    print(("  modifiers: %s"):format(#modifiers))
    for i = 1, #modifiers do
        print(("    modifier: %s"):format(editor.get(modifiers[i], "type")))
    end
end

local function print_collision_object(collision)
    local shapes = editor.get(collision, "shapes")
    print(("  shapes: %s"):format(#shapes))
    for i = 1, #shapes do
        local shape = shapes[i]
        print(("  - id: %s"):format(editor.get(shape, "id")))
        local type = editor.get(shape, "type")
        print(("    type: %s"):format(type))
        if type == "shape-type-sphere" then
            print(("    diameter: %s"):format(editor.get(shape, "diameter")))
        elseif type == "shape-type-box" then
            local x,y,z = table.unpack(editor.get(shape, "dimensions"))
            print(("    dimensions: %s %s %s"):format(x, y, z))
        elseif type == "shape-type-capsule" then
            print(("    diameter: %s"):format(editor.get(shape, "diameter")))
            print(("    height: %s"):format(editor.get(shape, "height")))
        end
    end
end

local function print_gui(gui)
    local layers = editor.get(gui, "layers")
    print(("  layers: %s"):format(#layers))
    for i = 1, #layers do
        local layer = layers[i]
        print(("    layer: %s"):format(editor.get(layer, "name")))
    end
    local materials = editor.get(gui, "materials")
    print(("  materials: %s"):format(#materials))
    for i = 1, #materials do
        local material = materials[i]
        local material_res = editor.get(material, "material")
        print(("    material: %s%s"):format(editor.get(material, "name"), material_res and " " .. material_res or ""))
    end
    local particlefxs = editor.get(gui, "particlefxs")
    print(("  particlefxs: %s"):format(#particlefxs))
    for i = 1, #particlefxs do
        local particlefx = particlefxs[i]
        local particlefx_res = editor.get(particlefx, "particlefx")
        print(("    particlefx: %s%s"):format(editor.get(particlefx, "name"), particlefx_res and " " .. particlefx_res or ""))
    end
    local textures = editor.get(gui, "textures")
    print(("  textures: %s"):format(#textures))
    for i = 1, #textures do
        local texture = textures[i]
        local texture_res = editor.get(texture, "texture")
        print(("    texture: %s%s"):format(editor.get(texture, "name"), texture_res and " " .. texture_res or ""))
    end
    local layouts = editor.get(gui, "layouts")
    print(("  layouts: %s"):format(#layouts))
    for i = 1, #layouts do
        local layout = layouts[i]
        print(("    layout: %s"):format(editor.get(layout, "name")))
    end
    local spine_scenes = editor.get(gui, "spine_scenes")
    print(("  spine scenes: %s"):format(#spine_scenes))
    for i = 1, #spine_scenes do
        local spine_scene = spine_scenes[i]
        local spine_scene_res = editor.get(spine_scene, "spine_scene")
        print(("    spine scene: %s%s"):format(editor.get(spine_scene, "name"), spine_scene_res and " " .. spine_scene_res or ""))
    end
end

function M.get_commands()
    return {
        editor.command({
            id = "defold.test",
            label = "Test",
            locations = {"Edit"},
            run = function()
                print("Atlas initial state:")
                print_atlas_contents("/test.atlas")
                print(("  can add images: %s"):format(tostring(editor.can_add("/test.atlas", "images"))))
                print(("  can add animations: %s"):format(tostring(editor.can_add("/test.atlas", "animations"))))

                print("Transaction: add image and animation")
                editor.transact({
                    editor.tx.add("/test.atlas", "images", {image = "/builtins/assets/images/logo/logo_256.png"}),
                    editor.tx.add("/test.atlas", "animations", {
                        id = "logos", 
                        images = {
                            {image = "/builtins/assets/images/logo/logo_blue_256.png"},
                            {image = "/builtins/assets/images/logo/logo_256.png"}
                        }
                    })
                })

                print("After transaction (add):")
                print_atlas_contents("/test.atlas")
                local images = editor.get("/test.atlas", "images")
                local animations = editor.get("/test.atlas", "animations")

                print("Transaction: remove image")
                editor.transact({editor.tx.remove("/test.atlas", "images", images[1])})

                print("After transaction (remove image):")
                print_atlas_contents("/test.atlas")

                print("Transaction: clear animation images")
                editor.transact({editor.tx.clear(animations[1], "images")})

                print("After transaction (clear):")
                print_atlas_contents("/test.atlas")

                print("Transaction: remove animation")
                editor.transact({editor.tx.remove("/test.atlas", "animations", animations[1])})

                print("After transaction (remove animation):")
                print_atlas_contents("/test.atlas")

                print("Expected errors:")
                expect_error("Wrong list name to add", editor.tx.add, "/test.atlas", "layers", {})
                expect_error("Wrong list name to remove", editor.tx.remove, "/test.atlas", "layers", "/test.atlas")
                expect_error("Wrong list item to remove", editor.tx.remove, "/test.atlas", "images", "/test.atlas")
                expect_error("Wrong list name to clear", editor.tx.clear, "/test.atlas", "layers")
                expect_error("Wrong child property name", editor.transact, { editor.tx.add("/test.atlas", "animations", { no_such_prop = true}) })
                expect_error("Added value is not a table", editor.tx.add, "/test.atlas", "images", "/foo.png")
                expect_error("Added nested value is not a table", editor.tx.add, "/test.atlas", "animations", { images = { "/foo.png" } })
                expect_error("Added node has invalid property value", editor.transact, { editor.tx.add("/test.atlas", "images", { pivot = "invalid-pivot" }) })
                expect_error("Added resource has wrong type", editor.transact, { editor.tx.add("/test.atlas", "images", { image = "/game.project" }) })

                print("Tilesource initial state:")
                local tilesource = "/test.tilesource"
                print_tilesource_contents(tilesource)

                print("Transaction: add animations and collision groups")
                editor.transact({
                    editor.tx.add(tilesource, "animations", {id = "idle"}),
                    editor.tx.add(tilesource, "animations", {id = "walk", start_tile = 2, end_tile = 6}),
                    editor.tx.add(tilesource, "collision_groups", {id = "obstacle"}),
                    editor.tx.add(tilesource, "collision_groups", {id = "character"}),
                    editor.tx.add(tilesource, "collision_groups", {}),
                    editor.tx.add(tilesource, "collision_groups", {}),
                    editor.tx.set(tilesource, "tile_collision_groups", {[1] = "obstacle", [3] = "character"})
                })

                print("After transaction (add animations and collision groups):")
                print_tilesource_contents(tilesource)

                print("Transaction: set tile_collision_groups to its current value")
                editor.transact({editor.tx.set(tilesource, "tile_collision_groups", editor.get(tilesource, "tile_collision_groups"))})

                print("After transaction (tile_collision_groups roundtrip):")
                print_tilesource_contents(tilesource)

                print("Expected errors")
                expect_error("Using non-existent collision group", editor.transact, {editor.tx.set(tilesource, "tile_collision_groups", {[2] = "does-not-exist"})})

                print("Transaction: clear tilesource")
                editor.transact({
                    editor.tx.clear(tilesource, "animations"),
                    editor.tx.clear(tilesource, "collision_groups"),
                })

                print("After transaction (clear):")
                print_tilesource_contents(tilesource)

                print("Tilemap initial state:")
                local test_tilemap = "/test.tilemap"
                print_tilemap_contents(test_tilemap)

                print("Transaction: add 2 layers")
                local tiles = tilemap.tiles.new()
                for x = 1, 3 do 
                    for y = 1, 3 do
                        tilemap.tiles.set(tiles, x, y, math.max(x, y))
                    end
                end
                editor.transact({
                    editor.tx.add(test_tilemap, "layers", {
                        id = "background",
                        tiles = tiles
                    }),
                    editor.tx.add(test_tilemap, "layers", {
                        id = "items",
                        tiles = tilemap.tiles.set(tilemap.tiles.new(), 2, 2, 3)
                    })
                })

                print("After transaction (add 2 layers):")
                print_tilemap_contents(test_tilemap)

                print("Transaction: clear tilemap")
                editor.transact({editor.tx.clear(test_tilemap, "layers")})

                print("After transaction (clear):")
                print_tilemap_contents(test_tilemap)

                print("Particlefx initial state:")
                local pfx = "/test.particlefx"
                print_particlefx_contents(pfx)

                print("Transaction: add emitter and modifier")
                editor.transact({
                    editor.tx.add(pfx, "emitters", { 
                        type = "emitter-type-circle",
                        modifiers = {
                            {type = "modifier-type-vortex"},
                            {type = "modifier-type-drag"}
                        }
                    }),
                    editor.tx.add(pfx, "modifiers", {})
                })

                print("After transaction (add emitter and modifier):")
                print_particlefx_contents(pfx)

                print("Transaction: clear particlefx")
                editor.transact({
                    editor.tx.clear(pfx, "emitters"),
                    editor.tx.clear(pfx, "modifiers")
                })

                print("After transaction (clear):")
                print_particlefx_contents(pfx)

                local collision = "/test.collisionobject"
                
                print("Collision object initial state:")
                print_collision_object(collision)

                print("Transaction: add 3 shapes")
                editor.transact({
                    editor.tx.add(collision, "shapes", {
                        id = "box",
                        type = "shape-type-box"
                    }),
                    editor.tx.add(collision, "shapes", {
                        id = "sphere",
                        type = "shape-type-sphere"
                    }),
                    editor.tx.add(collision, "shapes", {
                        id = "capsule",
                        type = "shape-type-capsule"
                    })
                })

                print("After transaction (add 3 shapes):")
                print_collision_object(collision)

                print("Transaction: clear")
                editor.transact({editor.tx.clear(collision, "shapes")})

                print("After transaction (clear):")
                print_collision_object(collision)

                print("Expected errors:")
                expect_error("missing type", editor.tx.add, collision, "shapes", {})
                expect_error("wrong type", editor.tx.add, collision, "shapes", {type = "box"})

                local gui = "/test.gui"
                print("GUI initial state:")
                print_gui(gui)

                print("Transaction: edit GUI")
                editor.transact({
                    editor.tx.add(gui, "layers", {name = "bg"}),
                    editor.tx.add(gui, "layers", {name = "fg"}),
                    editor.tx.add(gui, "layouts", {name = "Landscape"}),
                    editor.tx.add(gui, "layouts", {name = "Portrait"}),
                    editor.tx.add(gui, "materials", {}),
                    editor.tx.add(gui, "materials", {material = "/test.material"}),
                    editor.tx.add(gui, "materials", {material = "/test.material"}),
                    editor.tx.add(gui, "materials", {}),
                    editor.tx.add(gui, "particlefxs", {}),
                    editor.tx.add(gui, "particlefxs", {particlefx = "/test.particlefx"}),
                    editor.tx.add(gui, "particlefxs", {}),
                    editor.tx.add(gui, "spine_scenes", {}),
                    editor.tx.add(gui, "spine_scenes", {name = "explicit name"}),
                    editor.tx.add(gui, "spine_scenes", {spine_scene = "/defold-spine/assets/template/template.spinescene"}),
                    editor.tx.add(gui, "spine_scenes", {}),
                    editor.tx.add(gui, "textures", {texture = "/test.tilesource"}),
                    editor.tx.add(gui, "textures", {texture = "/test.atlas"})
                })

                print("After transaction (edit):")
                print_gui(gui)

                print(("can reorder layers: %s"):format(tostring(editor.can_reorder(gui, "layers"))))
                local bg_layer, fg_layer = table.unpack(editor.get(gui, "layers"))
                print("Transaction: reorder")
                editor.transact({
                    editor.tx.reorder(gui, "layers", {fg_layer, bg_layer})
                })
                print("After transaction (reorder):")
                print_gui(gui)
                
                print("Expected reorder errors:")
                expect_error("undefined property", editor.tx.reorder, gui, "not-a-property", {})
                expect_error("reorder not defined", editor.tx.reorder, collision, "shapes", {})
                expect_error("duplicates", editor.tx.reorder, gui, "layers", {fg_layer, fg_layer, bg_layer})
                expect_error("missing children", editor.tx.reorder, gui, "layers", {fg_layer})
                expect_error("wrong child nodes", editor.tx.reorder, gui, "layers", {fg_layer, gui})

                print("Transaction: clear GUI")
                editor.transact({
                    editor.tx.clear(gui, "layers"),
                    editor.tx.clear(gui, "layouts"),
                    editor.tx.clear(gui, "materials"),
                    editor.tx.clear(gui, "particlefxs"),
                    editor.tx.clear(gui, "spine_scenes"),
                    editor.tx.clear(gui, "textures")
                })

                print("Expected layout errors:")
                expect_error("no name", editor.transact, {editor.tx.add(gui, "layouts", {})})
                expect_error("unknown profile", editor.transact, {editor.tx.add(gui, "layouts", {name = "Not a profile"})})
                expect_error("duplicates", editor.transact, {
                    editor.tx.add(gui, "layouts", {name = "Landscape"}),
                    editor.tx.add(gui, "layouts", {name = "Landscape"})
                })

                print("After transaction (clear):")
                print_gui(gui)
            end
        })
    }
end

return M
