#! /usr/bin/env python

srcdir = '.'
blddir = 'build'

APPNAME='SkriBidi'
VERSION='1e8038'

import os, shutil
import waf_dynamo
import run
from waflib import Build
from BuildUtility import create_build_utility
from build_constants import TargetOS


def options(opt):
    opt.load('waf_dynamo')

def configure(conf):
    if os.environ['DYNAMO_HOME'] != conf.env.PREFIX:
        if 'PREFIX' not in os.environ:
            conf.env.PREFIX = os.environ['DYNAMO_HOME']
            print("Setting PREFIX=$DYNAMO_HOME")

    conf.load('waf_dynamo')
    conf.env.append_unique('DEFINES', 'NDEBUG')

def build(bld):
    name = '%s-%s' % (APPNAME, VERSION)
    packagedir = 'package/Skribidi/src'
    includedir = 'package/Skribidi/include'

    budouxc_packagedir = 'package/budouxc-main/src'
    budouxc_includedir = 'package/budouxc-main/include'

    harfbuzz_includedir  = '../harfbuzz/package/harfbuzz-11.3.2/src'
    sheenbidi_includedir = '../sheenbidi/package/SheenBidi-2.9.0/Headers'
    libunibreak_includedir = '../libunibreak/package/libunibreak-6.1/src'

    build_util = create_build_utility(bld.env)
    target_os = build_util.get_target_os()

    remove_flags = {}
    remove_flags['CFLAGS'] = []
    remove_flags['CFLAGS'].append(('-Os', 1))
    remove_flags['CFLAGS'].append(('-O2', 1))
    remove_flags['CFLAGS'].append(('-O1', 1))
    remove_flags['CFLAGS'].append(('-O0', 1))
    remove_flags['CFLAGS'].append(('/O2', 1))
    remove_flags['CFLAGS'].append(('/O1', 1))
    remove_flags['CFLAGS'].append(('/Od', 1))
    remove_flags['CFLAGS'].append(('-std=c++11', 0))

    OPT = '/O2' if TargetOS.WINDOWS == target_os else '-O3'

    lib = bld.stlib(features = 'c remove_flags',
                     remove_flags = remove_flags,
                     source    = bld.path.ant_glob('%s/*.c' % packagedir) +
                                 bld.path.ant_glob('%s/*.c' % budouxc_packagedir),
                     defines   = ['SKB_NO_OPEN'],
                     includes  = ['.', '..',
                                    packagedir,
                                    includedir,
                                    budouxc_includedir,
                                    harfbuzz_includedir,
                                    sheenbidi_includedir,
                                    libunibreak_includedir],
                     install_path = None,
                     target    = 'skribidi')

    lib.env.append_unique('CFLAGS', OPT)

    def _excludes(path):
        return path.endswith('emoji_presentation_scanner.c') or \
               path.endswith('skb_image_atlas.c') or \
               path.endswith('skb_canvas.c') or \
               path.endswith('skb_rasterizer.c') or \
               path.endswith('skb_icon_collection.c') or \
               path.endswith('skb_editor.c')

    lib.source = [x for x in lib.source if not _excludes(x.name)]

    if TargetOS.WINDOWS == target_os:
        bld.env.STLIB_ST         = 'lib%s.lib'
        bld.env.cstlib_PATTERN   = 'lib%s.lib'
        bld.env.cxxstlib_PATTERN = 'lib%s.lib'

    output_dir = '%s/%s' % (bld.env.PREFIX, name)
    if isinstance(bld, Build.InstallContext):
        if os.path.exists(output_dir):
            shutil.rmtree(output_dir)

    bld.install_files('${PREFIX}/%s/lib/%s/' % (name, bld.env.PLATFORM), bld.env.cxxstlib_PATTERN % 'skribidi')
    bld.install_files('${PREFIX}/%s/include/skribidi' % name,
                        bld.path.ant_glob('%s/**/*.h' % includedir),
                        relative_base=bld.path.find_dir(includedir),
                        relative_trick=True)

    if isinstance(bld, Build.InstallContext):
        bld.add_group() # make sure the previous install step is done before we create the archive

        pkg = bld(rule=create_package,
                  cwd=output_dir,
                  target='%s-%s.tar.gz' % (name, bld.env.PLATFORM),
                  always=True)

        pkg = bld(rule=create_package,
                  cwd=output_dir,
                  target='%s-common.tar.gz' % name,
                  always=True)


## NOTE!
## This seems a bit hacky, and it sure is. We leave a folder behind in the packages folder now,
## so when using this to build external libraries, make sure to NOT commit that folder. We can
## potentially solve it by running some sort of cleanup task after the other package tasks perhaps.
## I tried with bld.add_groups() after the package tasks, but it was not working.
def create_package(self):
    target = self.outputs[0].abspath()
    name = self.outputs[0].name

    dirs = []
    dirs_search = ['lib', 'sdk', 'share']

    # Create the common package with includes
    if target.find("-common") > 0:
        dirs_search = ['include']

    print("SELF.CWD", self.cwd)
    for x in dirs_search:
        try_path = os.path.join(self.cwd, x)
        if os.path.exists(try_path):
            dirs.append(x)

    args = ['tar', 'zcvf', os.path.normpath(target)] + dirs

    run.command(args, cwd=self.cwd)
    print("Wrote", target)

    # copy to the defold package path
    source = target
    target = os.path.normpath(os.path.join(os.environ['DYNAMO_HOME'], '..', '..', 'packages', name))
    shutil.copy2(source, target)
    print("Installed to", target)

def package(self):
    pass
