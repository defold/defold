#! /usr/bin/env python

srcdir = '.'
blddir = 'build'

APPNAME='bullet'
VERSION='2.77'

import os, sys, re, shutil
import waf_dynamo
import run
from waflib import Build
from waflib.TaskGen import feature, after


def options(opt):
    opt.load('waf_dynamo')

def configure(conf):
    conf.load('waf_dynamo')
    conf.env.append_unique('DEFINES', 'NDEBUG')

def build(bld):
    name = '%s-%s' % (APPNAME, VERSION)
    packagedir = 'package/%s/src' % name

    path = '%s/BulletCollision' % packagedir

    source_files = bld.path.ant_glob(['%s/BroadphaseCollision/**/*.cpp' % path,
                                       '%s/CollisionShapes/**/*.cpp' % path,
                                       '%s/CollisionDispatch/**/*.cpp' % path,
                                       '%s/Gimpact/**/*.cpp' % path,
                                       '%s/NarrowPhaseCollision/**/*.cpp' % path])

    bullet_collision = bld.stlib(features = 'c cxx',
                                source    = source_files,
                                defines   = ['NDEBUG','_USE_MATH_DEFINES'],
                                includes  = '. .. ./package/%s/src' % name,
                                target    = 'BulletCollision')

    bullet_collision.install_path = None

    path = '%s/BulletDynamics' % packagedir
    source_files = bld.path.ant_glob(['%s/Character/**/*.cpp' % path,
                                      '%s/ConstraintSolver/**/*.cpp' % path,
                                      '%s/Dynamics/**/*.cpp' % path,
                                      '%s/Vehicle/**/*.cpp' % path])
    bullet_dynamics = bld.stlib(features = 'c cxx',
                                source   = source_files,
                                defines  = ['NDEBUG','_USE_MATH_DEFINES'],
                                includes = '. .. ./package/%s/src' % name,
                                target   = 'BulletDynamics')

    bullet_dynamics.install_path = None

    path = '%s/LinearMath' % packagedir
    source_files = bld.path.ant_glob(['%s/LinearMath/**/*.cpp' % packagedir])

    linear_math = bld.stlib(features = 'c cxx',
                           source   = source_files,
                           defines = ['NDEBUG','_USE_MATH_DEFINES'],
                           includes = '. .. ./package/%s/src' % name,
                           target = 'LinearMath')
    linear_math.install_path = None

    # for android
    if bld.env.PLATFORM in ('armv7-android', 'arm64-android', 'x86_64-ps4', 'x86_64-ps5', 'js-web', 'wasm-web'):
        linear_math.env.append_unique('CXXFLAGS', "-Wno-c++11-narrowing")

    if bld.env.PLATFORM in ('win32', 'x86_64-win32'):
        bld.env.STLIB_ST         = 'lib%s.lib'
        bld.env.cstlib_PATTERN   = 'lib%s.lib'
        bld.env.cxxstlib_PATTERN = 'lib%s.lib'

    bld.install_files('${PREFIX}/%s/lib/%s/' % (name, bld.env.PLATFORM), bld.env.cxxstlib_PATTERN % 'BulletCollision')
    bld.install_files('${PREFIX}/%s/lib/%s/' % (name, bld.env.PLATFORM), bld.env.cxxstlib_PATTERN % 'BulletDynamics')
    bld.install_files('${PREFIX}/%s/lib/%s/' % (name, bld.env.PLATFORM), bld.env.cxxstlib_PATTERN % 'LinearMath')
    bld.install_files('${PREFIX}/%s/include' % (name),
                        bld.path.ant_glob('%s/**/*.h' % packagedir),
                        relative_base=bld.path.find_dir(packagedir),
                        relative_trick=True)

    if isinstance(bld, Build.InstallContext):
        bld.add_group() # make sure the previous install step is done before we create the archive

        output_dir = '%s/%s-%s' % (bld.env.PREFIX, APPNAME, VERSION)
        pkg = bld(rule=create_package,
                  cwd=output_dir,
                  target='%s-%s.tar.gz' % (name, bld.env.PLATFORM),
                  always=True)

def create_package(self):
    target = self.outputs[0].abspath()
    name = self.outputs[0].name
    args = ['tar', 'zcvf', os.path.normpath(target)]
    args.extend(os.listdir(self.cwd))
    run.command(args, cwd=self.cwd)
    print("Wrote", target)

    # copy to the defold package path
    source = target
    target = os.path.normpath(os.path.join(os.environ['DYNAMO_HOME'], '..', '..', 'packages', name))
    shutil.copy2(source, target)
    print("Installed to", target)

def package(self):
    pass
