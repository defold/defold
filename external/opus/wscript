#! /usr/bin/env python

srcdir = '.'
blddir = 'build'

APPNAME='opus'
VERSION='1.5.2'

import os, sys, re, shutil
import waf_dynamo
import run
from waflib import Build
from waflib.TaskGen import feature, after


def options(opt):
    opt.load('waf_dynamo')

def configure(conf):
    if os.environ['DYNAMO_HOME'] != conf.env.PREFIX:
        if 'PREFIX' not in os.environ:
            conf.env.PREFIX = os.environ['DYNAMO_HOME']
            print("Setting PREFIX=$DYNAMO_HOME")

    conf.load('waf_dynamo')
    conf.env.append_unique('DEFINES', 'NDEBUG')

def build(bld):
    name = '%s-%s' % (APPNAME, VERSION)
    packagedir = 'package/%s/src' % name

    #Q: seems one could go "celt only" -- the "old" Opus codec --> which will be much smaller & faster, but not decode everything "just encoded" these days anymore... ???
    # (which, it seems, would mean only compiling the "celt" folder and using it's API in a custom fashion...?! Related: "OPUS_CUSTOM")
    source_files = bld.path.ant_glob(['src/opus.c',
                                      'src/opus_decoder.c',

                                       'celt/bands.c',
                                       'celt/celt.c',
                                       'celt/celt_decoder.c',
                                       'celt/cwrs.c',
                                       'celt/entenc.c',
                                       'celt/entdec.c',
                                       'celt/entcode.c',
                                       'celt/kiss_fft.c',
                                       'celt/laplace.c',
                                       'celt/mathops.c',
                                       'celt/mdct.c',
                                       'celt/modes.c',
                                       'celt/pitch.c',
                                       'celt/celt_lpc.c',
                                       'celt/quant_bands.c',
                                       'celt/rate.c',
                                       'celt/vq.c',

                                       'silk/CNG.c',
                                       'silk/code_signs.c',
                                       'silk/init_decoder.c',
                                       'silk/decode_core.c',
                                       'silk/decode_frame.c',
                                       'silk/decode_parameters.c',
                                       'silk/decode_indices.c', 
                                       'silk/decode_pulses.c',
                                       'silk/decoder_set_fs.c',
                                       'silk/dec_API.c',
                                       'silk/gain_quant.c',
                                       'silk/interpolate.c',
                                       'silk/LP_variable_cutoff.c',
                                       'silk/NLSF_decode.c',
                                       'silk/PLC.c',
                                       'silk/shell_coder.c',
                                       'silk/tables_gain.c',
                                       'silk/tables_LTP.c',
                                       'silk/tables_NLSF_CB_NB_MB.c',
                                       'silk/tables_NLSF_CB_WB.c',
                                       'silk/tables_other.c',
                                       'silk/tables_pitch_lag.c',
                                       'silk/tables_pulses_per_block.c',
                                       #'silk/control_audio_bandwidth.c',
                                       'silk/quant_LTP_gains.c',
                                       'silk/HP_variable_cutoff.c',
                                       'silk/NLSF_encode.c',
                                       'silk/NLSF_VQ.c',
                                       'silk/NLSF_unpack.c',
                                       'silk/NLSF_del_dec_quant.c',
                                       'silk/process_NLSFs.c',
                                       'silk/stereo_LR_to_MS.c',
                                       'silk/stereo_MS_to_LR.c',
                                       #'silk/check_control_input.c',
                                       #'silk/control_SNR.c',
                                       #'silk/init_encoder.c',
                                       #'silk/control_codec.c',
                                       'silk/A2NLSF.c',
                                       'silk/ana_filt_bank_1.c',
                                       'silk/biquad_alt.c',
                                       'silk/bwexpander_32.c',
                                       'silk/bwexpander.c',
                                       #'silk/debug.c',
                                       'silk/decode_pitch.c',
                                       'silk/inner_prod_aligned.c',
                                       'silk/lin2log.c',
                                       'silk/log2lin.c',
                                       'silk/LPC_analysis_filter.c',
                                       'silk/LPC_inv_pred_gain.c',
                                       'silk/table_LSF_cos.c',
                                       'silk/NLSF2A.c',
                                       'silk/NLSF_stabilize.c',
                                       #'silk/NLSF_VQ_weights_laroia.c',
                                       'silk/pitch_est_tables.c',
                                       'silk/resampler.c',
                                       'silk/resampler_down2_3.c',
                                       'silk/resampler_down2.c',
                                       'silk/resampler_private_AR2.c',
                                       'silk/resampler_private_down_FIR.c',
                                       'silk/resampler_private_IIR_FIR.c',
                                       'silk/resampler_private_up2_HQ.c',
                                       'silk/resampler_rom.c',
                                       #'silk/sigm_Q15.c',
                                       'silk/sort.c',
                                       'silk/sum_sqr_shift.c',
                                       'silk/stereo_decode_pred.c', 
                                       #'silk/stereo_encode_pred.c',
                                       #'silk/stereo_find_predictor.c',
                                       #'silk/stereo_quant_pred.c',
                                       'silk/LPC_fit.c',
                                       'silk/NSQ.c',
                                       'silk/NSQ_del_dec.c',
                                       'silk/VAD.c',
                                       'silk/VQ_WMat_EC.c',
                                        ])

    x86_simd_source_files =  bld.path.ant_glob(['celt/x86/celt_lpc_sse4_1.c',
                                       'celt/x86/pitch_avx.c',
                                       'celt/x86/pitch_sse2.c',
                                       'celt/x86/pitch_sse4_1.c',
                                       'celt/x86/pitch_sse.c',
                                       'celt/x86/vq_sse2.c',
                                       'celt/x86/x86_celt_map.c',
                                       'celt/x86/x86cpu.c',

                                       'silk/x86/x86_silk_map.c',
                                       'silk/x86/NSQ_del_dec_sse4_1.c',
                                       'silk/x86/NSQ_sse4_1.c',
                                       'silk/x86/VAD_sse4_1.c',
                                       'silk/x86/VQ_WMat_EC_sse4_1.c',
                                       ])

    simd_defs = []
    if bld.env.PLATFORM in ('win32', 'x86_64-win32', 'x86_64-linux', 'x86_64-macos'):
        simd_defs = simd_defs + ['OPUS_HAVE_RTCD', 'OPUS_X86_MAY_HAVE_SSE', 'OPUS_X86_MAY_HAVE_SSE2', 'OPUS_X86_MAY_HAVE_SSE4_1', 'CPU_INFO_BY_C'];
        source_files = source_files + x86_simd_source_files
    #elif bld.env.PLATFORM in ('wasm-web', 'wasm_pthread-web', 'js-web'):
    #    simd_defs = simd_defs + ['OPUS_X86_MAY_HAVE_SSE', 'OPUS_X86_MAY_HAVE_SSE2', 'OPUS_X86_MAY_HAVE_SSE4_1', 'OPUS_X86_PRESUME_SSE', 'OPUS_X86_PRESUME_SSE2', 'OPUS_X86_PRESUME_SSE4_1'];
    #    source_files = source_files + x86_simd_source_files

    opus_decoder    = bld.stlib(features = 'c',
                                source    = source_files,
                                defines   = ['NDEBUG', 'OPUS_BUILD', 'USE_ALLOCA'] + simd_defs,
                                includes  = ['include', 'celt', 'silk', 'silk/float', 'silk/fixed', '.'],
                                target    = 'opus')

    if bld.env.PLATFORM in ('win32', 'x86_64-win32'):
        bld.env.STLIB_ST         = 'lib%s.lib'
        bld.env.cstlib_PATTERN   = 'lib%s.lib'
        bld.env.cxxstlib_PATTERN = 'lib%s.lib'

    bld.install_files('${PREFIX}/%s/lib/%s/' % (name, bld.env.PLATFORM), bld.env.cxxstlib_PATTERN % 'opus')
    bld.install_files('${PREFIX}/%s/include/%s/' % (name, APPNAME), bld.path.ant_glob('include/*.h'))

    if isinstance(bld, Build.InstallContext):
        bld.add_group() # make sure the previous install step is done before we create the archive

        output_dir = '%s/%s-%s' % (bld.env.PREFIX, APPNAME, VERSION)

        pkg = bld(rule=create_package,
                  cwd=output_dir,
                  target='%s-%s.tar.gz' % (name, bld.env.PLATFORM),
                  always=True)


        target_tar = '%s-common.tar.gz' % name

        pkg = bld(rule=create_package,
                  cwd=output_dir,
                  target=target_tar,
                  always=True)

# from Box2d
def create_package(self):
    target = self.outputs[0].abspath()
    name = self.outputs[0].name

    dirs = []
    dirs_search = ['lib', 'sdk', 'share']

    # Create the common package with includes
    if target.find("-common") > 0:
        dirs_search = ['include']

    print("SELF.CWD", self.cwd)
    for x in dirs_search:
        try_path = os.path.join(self.cwd, x)
        if os.path.exists(try_path):
            dirs.append(x)

    args = ['tar', 'zcvf', os.path.normpath(target)] + dirs

    run.command(args, cwd=self.cwd)
    print("Wrote", target)

    # copy to the defold package path
    source = target
    target = os.path.normpath(os.path.join(os.environ['DYNAMO_HOME'], '..', '..', 'packages', name))
    shutil.copy2(source, target)
    print("Installed to", target)

def package(package):
    pass
