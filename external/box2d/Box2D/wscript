#! /usr/bin/env python

import os, sys, re, run, shutil
from waflib import Build

VERSION = '3.1.0'
APPNAME = 'box2d'

def configure(conf):
    plat = conf.env.PLATFORM
    if not plat:
        conf.fatal('Pass --platform=...')

    conf.env.SIMD_CFLAGS,   conf.env.SIMD_CXXFLAGS   = [], []
    conf.env.NOSIMD_CFLAGS, conf.env.NOSIMD_CXXFLAGS = [], []

    if plat in ('win32', 'x86_64-win32'):
        conf.env.STLIB_ST         = 'lib%s.lib'
        conf.env.cstlib_PATTERN   = 'lib%s.lib'
        conf.env.cxxstlib_PATTERN = 'lib%s.lib'
        conf.env.append_unique('CFLAGS', ['/std:c11'])

    if plat == 'armv7-android':
        conf.env.SIMD_CFLAGS   += ['-mfpu=neon']
        conf.env.SIMD_CXXFLAGS += ['-mfpu=neon']

    if plat in ('wasm-web', 'wasm_pthread-web'):
        conf.env.SIMD_CFLAGS   += ['-msimd128']
        conf.env.SIMD_CXXFLAGS += ['-msimd128']
    elif plat == 'js-web':
        pass

def build(bld):
    # Sources/Includes
    srcs = bld.path.ant_glob('**/*.c')
    incs = '.. include'

    box2d = bld.stlib(features='c',
                      includes=incs,
                      source=srcs,
                      target='box2d',
                      cflags=bld.env.SIMD_CFLAGS,
                      cxxflags=bld.env.SIMD_CXXFLAGS)

    box2d_nosimd = bld.stlib(features='c',
                             includes=incs,
                             source=srcs,
                             target='box2d_nosimd',
                             defines=['BOX2D_DISABLE_SIMD'],
                             cflags=bld.env.NOSIMD_CFLAGS,
                             cxxflags=bld.env.NOSIMD_CXXFLAGS)

    name = f"{APPNAME}-{VERSION}"

    bld.install_files('${PREFIX}/%s/lib/%s/' % (name, bld.env.PLATFORM),
                      bld.env.cxxstlib_PATTERN % 'box2d')
    bld.install_files('${PREFIX}/%s/lib/%s/' % (name, bld.env.PLATFORM),
                      bld.env.cxxstlib_PATTERN % 'box2d_nosimd')

    bld.install_files('${PREFIX}/%s' % (name),
                      bld.path.ant_glob('include/**/*.h'),
                      relative_base=bld.path.find_dir('.'),
                      relative_trick=True)
    bld.install_files('${PREFIX}/%s/include/box2d' % (name),
                      bld.path.ant_glob('src/**/*.h'),
                      relative_base=bld.path.find_dir('.'),
                      relative_trick=True)

    if isinstance(bld, Build.InstallContext):
        bld.add_group()  # ensure install finished

        output_dir = '%s/%s' % (bld.env.PREFIX, name)
        try:
            shutil.rmtree(output_dir)  # clear old content
        except Exception:
            pass

        bld(rule=create_package, cwd=output_dir,
            target=f'{name}-{bld.env.PLATFORM}.tar.gz', always=True)
        bld(rule=create_package, cwd=output_dir,
            target=f'{name}-common.tar.gz', always=True)


def create_package(self):
    target = self.outputs[0].abspath()
    name = self.outputs[0].name

    dirs_search = ['include'] if '-common' in name else ['lib', 'sdk', 'share']
    dirs = [x for x in dirs_search if os.path.exists(os.path.join(self.cwd, x))]

    run.command(['tar', 'zcvf', os.path.normpath(target)] + dirs, cwd=self.cwd)
    print("Wrote", target)

    dest = os.path.normpath(os.path.join(os.environ['DYNAMO_HOME'], '..', '..', 'packages', name))
    shutil.copy2(target, dest)
    print("Installed to", dest)

def package(package):
    pass