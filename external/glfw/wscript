#! /usr/bin/env python

VERSION = '2.7.1'
APPNAME = 'glfw'

srcdir = '.'
blddir = 'build'

import os, sys, re, run, shutil

from waf_dynamo import platform_supports_feature
import waf_ddf, waf_dynamo
import waflib.Options
import TestContext

test_context = None

def init(ctx):
    global test_context
    if 'build' in waflib.Options.commands:
        test_context = TestContext.create_test_context()

def options(opt):
    opt.load('waf_dynamo')

def configure(conf):
    if not platform_supports_feature(conf.env.PLATFORM, "opengl", None):
        print("GLFW isn't supported on this platform", conf.env.PLATFORM)
        return

    conf.load('waf_dynamo')
    conf.load('java')
    waf_ddf.configure(conf)

    platform = conf.env.PLATFORM

    if platform == "linux" or platform == "x86_64-linux":
        conf.env.append_value('CFLAGS', ['-DGL_GLEXT_PROTOTYPES', '-D_GLFW_HAS_GLXGETPROCADDRESS', '-D_GLFW_USE_LINUX_JOYSTICKS', '-D_GLFW_HAS_PTHREAD', '-D_GLFW_HAS_SCHED_YIELD', '-D_GLFW_HAS_SYSCONF'])

    dynamo_home = conf.env.DYNAMO_HOME
    if not dynamo_home:
        conf.fatal("DYNAMO_HOME not set")
    dynamo_ext = os.path.join(dynamo_home, "ext")

    if platform in ('x86_64-macos','arm64-macos'):
        conf.env.append_value('LINKFLAGS', ['-framework', 'Cocoa', '-framework', 'IOKit', '-framework', 'CoreVideo'])
        if not waflib.Options.options.with_vulkan:
            conf.env.append_value('LINKFLAGS', ['-framework', 'OpenGL', '-framework', 'AGL'])
    elif platform in ('arm64-ios', 'x86_64-ios'):
        conf.env.append_value('LINKFLAGS', ['-framework', 'UIKit', '-framework', 'QuartzCore', '-framework', 'CoreGraphics'])
        if not waflib.Options.options.with_vulkan:
            conf.env.append_value('LINKFLAGS', ['-framework', 'OpenGLES'])
    elif re.match('arm.*?android', platform):
        conf.env.append_value('LINKFLAGS', ['-lEGL', '-lGLESv1_CM', '-lGLESv2', '-landroid'])
    elif platform == "linux" or platform == "x86_64-linux":
        conf.env['LIB_X'] = ['Xext', 'X11', 'Xi', 'GL', 'GLU']
    elif 'win32' in platform:
        conf.env.append_value('LINKFLAGS', ['opengl32.lib', 'user32.lib', 'xinput9_1_0.lib', 'glu32.lib'])

    conf.env.append_value('INCLUDES', '../src')
    conf.env.append_value('DEFINES', 'SDL_JOYSTICK_IOKIT')

def build(bld):
    global test_context
    if not platform_supports_feature(bld.env.PLATFORM, "opengl", None):
        print("GLFW isn't supported on this platform", bld.env.PLATFORM)
        return

    bld.recurse('lib')
    bld.install_files('${PREFIX}/include/glfw', 'include/GL/glfw.h')
    bld.install_files('${PREFIX}/include/glfw', 'include/GL/glfw_native.h')

    if 'android' in bld.env['PLATFORM']:
        classpath = ['%s/ext/share/java/android.jar' % bld.env.DYNAMO_HOME];
        classpath = os.pathsep.join(classpath)

        bld(features    = 'javac seq',
            classpath   = classpath,
            outdir      ='java',
            source_root = 'java')

        bld.env['JAVACFLAGS'] = '-g -source 1.7 -target 1.7'.split()

        bld(features = 'jar seq',
            basedir  = 'java',
            destfile = 'glfw_android.jar')

        bld.install_files('${PREFIX}/share/java', 'glfw_android.jar')
    if 'web' in bld.env['PLATFORM']:
        bld.install_files('${PREFIX}/lib/%s/js' % bld.env['PLATFORM'], 'js/library_glfw.js')

    TestContext.initialize_test_context(test_context, bld)

def shutdown(self):
    waf_dynamo.run_tests(test_context, valgrind = True)

def package(self):
    cwd = '../../packages'
    target = "glfw-%s-%s.tar.gz" % (VERSION, self.options.platform)

    dirs = []
    dirs_search = ['include', 'lib', 'sdk', 'share']

    for x in dirs_search:
        if os.path.exists(os.path.join(cwd, x)):
            dirs.append(x)

    args = ['tar', 'zcvf', target] + dirs

    run.command(args, cwd=cwd)
    print("Wrote", target)

    for x in dirs:
        shutil.rmtree("%s/%s" % (cwd, x))
